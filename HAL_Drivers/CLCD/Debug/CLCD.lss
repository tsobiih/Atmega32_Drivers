
CLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002660  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  00002660  000026d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000017f4  00000000  00000000  000027e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001026  00000000  00000000  00003fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00004ffe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d1  00000000  00000000  0000517e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002010  00000000  00000000  0000534f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001161  00000000  00000000  0000735f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001003  00000000  00000000  000084c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  000094c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002be  00000000  00000000  00009664  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000090e  00000000  00000000  00009922  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a230  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e6       	ldi	r30, 0x60	; 96
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 10 10 	call	0x2020	; 0x2020 <main>
      7a:	0c 94 2e 13 	jmp	0x265c	; 0x265c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 56 10 	jmp	0x20ac	; 0x20ac <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a8 e6       	ldi	r26, 0x68	; 104
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 7e 10 	jmp	0x20fc	; 0x20fc <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 7e 10 	jmp	0x20fc	; 0x20fc <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 56 10 	jmp	0x20ac	; 0x20ac <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	88 e6       	ldi	r24, 0x68	; 104
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 7e 10 	jmp	0x20fc	; 0x20fc <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 7e 10 	jmp	0x20fc	; 0x20fc <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 7e 10 	jmp	0x20fc	; 0x20fc <__epilogue_restores__+0x18>

00000742 <__floatsisf>:
     742:	a8 e0       	ldi	r26, 0x08	; 8
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__prologue_saves__+0x12>
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	da 01       	movw	r26, r20
     758:	c9 01       	movw	r24, r18
     75a:	88 27       	eor	r24, r24
     75c:	b7 fd       	sbrc	r27, 7
     75e:	83 95       	inc	r24
     760:	99 27       	eor	r25, r25
     762:	aa 27       	eor	r26, r26
     764:	bb 27       	eor	r27, r27
     766:	b8 2e       	mov	r11, r24
     768:	21 15       	cp	r18, r1
     76a:	31 05       	cpc	r19, r1
     76c:	41 05       	cpc	r20, r1
     76e:	51 05       	cpc	r21, r1
     770:	19 f4       	brne	.+6      	; 0x778 <__floatsisf+0x36>
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	3a c0       	rjmp	.+116    	; 0x7ec <__floatsisf+0xaa>
     778:	88 23       	and	r24, r24
     77a:	a9 f0       	breq	.+42     	; 0x7a6 <__floatsisf+0x64>
     77c:	20 30       	cpi	r18, 0x00	; 0
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	38 07       	cpc	r19, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	48 07       	cpc	r20, r24
     786:	80 e8       	ldi	r24, 0x80	; 128
     788:	58 07       	cpc	r21, r24
     78a:	29 f4       	brne	.+10     	; 0x796 <__floatsisf+0x54>
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	9f ec       	ldi	r25, 0xCF	; 207
     794:	30 c0       	rjmp	.+96     	; 0x7f6 <__floatsisf+0xb4>
     796:	ee 24       	eor	r14, r14
     798:	ff 24       	eor	r15, r15
     79a:	87 01       	movw	r16, r14
     79c:	e2 1a       	sub	r14, r18
     79e:	f3 0a       	sbc	r15, r19
     7a0:	04 0b       	sbc	r16, r20
     7a2:	15 0b       	sbc	r17, r21
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <__floatsisf+0x68>
     7a6:	79 01       	movw	r14, r18
     7a8:	8a 01       	movw	r16, r20
     7aa:	8e e1       	ldi	r24, 0x1E	; 30
     7ac:	c8 2e       	mov	r12, r24
     7ae:	d1 2c       	mov	r13, r1
     7b0:	dc 82       	std	Y+4, r13	; 0x04
     7b2:	cb 82       	std	Y+3, r12	; 0x03
     7b4:	ed 82       	std	Y+5, r14	; 0x05
     7b6:	fe 82       	std	Y+6, r15	; 0x06
     7b8:	0f 83       	std	Y+7, r16	; 0x07
     7ba:	18 87       	std	Y+8, r17	; 0x08
     7bc:	c8 01       	movw	r24, r16
     7be:	b7 01       	movw	r22, r14
     7c0:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__clzsi2>
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	18 16       	cp	r1, r24
     7c8:	19 06       	cpc	r1, r25
     7ca:	84 f4       	brge	.+32     	; 0x7ec <__floatsisf+0xaa>
     7cc:	08 2e       	mov	r0, r24
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <__floatsisf+0x96>
     7d0:	ee 0c       	add	r14, r14
     7d2:	ff 1c       	adc	r15, r15
     7d4:	00 1f       	adc	r16, r16
     7d6:	11 1f       	adc	r17, r17
     7d8:	0a 94       	dec	r0
     7da:	d2 f7       	brpl	.-12     	; 0x7d0 <__floatsisf+0x8e>
     7dc:	ed 82       	std	Y+5, r14	; 0x05
     7de:	fe 82       	std	Y+6, r15	; 0x06
     7e0:	0f 83       	std	Y+7, r16	; 0x07
     7e2:	18 87       	std	Y+8, r17	; 0x08
     7e4:	c8 1a       	sub	r12, r24
     7e6:	d9 0a       	sbc	r13, r25
     7e8:	dc 82       	std	Y+4, r13	; 0x04
     7ea:	cb 82       	std	Y+3, r12	; 0x03
     7ec:	ba 82       	std	Y+2, r11	; 0x02
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     7f6:	28 96       	adiw	r28, 0x08	; 8
     7f8:	e9 e0       	ldi	r30, 0x09	; 9
     7fa:	0c 94 7b 10 	jmp	0x20f6	; 0x20f6 <__epilogue_restores__+0x12>

000007fe <__fixsfsi>:
     7fe:	ac e0       	ldi	r26, 0x0C	; 12
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e5 e0       	ldi	r30, 0x05	; 5
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <__prologue_saves__+0x20>
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	7a 83       	std	Y+2, r23	; 0x02
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	be 01       	movw	r22, r28
     818:	6b 5f       	subi	r22, 0xFB	; 251
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     820:	8d 81       	ldd	r24, Y+5	; 0x05
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	61 f1       	breq	.+88     	; 0x87e <__stack+0x1f>
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	50 f1       	brcs	.+84     	; 0x87e <__stack+0x1f>
     82a:	84 30       	cpi	r24, 0x04	; 4
     82c:	21 f4       	brne	.+8      	; 0x836 <__fixsfsi+0x38>
     82e:	8e 81       	ldd	r24, Y+6	; 0x06
     830:	88 23       	and	r24, r24
     832:	51 f1       	breq	.+84     	; 0x888 <__stack+0x29>
     834:	2e c0       	rjmp	.+92     	; 0x892 <__stack+0x33>
     836:	2f 81       	ldd	r18, Y+7	; 0x07
     838:	38 85       	ldd	r19, Y+8	; 0x08
     83a:	37 fd       	sbrc	r19, 7
     83c:	20 c0       	rjmp	.+64     	; 0x87e <__stack+0x1f>
     83e:	6e 81       	ldd	r22, Y+6	; 0x06
     840:	2f 31       	cpi	r18, 0x1F	; 31
     842:	31 05       	cpc	r19, r1
     844:	1c f0       	brlt	.+6      	; 0x84c <__fixsfsi+0x4e>
     846:	66 23       	and	r22, r22
     848:	f9 f0       	breq	.+62     	; 0x888 <__stack+0x29>
     84a:	23 c0       	rjmp	.+70     	; 0x892 <__stack+0x33>
     84c:	8e e1       	ldi	r24, 0x1E	; 30
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	82 1b       	sub	r24, r18
     852:	93 0b       	sbc	r25, r19
     854:	29 85       	ldd	r18, Y+9	; 0x09
     856:	3a 85       	ldd	r19, Y+10	; 0x0a
     858:	4b 85       	ldd	r20, Y+11	; 0x0b
     85a:	5c 85       	ldd	r21, Y+12	; 0x0c
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	56 95       	lsr	r21
     860:	47 95       	ror	r20
     862:	37 95       	ror	r19
     864:	27 95       	ror	r18
     866:	8a 95       	dec	r24
     868:	d2 f7       	brpl	.-12     	; 0x85e <__fixsfsi+0x60>
     86a:	66 23       	and	r22, r22
     86c:	b1 f0       	breq	.+44     	; 0x89a <__stack+0x3b>
     86e:	50 95       	com	r21
     870:	40 95       	com	r20
     872:	30 95       	com	r19
     874:	21 95       	neg	r18
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	4f 4f       	sbci	r20, 0xFF	; 255
     87a:	5f 4f       	sbci	r21, 0xFF	; 255
     87c:	0e c0       	rjmp	.+28     	; 0x89a <__stack+0x3b>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	09 c0       	rjmp	.+18     	; 0x89a <__stack+0x3b>
     888:	2f ef       	ldi	r18, 0xFF	; 255
     88a:	3f ef       	ldi	r19, 0xFF	; 255
     88c:	4f ef       	ldi	r20, 0xFF	; 255
     88e:	5f e7       	ldi	r21, 0x7F	; 127
     890:	04 c0       	rjmp	.+8      	; 0x89a <__stack+0x3b>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e8       	ldi	r21, 0x80	; 128
     89a:	b9 01       	movw	r22, r18
     89c:	ca 01       	movw	r24, r20
     89e:	2c 96       	adiw	r28, 0x0c	; 12
     8a0:	e2 e0       	ldi	r30, 0x02	; 2
     8a2:	0c 94 82 10 	jmp	0x2104	; 0x2104 <__epilogue_restores__+0x20>

000008a6 <__clzsi2>:
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	7b 01       	movw	r14, r22
     8b0:	8c 01       	movw	r16, r24
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	e8 16       	cp	r14, r24
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	f8 06       	cpc	r15, r24
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	08 07       	cpc	r16, r24
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	18 07       	cpc	r17, r24
     8c2:	88 f4       	brcc	.+34     	; 0x8e6 <__clzsi2+0x40>
     8c4:	8f ef       	ldi	r24, 0xFF	; 255
     8c6:	e8 16       	cp	r14, r24
     8c8:	f1 04       	cpc	r15, r1
     8ca:	01 05       	cpc	r16, r1
     8cc:	11 05       	cpc	r17, r1
     8ce:	31 f0       	breq	.+12     	; 0x8dc <__clzsi2+0x36>
     8d0:	28 f0       	brcs	.+10     	; 0x8dc <__clzsi2+0x36>
     8d2:	88 e0       	ldi	r24, 0x08	; 8
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	a0 e0       	ldi	r26, 0x00	; 0
     8d8:	b0 e0       	ldi	r27, 0x00	; 0
     8da:	17 c0       	rjmp	.+46     	; 0x90a <__clzsi2+0x64>
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	a0 e0       	ldi	r26, 0x00	; 0
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	12 c0       	rjmp	.+36     	; 0x90a <__clzsi2+0x64>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	e8 16       	cp	r14, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	f8 06       	cpc	r15, r24
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	08 07       	cpc	r16, r24
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	18 07       	cpc	r17, r24
     8f6:	28 f0       	brcs	.+10     	; 0x902 <__clzsi2+0x5c>
     8f8:	88 e1       	ldi	r24, 0x18	; 24
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	a0 e0       	ldi	r26, 0x00	; 0
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	04 c0       	rjmp	.+8      	; 0x90a <__clzsi2+0x64>
     902:	80 e1       	ldi	r24, 0x10	; 16
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	a0 e0       	ldi	r26, 0x00	; 0
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	20 e2       	ldi	r18, 0x20	; 32
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	28 1b       	sub	r18, r24
     914:	39 0b       	sbc	r19, r25
     916:	4a 0b       	sbc	r20, r26
     918:	5b 0b       	sbc	r21, r27
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__clzsi2+0x7e>
     91c:	16 95       	lsr	r17
     91e:	07 95       	ror	r16
     920:	f7 94       	ror	r15
     922:	e7 94       	ror	r14
     924:	8a 95       	dec	r24
     926:	d2 f7       	brpl	.-12     	; 0x91c <__clzsi2+0x76>
     928:	f7 01       	movw	r30, r14
     92a:	e0 59       	subi	r30, 0x90	; 144
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	80 81       	ld	r24, Z
     930:	28 1b       	sub	r18, r24
     932:	31 09       	sbc	r19, r1
     934:	41 09       	sbc	r20, r1
     936:	51 09       	sbc	r21, r1
     938:	c9 01       	movw	r24, r18
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	08 95       	ret

00000944 <__pack_f>:
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	fc 01       	movw	r30, r24
     950:	e4 80       	ldd	r14, Z+4	; 0x04
     952:	f5 80       	ldd	r15, Z+5	; 0x05
     954:	06 81       	ldd	r16, Z+6	; 0x06
     956:	17 81       	ldd	r17, Z+7	; 0x07
     958:	d1 80       	ldd	r13, Z+1	; 0x01
     95a:	80 81       	ld	r24, Z
     95c:	82 30       	cpi	r24, 0x02	; 2
     95e:	48 f4       	brcc	.+18     	; 0x972 <__pack_f+0x2e>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	a0 e1       	ldi	r26, 0x10	; 16
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	e8 2a       	or	r14, r24
     96a:	f9 2a       	or	r15, r25
     96c:	0a 2b       	or	r16, r26
     96e:	1b 2b       	or	r17, r27
     970:	a5 c0       	rjmp	.+330    	; 0xabc <__pack_f+0x178>
     972:	84 30       	cpi	r24, 0x04	; 4
     974:	09 f4       	brne	.+2      	; 0x978 <__pack_f+0x34>
     976:	9f c0       	rjmp	.+318    	; 0xab6 <__pack_f+0x172>
     978:	82 30       	cpi	r24, 0x02	; 2
     97a:	21 f4       	brne	.+8      	; 0x984 <__pack_f+0x40>
     97c:	ee 24       	eor	r14, r14
     97e:	ff 24       	eor	r15, r15
     980:	87 01       	movw	r16, r14
     982:	05 c0       	rjmp	.+10     	; 0x98e <__pack_f+0x4a>
     984:	e1 14       	cp	r14, r1
     986:	f1 04       	cpc	r15, r1
     988:	01 05       	cpc	r16, r1
     98a:	11 05       	cpc	r17, r1
     98c:	19 f4       	brne	.+6      	; 0x994 <__pack_f+0x50>
     98e:	e0 e0       	ldi	r30, 0x00	; 0
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	96 c0       	rjmp	.+300    	; 0xac0 <__pack_f+0x17c>
     994:	62 81       	ldd	r22, Z+2	; 0x02
     996:	73 81       	ldd	r23, Z+3	; 0x03
     998:	9f ef       	ldi	r25, 0xFF	; 255
     99a:	62 38       	cpi	r22, 0x82	; 130
     99c:	79 07       	cpc	r23, r25
     99e:	0c f0       	brlt	.+2      	; 0x9a2 <__pack_f+0x5e>
     9a0:	5b c0       	rjmp	.+182    	; 0xa58 <__pack_f+0x114>
     9a2:	22 e8       	ldi	r18, 0x82	; 130
     9a4:	3f ef       	ldi	r19, 0xFF	; 255
     9a6:	26 1b       	sub	r18, r22
     9a8:	37 0b       	sbc	r19, r23
     9aa:	2a 31       	cpi	r18, 0x1A	; 26
     9ac:	31 05       	cpc	r19, r1
     9ae:	2c f0       	brlt	.+10     	; 0x9ba <__pack_f+0x76>
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	2a c0       	rjmp	.+84     	; 0xa0e <__pack_f+0xca>
     9ba:	b8 01       	movw	r22, r16
     9bc:	a7 01       	movw	r20, r14
     9be:	02 2e       	mov	r0, r18
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__pack_f+0x86>
     9c2:	76 95       	lsr	r23
     9c4:	67 95       	ror	r22
     9c6:	57 95       	ror	r21
     9c8:	47 95       	ror	r20
     9ca:	0a 94       	dec	r0
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__pack_f+0x7e>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__pack_f+0x9c>
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	aa 1f       	adc	r26, r26
     9de:	bb 1f       	adc	r27, r27
     9e0:	2a 95       	dec	r18
     9e2:	d2 f7       	brpl	.-12     	; 0x9d8 <__pack_f+0x94>
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	a1 09       	sbc	r26, r1
     9e8:	b1 09       	sbc	r27, r1
     9ea:	8e 21       	and	r24, r14
     9ec:	9f 21       	and	r25, r15
     9ee:	a0 23       	and	r26, r16
     9f0:	b1 23       	and	r27, r17
     9f2:	00 97       	sbiw	r24, 0x00	; 0
     9f4:	a1 05       	cpc	r26, r1
     9f6:	b1 05       	cpc	r27, r1
     9f8:	21 f0       	breq	.+8      	; 0xa02 <__pack_f+0xbe>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	9a 01       	movw	r18, r20
     a04:	ab 01       	movw	r20, r22
     a06:	28 2b       	or	r18, r24
     a08:	39 2b       	or	r19, r25
     a0a:	4a 2b       	or	r20, r26
     a0c:	5b 2b       	or	r21, r27
     a0e:	da 01       	movw	r26, r20
     a10:	c9 01       	movw	r24, r18
     a12:	8f 77       	andi	r24, 0x7F	; 127
     a14:	90 70       	andi	r25, 0x00	; 0
     a16:	a0 70       	andi	r26, 0x00	; 0
     a18:	b0 70       	andi	r27, 0x00	; 0
     a1a:	80 34       	cpi	r24, 0x40	; 64
     a1c:	91 05       	cpc	r25, r1
     a1e:	a1 05       	cpc	r26, r1
     a20:	b1 05       	cpc	r27, r1
     a22:	39 f4       	brne	.+14     	; 0xa32 <__pack_f+0xee>
     a24:	27 ff       	sbrs	r18, 7
     a26:	09 c0       	rjmp	.+18     	; 0xa3a <__pack_f+0xf6>
     a28:	20 5c       	subi	r18, 0xC0	; 192
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
     a2c:	4f 4f       	sbci	r20, 0xFF	; 255
     a2e:	5f 4f       	sbci	r21, 0xFF	; 255
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__pack_f+0xf6>
     a32:	21 5c       	subi	r18, 0xC1	; 193
     a34:	3f 4f       	sbci	r19, 0xFF	; 255
     a36:	4f 4f       	sbci	r20, 0xFF	; 255
     a38:	5f 4f       	sbci	r21, 0xFF	; 255
     a3a:	e0 e0       	ldi	r30, 0x00	; 0
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	20 30       	cpi	r18, 0x00	; 0
     a40:	a0 e0       	ldi	r26, 0x00	; 0
     a42:	3a 07       	cpc	r19, r26
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	4a 07       	cpc	r20, r26
     a48:	a0 e4       	ldi	r26, 0x40	; 64
     a4a:	5a 07       	cpc	r21, r26
     a4c:	10 f0       	brcs	.+4      	; 0xa52 <__pack_f+0x10e>
     a4e:	e1 e0       	ldi	r30, 0x01	; 1
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	79 01       	movw	r14, r18
     a54:	8a 01       	movw	r16, r20
     a56:	27 c0       	rjmp	.+78     	; 0xaa6 <__pack_f+0x162>
     a58:	60 38       	cpi	r22, 0x80	; 128
     a5a:	71 05       	cpc	r23, r1
     a5c:	64 f5       	brge	.+88     	; 0xab6 <__pack_f+0x172>
     a5e:	fb 01       	movw	r30, r22
     a60:	e1 58       	subi	r30, 0x81	; 129
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	d8 01       	movw	r26, r16
     a66:	c7 01       	movw	r24, r14
     a68:	8f 77       	andi	r24, 0x7F	; 127
     a6a:	90 70       	andi	r25, 0x00	; 0
     a6c:	a0 70       	andi	r26, 0x00	; 0
     a6e:	b0 70       	andi	r27, 0x00	; 0
     a70:	80 34       	cpi	r24, 0x40	; 64
     a72:	91 05       	cpc	r25, r1
     a74:	a1 05       	cpc	r26, r1
     a76:	b1 05       	cpc	r27, r1
     a78:	39 f4       	brne	.+14     	; 0xa88 <__pack_f+0x144>
     a7a:	e7 fe       	sbrs	r14, 7
     a7c:	0d c0       	rjmp	.+26     	; 0xa98 <__pack_f+0x154>
     a7e:	80 e4       	ldi	r24, 0x40	; 64
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	a0 e0       	ldi	r26, 0x00	; 0
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <__pack_f+0x14c>
     a88:	8f e3       	ldi	r24, 0x3F	; 63
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	a0 e0       	ldi	r26, 0x00	; 0
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	e8 0e       	add	r14, r24
     a92:	f9 1e       	adc	r15, r25
     a94:	0a 1f       	adc	r16, r26
     a96:	1b 1f       	adc	r17, r27
     a98:	17 ff       	sbrs	r17, 7
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <__pack_f+0x162>
     a9c:	16 95       	lsr	r17
     a9e:	07 95       	ror	r16
     aa0:	f7 94       	ror	r15
     aa2:	e7 94       	ror	r14
     aa4:	31 96       	adiw	r30, 0x01	; 1
     aa6:	87 e0       	ldi	r24, 0x07	; 7
     aa8:	16 95       	lsr	r17
     aaa:	07 95       	ror	r16
     aac:	f7 94       	ror	r15
     aae:	e7 94       	ror	r14
     ab0:	8a 95       	dec	r24
     ab2:	d1 f7       	brne	.-12     	; 0xaa8 <__pack_f+0x164>
     ab4:	05 c0       	rjmp	.+10     	; 0xac0 <__pack_f+0x17c>
     ab6:	ee 24       	eor	r14, r14
     ab8:	ff 24       	eor	r15, r15
     aba:	87 01       	movw	r16, r14
     abc:	ef ef       	ldi	r30, 0xFF	; 255
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	6e 2f       	mov	r22, r30
     ac2:	67 95       	ror	r22
     ac4:	66 27       	eor	r22, r22
     ac6:	67 95       	ror	r22
     ac8:	90 2f       	mov	r25, r16
     aca:	9f 77       	andi	r25, 0x7F	; 127
     acc:	d7 94       	ror	r13
     ace:	dd 24       	eor	r13, r13
     ad0:	d7 94       	ror	r13
     ad2:	8e 2f       	mov	r24, r30
     ad4:	86 95       	lsr	r24
     ad6:	49 2f       	mov	r20, r25
     ad8:	46 2b       	or	r20, r22
     ada:	58 2f       	mov	r21, r24
     adc:	5d 29       	or	r21, r13
     ade:	b7 01       	movw	r22, r14
     ae0:	ca 01       	movw	r24, r20
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	08 95       	ret

00000aee <__unpack_f>:
     aee:	fc 01       	movw	r30, r24
     af0:	db 01       	movw	r26, r22
     af2:	40 81       	ld	r20, Z
     af4:	51 81       	ldd	r21, Z+1	; 0x01
     af6:	22 81       	ldd	r18, Z+2	; 0x02
     af8:	62 2f       	mov	r22, r18
     afa:	6f 77       	andi	r22, 0x7F	; 127
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	22 1f       	adc	r18, r18
     b00:	22 27       	eor	r18, r18
     b02:	22 1f       	adc	r18, r18
     b04:	93 81       	ldd	r25, Z+3	; 0x03
     b06:	89 2f       	mov	r24, r25
     b08:	88 0f       	add	r24, r24
     b0a:	82 2b       	or	r24, r18
     b0c:	28 2f       	mov	r18, r24
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	99 1f       	adc	r25, r25
     b12:	99 27       	eor	r25, r25
     b14:	99 1f       	adc	r25, r25
     b16:	11 96       	adiw	r26, 0x01	; 1
     b18:	9c 93       	st	X, r25
     b1a:	11 97       	sbiw	r26, 0x01	; 1
     b1c:	21 15       	cp	r18, r1
     b1e:	31 05       	cpc	r19, r1
     b20:	a9 f5       	brne	.+106    	; 0xb8c <__unpack_f+0x9e>
     b22:	41 15       	cp	r20, r1
     b24:	51 05       	cpc	r21, r1
     b26:	61 05       	cpc	r22, r1
     b28:	71 05       	cpc	r23, r1
     b2a:	11 f4       	brne	.+4      	; 0xb30 <__unpack_f+0x42>
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	37 c0       	rjmp	.+110    	; 0xb9e <__unpack_f+0xb0>
     b30:	82 e8       	ldi	r24, 0x82	; 130
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	13 96       	adiw	r26, 0x03	; 3
     b36:	9c 93       	st	X, r25
     b38:	8e 93       	st	-X, r24
     b3a:	12 97       	sbiw	r26, 0x02	; 2
     b3c:	9a 01       	movw	r18, r20
     b3e:	ab 01       	movw	r20, r22
     b40:	67 e0       	ldi	r22, 0x07	; 7
     b42:	22 0f       	add	r18, r18
     b44:	33 1f       	adc	r19, r19
     b46:	44 1f       	adc	r20, r20
     b48:	55 1f       	adc	r21, r21
     b4a:	6a 95       	dec	r22
     b4c:	d1 f7       	brne	.-12     	; 0xb42 <__unpack_f+0x54>
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	8c 93       	st	X, r24
     b52:	0d c0       	rjmp	.+26     	; 0xb6e <__unpack_f+0x80>
     b54:	22 0f       	add	r18, r18
     b56:	33 1f       	adc	r19, r19
     b58:	44 1f       	adc	r20, r20
     b5a:	55 1f       	adc	r21, r21
     b5c:	12 96       	adiw	r26, 0x02	; 2
     b5e:	8d 91       	ld	r24, X+
     b60:	9c 91       	ld	r25, X
     b62:	13 97       	sbiw	r26, 0x03	; 3
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	13 96       	adiw	r26, 0x03	; 3
     b68:	9c 93       	st	X, r25
     b6a:	8e 93       	st	-X, r24
     b6c:	12 97       	sbiw	r26, 0x02	; 2
     b6e:	20 30       	cpi	r18, 0x00	; 0
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	38 07       	cpc	r19, r24
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	48 07       	cpc	r20, r24
     b78:	80 e4       	ldi	r24, 0x40	; 64
     b7a:	58 07       	cpc	r21, r24
     b7c:	58 f3       	brcs	.-42     	; 0xb54 <__unpack_f+0x66>
     b7e:	14 96       	adiw	r26, 0x04	; 4
     b80:	2d 93       	st	X+, r18
     b82:	3d 93       	st	X+, r19
     b84:	4d 93       	st	X+, r20
     b86:	5c 93       	st	X, r21
     b88:	17 97       	sbiw	r26, 0x07	; 7
     b8a:	08 95       	ret
     b8c:	2f 3f       	cpi	r18, 0xFF	; 255
     b8e:	31 05       	cpc	r19, r1
     b90:	79 f4       	brne	.+30     	; 0xbb0 <__unpack_f+0xc2>
     b92:	41 15       	cp	r20, r1
     b94:	51 05       	cpc	r21, r1
     b96:	61 05       	cpc	r22, r1
     b98:	71 05       	cpc	r23, r1
     b9a:	19 f4       	brne	.+6      	; 0xba2 <__unpack_f+0xb4>
     b9c:	84 e0       	ldi	r24, 0x04	; 4
     b9e:	8c 93       	st	X, r24
     ba0:	08 95       	ret
     ba2:	64 ff       	sbrs	r22, 4
     ba4:	03 c0       	rjmp	.+6      	; 0xbac <__unpack_f+0xbe>
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	8c 93       	st	X, r24
     baa:	12 c0       	rjmp	.+36     	; 0xbd0 <__unpack_f+0xe2>
     bac:	1c 92       	st	X, r1
     bae:	10 c0       	rjmp	.+32     	; 0xbd0 <__unpack_f+0xe2>
     bb0:	2f 57       	subi	r18, 0x7F	; 127
     bb2:	30 40       	sbci	r19, 0x00	; 0
     bb4:	13 96       	adiw	r26, 0x03	; 3
     bb6:	3c 93       	st	X, r19
     bb8:	2e 93       	st	-X, r18
     bba:	12 97       	sbiw	r26, 0x02	; 2
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	8c 93       	st	X, r24
     bc0:	87 e0       	ldi	r24, 0x07	; 7
     bc2:	44 0f       	add	r20, r20
     bc4:	55 1f       	adc	r21, r21
     bc6:	66 1f       	adc	r22, r22
     bc8:	77 1f       	adc	r23, r23
     bca:	8a 95       	dec	r24
     bcc:	d1 f7       	brne	.-12     	; 0xbc2 <__unpack_f+0xd4>
     bce:	70 64       	ori	r23, 0x40	; 64
     bd0:	14 96       	adiw	r26, 0x04	; 4
     bd2:	4d 93       	st	X+, r20
     bd4:	5d 93       	st	X+, r21
     bd6:	6d 93       	st	X+, r22
     bd8:	7c 93       	st	X, r23
     bda:	17 97       	sbiw	r26, 0x07	; 7
     bdc:	08 95       	ret

00000bde <__fpcmp_parts_f>:
     bde:	1f 93       	push	r17
     be0:	dc 01       	movw	r26, r24
     be2:	fb 01       	movw	r30, r22
     be4:	9c 91       	ld	r25, X
     be6:	92 30       	cpi	r25, 0x02	; 2
     be8:	08 f4       	brcc	.+2      	; 0xbec <__fpcmp_parts_f+0xe>
     bea:	47 c0       	rjmp	.+142    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bec:	80 81       	ld	r24, Z
     bee:	82 30       	cpi	r24, 0x02	; 2
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <__fpcmp_parts_f+0x16>
     bf2:	43 c0       	rjmp	.+134    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bf4:	94 30       	cpi	r25, 0x04	; 4
     bf6:	51 f4       	brne	.+20     	; 0xc0c <__fpcmp_parts_f+0x2e>
     bf8:	11 96       	adiw	r26, 0x01	; 1
     bfa:	1c 91       	ld	r17, X
     bfc:	84 30       	cpi	r24, 0x04	; 4
     bfe:	99 f5       	brne	.+102    	; 0xc66 <__fpcmp_parts_f+0x88>
     c00:	81 81       	ldd	r24, Z+1	; 0x01
     c02:	68 2f       	mov	r22, r24
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	61 1b       	sub	r22, r17
     c08:	71 09       	sbc	r23, r1
     c0a:	3f c0       	rjmp	.+126    	; 0xc8a <__fpcmp_parts_f+0xac>
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	21 f0       	breq	.+8      	; 0xc18 <__fpcmp_parts_f+0x3a>
     c10:	92 30       	cpi	r25, 0x02	; 2
     c12:	31 f4       	brne	.+12     	; 0xc20 <__fpcmp_parts_f+0x42>
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	b9 f1       	breq	.+110    	; 0xc86 <__fpcmp_parts_f+0xa8>
     c18:	81 81       	ldd	r24, Z+1	; 0x01
     c1a:	88 23       	and	r24, r24
     c1c:	89 f1       	breq	.+98     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c1e:	2d c0       	rjmp	.+90     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c20:	11 96       	adiw	r26, 0x01	; 1
     c22:	1c 91       	ld	r17, X
     c24:	11 97       	sbiw	r26, 0x01	; 1
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	f1 f0       	breq	.+60     	; 0xc66 <__fpcmp_parts_f+0x88>
     c2a:	81 81       	ldd	r24, Z+1	; 0x01
     c2c:	18 17       	cp	r17, r24
     c2e:	d9 f4       	brne	.+54     	; 0xc66 <__fpcmp_parts_f+0x88>
     c30:	12 96       	adiw	r26, 0x02	; 2
     c32:	2d 91       	ld	r18, X+
     c34:	3c 91       	ld	r19, X
     c36:	13 97       	sbiw	r26, 0x03	; 3
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	93 81       	ldd	r25, Z+3	; 0x03
     c3c:	82 17       	cp	r24, r18
     c3e:	93 07       	cpc	r25, r19
     c40:	94 f0       	brlt	.+36     	; 0xc66 <__fpcmp_parts_f+0x88>
     c42:	28 17       	cp	r18, r24
     c44:	39 07       	cpc	r19, r25
     c46:	bc f0       	brlt	.+46     	; 0xc76 <__fpcmp_parts_f+0x98>
     c48:	14 96       	adiw	r26, 0x04	; 4
     c4a:	8d 91       	ld	r24, X+
     c4c:	9d 91       	ld	r25, X+
     c4e:	0d 90       	ld	r0, X+
     c50:	bc 91       	ld	r27, X
     c52:	a0 2d       	mov	r26, r0
     c54:	24 81       	ldd	r18, Z+4	; 0x04
     c56:	35 81       	ldd	r19, Z+5	; 0x05
     c58:	46 81       	ldd	r20, Z+6	; 0x06
     c5a:	57 81       	ldd	r21, Z+7	; 0x07
     c5c:	28 17       	cp	r18, r24
     c5e:	39 07       	cpc	r19, r25
     c60:	4a 07       	cpc	r20, r26
     c62:	5b 07       	cpc	r21, r27
     c64:	18 f4       	brcc	.+6      	; 0xc6c <__fpcmp_parts_f+0x8e>
     c66:	11 23       	and	r17, r17
     c68:	41 f0       	breq	.+16     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c6a:	0a c0       	rjmp	.+20     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c6c:	82 17       	cp	r24, r18
     c6e:	93 07       	cpc	r25, r19
     c70:	a4 07       	cpc	r26, r20
     c72:	b5 07       	cpc	r27, r21
     c74:	40 f4       	brcc	.+16     	; 0xc86 <__fpcmp_parts_f+0xa8>
     c76:	11 23       	and	r17, r17
     c78:	19 f0       	breq	.+6      	; 0xc80 <__fpcmp_parts_f+0xa2>
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	05 c0       	rjmp	.+10     	; 0xc8a <__fpcmp_parts_f+0xac>
     c80:	6f ef       	ldi	r22, 0xFF	; 255
     c82:	7f ef       	ldi	r23, 0xFF	; 255
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <__fpcmp_parts_f+0xac>
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	cb 01       	movw	r24, r22
     c8c:	1f 91       	pop	r17
     c8e:	08 95       	ret

00000c90 <CLCD_voidSendData>:
#include "CLCD_Config.h"
#include "CLCD_Private.h"


void CLCD_voidSendData(u8 Copy_u8Data)
{
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
     c98:	2f 97       	sbiw	r28, 0x0f	; 15
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	8f 87       	std	Y+15, r24	; 0x0f
    //Set rs pin to high for send data
    DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_RS_PORT , DIO_u8HIGH);
     ca6:	82 e0       	ldi	r24, 0x02	; 2
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	41 e0       	ldi	r20, 0x01	; 1
     cac:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <DIO_voidSetPinValue>

    //Set rw pin to low for write
    DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_RW_PORT , DIO_u8LOW);
     cb0:	82 e0       	ldi	r24, 0x02	; 2
     cb2:	61 e0       	ldi	r22, 0x01	; 1
     cb4:	40 e0       	ldi	r20, 0x00	; 0
     cb6:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <DIO_voidSetPinValue>

    //Put data
    DIO_voidSetPortValue(CLCD_DATA_PORT , Copy_u8Data);
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	6f 85       	ldd	r22, Y+15	; 0x0f
     cbe:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <DIO_voidSetPortValue>

    //generate enable pulse
    DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_E_PORT , DIO_u8HIGH);
     cc2:	82 e0       	ldi	r24, 0x02	; 2
     cc4:	62 e0       	ldi	r22, 0x02	; 2
     cc6:	41 e0       	ldi	r20, 0x01	; 1
     cc8:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <DIO_voidSetPinValue>
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	a0 e0       	ldi	r26, 0x00	; 0
     cd2:	b0 e4       	ldi	r27, 0x40	; 64
     cd4:	8b 87       	std	Y+11, r24	; 0x0b
     cd6:	9c 87       	std	Y+12, r25	; 0x0c
     cd8:	ad 87       	std	Y+13, r26	; 0x0d
     cda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cdc:	6b 85       	ldd	r22, Y+11	; 0x0b
     cde:	7c 85       	ldd	r23, Y+12	; 0x0c
     ce0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ce2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	4a ef       	ldi	r20, 0xFA	; 250
     cea:	54 e4       	ldi	r21, 0x44	; 68
     cec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cf0:	dc 01       	movw	r26, r24
     cf2:	cb 01       	movw	r24, r22
     cf4:	8f 83       	std	Y+7, r24	; 0x07
     cf6:	98 87       	std	Y+8, r25	; 0x08
     cf8:	a9 87       	std	Y+9, r26	; 0x09
     cfa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cfc:	6f 81       	ldd	r22, Y+7	; 0x07
     cfe:	78 85       	ldd	r23, Y+8	; 0x08
     d00:	89 85       	ldd	r24, Y+9	; 0x09
     d02:	9a 85       	ldd	r25, Y+10	; 0x0a
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e8       	ldi	r20, 0x80	; 128
     d0a:	5f e3       	ldi	r21, 0x3F	; 63
     d0c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d10:	88 23       	and	r24, r24
     d12:	2c f4       	brge	.+10     	; 0xd1e <CLCD_voidSendData+0x8e>
		__ticks = 1;
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	9e 83       	std	Y+6, r25	; 0x06
     d1a:	8d 83       	std	Y+5, r24	; 0x05
     d1c:	3f c0       	rjmp	.+126    	; 0xd9c <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     d1e:	6f 81       	ldd	r22, Y+7	; 0x07
     d20:	78 85       	ldd	r23, Y+8	; 0x08
     d22:	89 85       	ldd	r24, Y+9	; 0x09
     d24:	9a 85       	ldd	r25, Y+10	; 0x0a
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	3f ef       	ldi	r19, 0xFF	; 255
     d2a:	4f e7       	ldi	r20, 0x7F	; 127
     d2c:	57 e4       	ldi	r21, 0x47	; 71
     d2e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d32:	18 16       	cp	r1, r24
     d34:	4c f5       	brge	.+82     	; 0xd88 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d36:	6b 85       	ldd	r22, Y+11	; 0x0b
     d38:	7c 85       	ldd	r23, Y+12	; 0x0c
     d3a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d3c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	40 e2       	ldi	r20, 0x20	; 32
     d44:	51 e4       	ldi	r21, 0x41	; 65
     d46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d4a:	dc 01       	movw	r26, r24
     d4c:	cb 01       	movw	r24, r22
     d4e:	bc 01       	movw	r22, r24
     d50:	cd 01       	movw	r24, r26
     d52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	9e 83       	std	Y+6, r25	; 0x06
     d5c:	8d 83       	std	Y+5, r24	; 0x05
     d5e:	0f c0       	rjmp	.+30     	; 0xd7e <CLCD_voidSendData+0xee>
     d60:	88 ec       	ldi	r24, 0xC8	; 200
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	9c 83       	std	Y+4, r25	; 0x04
     d66:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	9c 81       	ldd	r25, Y+4	; 0x04
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	f1 f7       	brne	.-4      	; 0xd6c <CLCD_voidSendData+0xdc>
     d70:	9c 83       	std	Y+4, r25	; 0x04
     d72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d74:	8d 81       	ldd	r24, Y+5	; 0x05
     d76:	9e 81       	ldd	r25, Y+6	; 0x06
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	9e 83       	std	Y+6, r25	; 0x06
     d7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d7e:	8d 81       	ldd	r24, Y+5	; 0x05
     d80:	9e 81       	ldd	r25, Y+6	; 0x06
     d82:	00 97       	sbiw	r24, 0x00	; 0
     d84:	69 f7       	brne	.-38     	; 0xd60 <CLCD_voidSendData+0xd0>
     d86:	14 c0       	rjmp	.+40     	; 0xdb0 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d88:	6f 81       	ldd	r22, Y+7	; 0x07
     d8a:	78 85       	ldd	r23, Y+8	; 0x08
     d8c:	89 85       	ldd	r24, Y+9	; 0x09
     d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
     d98:	9e 83       	std	Y+6, r25	; 0x06
     d9a:	8d 83       	std	Y+5, r24	; 0x05
     d9c:	8d 81       	ldd	r24, Y+5	; 0x05
     d9e:	9e 81       	ldd	r25, Y+6	; 0x06
     da0:	9a 83       	std	Y+2, r25	; 0x02
     da2:	89 83       	std	Y+1, r24	; 0x01
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	9a 81       	ldd	r25, Y+2	; 0x02
     da8:	01 97       	sbiw	r24, 0x01	; 1
     daa:	f1 f7       	brne	.-4      	; 0xda8 <CLCD_voidSendData+0x118>
     dac:	9a 83       	std	Y+2, r25	; 0x02
     dae:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_E_PORT , DIO_u8LOW);
     db0:	82 e0       	ldi	r24, 0x02	; 2
     db2:	62 e0       	ldi	r22, 0x02	; 2
     db4:	40 e0       	ldi	r20, 0x00	; 0
     db6:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <DIO_voidSetPinValue>

}
     dba:	2f 96       	adiw	r28, 0x0f	; 15
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	cf 91       	pop	r28
     dc8:	df 91       	pop	r29
     dca:	08 95       	ret

00000dcc <CLCD_voidSendCommand>:
void CLCD_voidSendCommand(u8 Copy_u8DCommand)
{
     dcc:	df 93       	push	r29
     dce:	cf 93       	push	r28
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
     dd4:	2f 97       	sbiw	r28, 0x0f	; 15
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	f8 94       	cli
     dda:	de bf       	out	0x3e, r29	; 62
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	cd bf       	out	0x3d, r28	; 61
     de0:	8f 87       	std	Y+15, r24	; 0x0f
    //Set rs pin to high for send data
    DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_RS_PORT , DIO_u8LOW);
     de2:	82 e0       	ldi	r24, 0x02	; 2
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	40 e0       	ldi	r20, 0x00	; 0
     de8:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <DIO_voidSetPinValue>

    //Set rw pin to low for write
    DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_RW_PORT , DIO_u8LOW);
     dec:	82 e0       	ldi	r24, 0x02	; 2
     dee:	61 e0       	ldi	r22, 0x01	; 1
     df0:	40 e0       	ldi	r20, 0x00	; 0
     df2:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <DIO_voidSetPinValue>

    //Put data
    DIO_voidSetPortValue(CLCD_DATA_PORT , Copy_u8DCommand);
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	6f 85       	ldd	r22, Y+15	; 0x0f
     dfa:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <DIO_voidSetPortValue>

    //generate enable pulse
    DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_E_PORT , DIO_u8HIGH);
     dfe:	82 e0       	ldi	r24, 0x02	; 2
     e00:	62 e0       	ldi	r22, 0x02	; 2
     e02:	41 e0       	ldi	r20, 0x01	; 1
     e04:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <DIO_voidSetPinValue>
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	a0 e0       	ldi	r26, 0x00	; 0
     e0e:	b0 e4       	ldi	r27, 0x40	; 64
     e10:	8b 87       	std	Y+11, r24	; 0x0b
     e12:	9c 87       	std	Y+12, r25	; 0x0c
     e14:	ad 87       	std	Y+13, r26	; 0x0d
     e16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e18:	6b 85       	ldd	r22, Y+11	; 0x0b
     e1a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e1e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	4a ef       	ldi	r20, 0xFA	; 250
     e26:	54 e4       	ldi	r21, 0x44	; 68
     e28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e2c:	dc 01       	movw	r26, r24
     e2e:	cb 01       	movw	r24, r22
     e30:	8f 83       	std	Y+7, r24	; 0x07
     e32:	98 87       	std	Y+8, r25	; 0x08
     e34:	a9 87       	std	Y+9, r26	; 0x09
     e36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e38:	6f 81       	ldd	r22, Y+7	; 0x07
     e3a:	78 85       	ldd	r23, Y+8	; 0x08
     e3c:	89 85       	ldd	r24, Y+9	; 0x09
     e3e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	40 e8       	ldi	r20, 0x80	; 128
     e46:	5f e3       	ldi	r21, 0x3F	; 63
     e48:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e4c:	88 23       	and	r24, r24
     e4e:	2c f4       	brge	.+10     	; 0xe5a <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	9e 83       	std	Y+6, r25	; 0x06
     e56:	8d 83       	std	Y+5, r24	; 0x05
     e58:	3f c0       	rjmp	.+126    	; 0xed8 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     e5a:	6f 81       	ldd	r22, Y+7	; 0x07
     e5c:	78 85       	ldd	r23, Y+8	; 0x08
     e5e:	89 85       	ldd	r24, Y+9	; 0x09
     e60:	9a 85       	ldd	r25, Y+10	; 0x0a
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	3f ef       	ldi	r19, 0xFF	; 255
     e66:	4f e7       	ldi	r20, 0x7F	; 127
     e68:	57 e4       	ldi	r21, 0x47	; 71
     e6a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e6e:	18 16       	cp	r1, r24
     e70:	4c f5       	brge	.+82     	; 0xec4 <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e72:	6b 85       	ldd	r22, Y+11	; 0x0b
     e74:	7c 85       	ldd	r23, Y+12	; 0x0c
     e76:	8d 85       	ldd	r24, Y+13	; 0x0d
     e78:	9e 85       	ldd	r25, Y+14	; 0x0e
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	40 e2       	ldi	r20, 0x20	; 32
     e80:	51 e4       	ldi	r21, 0x41	; 65
     e82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e86:	dc 01       	movw	r26, r24
     e88:	cb 01       	movw	r24, r22
     e8a:	bc 01       	movw	r22, r24
     e8c:	cd 01       	movw	r24, r26
     e8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e92:	dc 01       	movw	r26, r24
     e94:	cb 01       	movw	r24, r22
     e96:	9e 83       	std	Y+6, r25	; 0x06
     e98:	8d 83       	std	Y+5, r24	; 0x05
     e9a:	0f c0       	rjmp	.+30     	; 0xeba <CLCD_voidSendCommand+0xee>
     e9c:	88 ec       	ldi	r24, 0xC8	; 200
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	9c 83       	std	Y+4, r25	; 0x04
     ea2:	8b 83       	std	Y+3, r24	; 0x03
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	9c 81       	ldd	r25, Y+4	; 0x04
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	f1 f7       	brne	.-4      	; 0xea8 <CLCD_voidSendCommand+0xdc>
     eac:	9c 83       	std	Y+4, r25	; 0x04
     eae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb0:	8d 81       	ldd	r24, Y+5	; 0x05
     eb2:	9e 81       	ldd	r25, Y+6	; 0x06
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	9e 83       	std	Y+6, r25	; 0x06
     eb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eba:	8d 81       	ldd	r24, Y+5	; 0x05
     ebc:	9e 81       	ldd	r25, Y+6	; 0x06
     ebe:	00 97       	sbiw	r24, 0x00	; 0
     ec0:	69 f7       	brne	.-38     	; 0xe9c <CLCD_voidSendCommand+0xd0>
     ec2:	14 c0       	rjmp	.+40     	; 0xeec <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ec4:	6f 81       	ldd	r22, Y+7	; 0x07
     ec6:	78 85       	ldd	r23, Y+8	; 0x08
     ec8:	89 85       	ldd	r24, Y+9	; 0x09
     eca:	9a 85       	ldd	r25, Y+10	; 0x0a
     ecc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	9e 83       	std	Y+6, r25	; 0x06
     ed6:	8d 83       	std	Y+5, r24	; 0x05
     ed8:	8d 81       	ldd	r24, Y+5	; 0x05
     eda:	9e 81       	ldd	r25, Y+6	; 0x06
     edc:	9a 83       	std	Y+2, r25	; 0x02
     ede:	89 83       	std	Y+1, r24	; 0x01
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	9a 81       	ldd	r25, Y+2	; 0x02
     ee4:	01 97       	sbiw	r24, 0x01	; 1
     ee6:	f1 f7       	brne	.-4      	; 0xee4 <CLCD_voidSendCommand+0x118>
     ee8:	9a 83       	std	Y+2, r25	; 0x02
     eea:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_E_PORT , DIO_u8LOW);
     eec:	82 e0       	ldi	r24, 0x02	; 2
     eee:	62 e0       	ldi	r22, 0x02	; 2
     ef0:	40 e0       	ldi	r20, 0x00	; 0
     ef2:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <DIO_voidSetPinValue>
}
     ef6:	2f 96       	adiw	r28, 0x0f	; 15
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	de bf       	out	0x3e, r29	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	cd bf       	out	0x3d, r28	; 61
     f02:	cf 91       	pop	r28
     f04:	df 91       	pop	r29
     f06:	08 95       	ret

00000f08 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	2e 97       	sbiw	r28, 0x0e	; 14
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	a0 e2       	ldi	r26, 0x20	; 32
     f22:	b2 e4       	ldi	r27, 0x42	; 66
     f24:	8b 87       	std	Y+11, r24	; 0x0b
     f26:	9c 87       	std	Y+12, r25	; 0x0c
     f28:	ad 87       	std	Y+13, r26	; 0x0d
     f2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f2c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f2e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f30:	8d 85       	ldd	r24, Y+13	; 0x0d
     f32:	9e 85       	ldd	r25, Y+14	; 0x0e
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	4a ef       	ldi	r20, 0xFA	; 250
     f3a:	54 e4       	ldi	r21, 0x44	; 68
     f3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	8f 83       	std	Y+7, r24	; 0x07
     f46:	98 87       	std	Y+8, r25	; 0x08
     f48:	a9 87       	std	Y+9, r26	; 0x09
     f4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f4c:	6f 81       	ldd	r22, Y+7	; 0x07
     f4e:	78 85       	ldd	r23, Y+8	; 0x08
     f50:	89 85       	ldd	r24, Y+9	; 0x09
     f52:	9a 85       	ldd	r25, Y+10	; 0x0a
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e8       	ldi	r20, 0x80	; 128
     f5a:	5f e3       	ldi	r21, 0x3F	; 63
     f5c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f60:	88 23       	and	r24, r24
     f62:	2c f4       	brge	.+10     	; 0xf6e <CLCD_voidInit+0x66>
		__ticks = 1;
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	9e 83       	std	Y+6, r25	; 0x06
     f6a:	8d 83       	std	Y+5, r24	; 0x05
     f6c:	3f c0       	rjmp	.+126    	; 0xfec <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     f6e:	6f 81       	ldd	r22, Y+7	; 0x07
     f70:	78 85       	ldd	r23, Y+8	; 0x08
     f72:	89 85       	ldd	r24, Y+9	; 0x09
     f74:	9a 85       	ldd	r25, Y+10	; 0x0a
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	3f ef       	ldi	r19, 0xFF	; 255
     f7a:	4f e7       	ldi	r20, 0x7F	; 127
     f7c:	57 e4       	ldi	r21, 0x47	; 71
     f7e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f82:	18 16       	cp	r1, r24
     f84:	4c f5       	brge	.+82     	; 0xfd8 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f86:	6b 85       	ldd	r22, Y+11	; 0x0b
     f88:	7c 85       	ldd	r23, Y+12	; 0x0c
     f8a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f8c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	40 e2       	ldi	r20, 0x20	; 32
     f94:	51 e4       	ldi	r21, 0x41	; 65
     f96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	bc 01       	movw	r22, r24
     fa0:	cd 01       	movw	r24, r26
     fa2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	9e 83       	std	Y+6, r25	; 0x06
     fac:	8d 83       	std	Y+5, r24	; 0x05
     fae:	0f c0       	rjmp	.+30     	; 0xfce <CLCD_voidInit+0xc6>
     fb0:	88 ec       	ldi	r24, 0xC8	; 200
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	9c 83       	std	Y+4, r25	; 0x04
     fb6:	8b 83       	std	Y+3, r24	; 0x03
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	9c 81       	ldd	r25, Y+4	; 0x04
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	f1 f7       	brne	.-4      	; 0xfbc <CLCD_voidInit+0xb4>
     fc0:	9c 83       	std	Y+4, r25	; 0x04
     fc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc4:	8d 81       	ldd	r24, Y+5	; 0x05
     fc6:	9e 81       	ldd	r25, Y+6	; 0x06
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	9e 83       	std	Y+6, r25	; 0x06
     fcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fce:	8d 81       	ldd	r24, Y+5	; 0x05
     fd0:	9e 81       	ldd	r25, Y+6	; 0x06
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	69 f7       	brne	.-38     	; 0xfb0 <CLCD_voidInit+0xa8>
     fd6:	14 c0       	rjmp	.+40     	; 0x1000 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd8:	6f 81       	ldd	r22, Y+7	; 0x07
     fda:	78 85       	ldd	r23, Y+8	; 0x08
     fdc:	89 85       	ldd	r24, Y+9	; 0x09
     fde:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	9e 83       	std	Y+6, r25	; 0x06
     fea:	8d 83       	std	Y+5, r24	; 0x05
     fec:	8d 81       	ldd	r24, Y+5	; 0x05
     fee:	9e 81       	ldd	r25, Y+6	; 0x06
     ff0:	9a 83       	std	Y+2, r25	; 0x02
     ff2:	89 83       	std	Y+1, r24	; 0x01
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	9a 81       	ldd	r25, Y+2	; 0x02
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <CLCD_voidInit+0xf0>
     ffc:	9a 83       	std	Y+2, r25	; 0x02
     ffe:	89 83       	std	Y+1, r24	; 0x01
    //Wait for more than 30 ms
    _delay_ms(40);
    //Set Function
    CLCD_voidSendCommand(0b00111000);
    1000:	88 e3       	ldi	r24, 0x38	; 56
    1002:	0e 94 e6 06 	call	0xdcc	; 0xdcc <CLCD_voidSendCommand>
    //Display ON/OFF
    CLCD_voidSendCommand(0b00001111);
    1006:	8f e0       	ldi	r24, 0x0F	; 15
    1008:	0e 94 e6 06 	call	0xdcc	; 0xdcc <CLCD_voidSendCommand>
    //Display Clear
    CLCD_voidSendCommand(0b00000001);
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	0e 94 e6 06 	call	0xdcc	; 0xdcc <CLCD_voidSendCommand>
}
    1012:	2e 96       	adiw	r28, 0x0e	; 14
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <CLCD_voidSendString>:

void CLCD_voidSendString(const char *Copy_pString)
{
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	00 d0       	rcall	.+0      	; 0x102a <CLCD_voidSendString+0x6>
    102a:	0f 92       	push	r0
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	9b 83       	std	Y+3, r25	; 0x03
    1032:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
    1034:	19 82       	std	Y+1, r1	; 0x01
    1036:	0e c0       	rjmp	.+28     	; 0x1054 <CLCD_voidSendString+0x30>
	while(Copy_pString[Local_u8Counter] != '\0')
	{
		CLCD_voidSendData(Copy_pString[Local_u8Counter]);
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	9b 81       	ldd	r25, Y+3	; 0x03
    1042:	fc 01       	movw	r30, r24
    1044:	e2 0f       	add	r30, r18
    1046:	f3 1f       	adc	r31, r19
    1048:	80 81       	ld	r24, Z
    104a:	0e 94 48 06 	call	0xc90	; 0xc90 <CLCD_voidSendData>
		Local_u8Counter++;
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	8f 5f       	subi	r24, 0xFF	; 255
    1052:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char *Copy_pString)
{
	u8 Local_u8Counter=0;
	while(Copy_pString[Local_u8Counter] != '\0')
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	9b 81       	ldd	r25, Y+3	; 0x03
    105e:	fc 01       	movw	r30, r24
    1060:	e2 0f       	add	r30, r18
    1062:	f3 1f       	adc	r31, r19
    1064:	80 81       	ld	r24, Z
    1066:	88 23       	and	r24, r24
    1068:	39 f7       	brne	.-50     	; 0x1038 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <CLCD_voidSendInteger>:


void CLCD_voidSendInteger(u32 Copy_u32Integer)
{
    1076:	0f 93       	push	r16
    1078:	1f 93       	push	r17
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	60 97       	sbiw	r28, 0x10	; 16
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	cd bf       	out	0x3d, r28	; 61
    108e:	6d 87       	std	Y+13, r22	; 0x0d
    1090:	7e 87       	std	Y+14, r23	; 0x0e
    1092:	8f 87       	std	Y+15, r24	; 0x0f
    1094:	98 8b       	std	Y+16, r25	; 0x10
	u8 Local_u8Number[10];
	u8 i=0;
    1096:	1a 82       	std	Y+2, r1	; 0x02
    1098:	2e c0       	rjmp	.+92     	; 0x10f6 <CLCD_voidSendInteger+0x80>
	while(Copy_u32Integer >= 10)
	{
		Local_u8Number[i] = Copy_u32Integer%10 + ZERO_ASCII;
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	08 2f       	mov	r16, r24
    109e:	10 e0       	ldi	r17, 0x00	; 0
    10a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    10a4:	af 85       	ldd	r26, Y+15	; 0x0f
    10a6:	b8 89       	ldd	r27, Y+16	; 0x10
    10a8:	2a e0       	ldi	r18, 0x0A	; 10
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	40 e0       	ldi	r20, 0x00	; 0
    10ae:	50 e0       	ldi	r21, 0x00	; 0
    10b0:	bc 01       	movw	r22, r24
    10b2:	cd 01       	movw	r24, r26
    10b4:	0e 94 34 10 	call	0x2068	; 0x2068 <__udivmodsi4>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	28 2f       	mov	r18, r24
    10be:	20 5d       	subi	r18, 0xD0	; 208
    10c0:	ce 01       	movw	r24, r28
    10c2:	03 96       	adiw	r24, 0x03	; 3
    10c4:	fc 01       	movw	r30, r24
    10c6:	e0 0f       	add	r30, r16
    10c8:	f1 1f       	adc	r31, r17
    10ca:	20 83       	st	Z, r18
		Copy_u32Integer = Copy_u32Integer/10;
    10cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    10d0:	af 85       	ldd	r26, Y+15	; 0x0f
    10d2:	b8 89       	ldd	r27, Y+16	; 0x10
    10d4:	2a e0       	ldi	r18, 0x0A	; 10
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e0       	ldi	r20, 0x00	; 0
    10da:	50 e0       	ldi	r21, 0x00	; 0
    10dc:	bc 01       	movw	r22, r24
    10de:	cd 01       	movw	r24, r26
    10e0:	0e 94 34 10 	call	0x2068	; 0x2068 <__udivmodsi4>
    10e4:	da 01       	movw	r26, r20
    10e6:	c9 01       	movw	r24, r18
    10e8:	8d 87       	std	Y+13, r24	; 0x0d
    10ea:	9e 87       	std	Y+14, r25	; 0x0e
    10ec:	af 87       	std	Y+15, r26	; 0x0f
    10ee:	b8 8b       	std	Y+16, r27	; 0x10
		i++;
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	8f 5f       	subi	r24, 0xFF	; 255
    10f4:	8a 83       	std	Y+2, r24	; 0x02

void CLCD_voidSendInteger(u32 Copy_u32Integer)
{
	u8 Local_u8Number[10];
	u8 i=0;
	while(Copy_u32Integer >= 10)
    10f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10fa:	af 85       	ldd	r26, Y+15	; 0x0f
    10fc:	b8 89       	ldd	r27, Y+16	; 0x10
    10fe:	8a 30       	cpi	r24, 0x0A	; 10
    1100:	91 05       	cpc	r25, r1
    1102:	a1 05       	cpc	r26, r1
    1104:	b1 05       	cpc	r27, r1
    1106:	48 f6       	brcc	.-110    	; 0x109a <CLCD_voidSendInteger+0x24>
	{
		Local_u8Number[i] = Copy_u32Integer%10 + ZERO_ASCII;
		Copy_u32Integer = Copy_u32Integer/10;
		i++;
	}
	Local_u8Number[i] = Copy_u32Integer + ZERO_ASCII;
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1110:	48 2f       	mov	r20, r24
    1112:	40 5d       	subi	r20, 0xD0	; 208
    1114:	ce 01       	movw	r24, r28
    1116:	03 96       	adiw	r24, 0x03	; 3
    1118:	fc 01       	movw	r30, r24
    111a:	e2 0f       	add	r30, r18
    111c:	f3 1f       	adc	r31, r19
    111e:	40 83       	st	Z, r20

	for(s8 j=i ; j>=0 ; j--)
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	89 83       	std	Y+1, r24	; 0x01
    1124:	10 c0       	rjmp	.+32     	; 0x1146 <CLCD_voidSendInteger+0xd0>
	{
		CLCD_voidSendData(Local_u8Number[j]);
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	28 2f       	mov	r18, r24
    112a:	33 27       	eor	r19, r19
    112c:	27 fd       	sbrc	r18, 7
    112e:	30 95       	com	r19
    1130:	ce 01       	movw	r24, r28
    1132:	03 96       	adiw	r24, 0x03	; 3
    1134:	fc 01       	movw	r30, r24
    1136:	e2 0f       	add	r30, r18
    1138:	f3 1f       	adc	r31, r19
    113a:	80 81       	ld	r24, Z
    113c:	0e 94 48 06 	call	0xc90	; 0xc90 <CLCD_voidSendData>
		Copy_u32Integer = Copy_u32Integer/10;
		i++;
	}
	Local_u8Number[i] = Copy_u32Integer + ZERO_ASCII;

	for(s8 j=i ; j>=0 ; j--)
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	81 50       	subi	r24, 0x01	; 1
    1144:	89 83       	std	Y+1, r24	; 0x01
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	88 23       	and	r24, r24
    114a:	6c f7       	brge	.-38     	; 0x1126 <CLCD_voidSendInteger+0xb0>
	{
		CLCD_voidSendData(Local_u8Number[j]);
	}
}
    114c:	60 96       	adiw	r28, 0x10	; 16
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	cd bf       	out	0x3d, r28	; 61
    1158:	cf 91       	pop	r28
    115a:	df 91       	pop	r29
    115c:	1f 91       	pop	r17
    115e:	0f 91       	pop	r16
    1160:	08 95       	ret

00001162 <CLCD_voidSetXYPosition>:



void CLCD_voidSetXYPosition(u8 Copy_u8XPositin , u8 Copy_u8YPositin)
{
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	00 d0       	rcall	.+0      	; 0x1168 <CLCD_voidSetXYPosition+0x6>
    1168:	0f 92       	push	r0
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	8a 83       	std	Y+2, r24	; 0x02
    1170:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;

	if(Copy_u8YPositin == 0)
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	88 23       	and	r24, r24
    1176:	19 f4       	brne	.+6      	; 0x117e <CLCD_voidSetXYPosition+0x1c>
	{
		Local_u8Address = Copy_u8XPositin;
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	06 c0       	rjmp	.+12     	; 0x118a <CLCD_voidSetXYPosition+0x28>
	}
	else if(Copy_u8YPositin == 1)
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	19 f4       	brne	.+6      	; 0x118a <CLCD_voidSetXYPosition+0x28>
	{
		Local_u8Address = Copy_u8XPositin + 0x40;
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	80 5c       	subi	r24, 0xC0	; 192
    1188:	89 83       	std	Y+1, r24	; 0x01
	}
	SET_BIT(Local_u8Address , 7);
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	80 68       	ori	r24, 0x80	; 128
    118e:	89 83       	std	Y+1, r24	; 0x01

	CLCD_voidSendCommand(Local_u8Address);
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	0e 94 e6 06 	call	0xdcc	; 0xdcc <CLCD_voidSendCommand>
}
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <CLCD_voidScrollTextLeftToRight>:



void CLCD_voidScrollTextLeftToRight(char *Copy_u8Text)
{
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	63 97       	sbiw	r28, 0x13	; 19
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	de bf       	out	0x3e, r29	; 62
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	cd bf       	out	0x3d, r28	; 61
    11b6:	9b 8b       	std	Y+19, r25	; 0x13
    11b8:	8a 8b       	std	Y+18, r24	; 0x12
	u8 STR_u8Lenght=0;
    11ba:	19 8a       	std	Y+17, r1	; 0x11
    11bc:	03 c0       	rjmp	.+6      	; 0x11c4 <CLCD_voidScrollTextLeftToRight+0x22>
	while(Copy_u8Text[STR_u8Lenght] != '\0')
	{
		STR_u8Lenght++;
    11be:	89 89       	ldd	r24, Y+17	; 0x11
    11c0:	8f 5f       	subi	r24, 0xFF	; 255
    11c2:	89 8b       	std	Y+17, r24	; 0x11


void CLCD_voidScrollTextLeftToRight(char *Copy_u8Text)
{
	u8 STR_u8Lenght=0;
	while(Copy_u8Text[STR_u8Lenght] != '\0')
    11c4:	89 89       	ldd	r24, Y+17	; 0x11
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	8a 89       	ldd	r24, Y+18	; 0x12
    11cc:	9b 89       	ldd	r25, Y+19	; 0x13
    11ce:	fc 01       	movw	r30, r24
    11d0:	e2 0f       	add	r30, r18
    11d2:	f3 1f       	adc	r31, r19
    11d4:	80 81       	ld	r24, Z
    11d6:	88 23       	and	r24, r24
    11d8:	91 f7       	brne	.-28     	; 0x11be <CLCD_voidScrollTextLeftToRight+0x1c>
	{
		STR_u8Lenght++;
	}

	for(s8 position = -STR_u8Lenght ; position<=16 ; position++)
    11da:	89 89       	ldd	r24, Y+17	; 0x11
    11dc:	81 95       	neg	r24
    11de:	88 8b       	std	Y+16, r24	; 0x10
    11e0:	b2 c0       	rjmp	.+356    	; 0x1346 <CLCD_voidScrollTextLeftToRight+0x1a4>
	{
		CLCD_voidSendCommand(0x01);    //Clear Display
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	0e 94 e6 06 	call	0xdcc	; 0xdcc <CLCD_voidSendCommand>
		if(position >= 0) CLCD_voidSetXYPosition(position , 0);
    11e8:	88 89       	ldd	r24, Y+16	; 0x10
    11ea:	88 23       	and	r24, r24
    11ec:	2c f0       	brlt	.+10     	; 0x11f8 <CLCD_voidScrollTextLeftToRight+0x56>
    11ee:	88 89       	ldd	r24, Y+16	; 0x10
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	0e 94 b1 08 	call	0x1162	; 0x1162 <CLCD_voidSetXYPosition>
    11f6:	07 c0       	rjmp	.+14     	; 0x1206 <CLCD_voidScrollTextLeftToRight+0x64>
		else if(position < 0) CLCD_voidSetXYPosition(0 , 0);
    11f8:	88 89       	ldd	r24, Y+16	; 0x10
    11fa:	88 23       	and	r24, r24
    11fc:	24 f4       	brge	.+8      	; 0x1206 <CLCD_voidScrollTextLeftToRight+0x64>
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	0e 94 b1 08 	call	0x1162	; 0x1162 <CLCD_voidSetXYPosition>

		for(u8 i=0 ; i<STR_u8Lenght ; i++)
    1206:	1f 86       	std	Y+15, r1	; 0x0f
    1208:	25 c0       	rjmp	.+74     	; 0x1254 <CLCD_voidScrollTextLeftToRight+0xb2>
		{
			if(i + position >= 0 && i + position < 16 )
    120a:	8f 85       	ldd	r24, Y+15	; 0x0f
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	88 89       	ldd	r24, Y+16	; 0x10
    1212:	99 27       	eor	r25, r25
    1214:	87 fd       	sbrc	r24, 7
    1216:	90 95       	com	r25
    1218:	82 0f       	add	r24, r18
    121a:	93 1f       	adc	r25, r19
    121c:	99 23       	and	r25, r25
    121e:	bc f0       	brlt	.+46     	; 0x124e <CLCD_voidScrollTextLeftToRight+0xac>
    1220:	8f 85       	ldd	r24, Y+15	; 0x0f
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	88 89       	ldd	r24, Y+16	; 0x10
    1228:	99 27       	eor	r25, r25
    122a:	87 fd       	sbrc	r24, 7
    122c:	90 95       	com	r25
    122e:	82 0f       	add	r24, r18
    1230:	93 1f       	adc	r25, r19
    1232:	80 31       	cpi	r24, 0x10	; 16
    1234:	91 05       	cpc	r25, r1
    1236:	5c f4       	brge	.+22     	; 0x124e <CLCD_voidScrollTextLeftToRight+0xac>
			{
				CLCD_voidSendData(Copy_u8Text[i]);
    1238:	8f 85       	ldd	r24, Y+15	; 0x0f
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	8a 89       	ldd	r24, Y+18	; 0x12
    1240:	9b 89       	ldd	r25, Y+19	; 0x13
    1242:	fc 01       	movw	r30, r24
    1244:	e2 0f       	add	r30, r18
    1246:	f3 1f       	adc	r31, r19
    1248:	80 81       	ld	r24, Z
    124a:	0e 94 48 06 	call	0xc90	; 0xc90 <CLCD_voidSendData>
	{
		CLCD_voidSendCommand(0x01);    //Clear Display
		if(position >= 0) CLCD_voidSetXYPosition(position , 0);
		else if(position < 0) CLCD_voidSetXYPosition(0 , 0);

		for(u8 i=0 ; i<STR_u8Lenght ; i++)
    124e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1250:	8f 5f       	subi	r24, 0xFF	; 255
    1252:	8f 87       	std	Y+15, r24	; 0x0f
    1254:	9f 85       	ldd	r25, Y+15	; 0x0f
    1256:	89 89       	ldd	r24, Y+17	; 0x11
    1258:	98 17       	cp	r25, r24
    125a:	b8 f2       	brcs	.-82     	; 0x120a <CLCD_voidScrollTextLeftToRight+0x68>
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	a6 e9       	ldi	r26, 0x96	; 150
    1262:	b3 e4       	ldi	r27, 0x43	; 67
    1264:	8b 87       	std	Y+11, r24	; 0x0b
    1266:	9c 87       	std	Y+12, r25	; 0x0c
    1268:	ad 87       	std	Y+13, r26	; 0x0d
    126a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    126c:	6b 85       	ldd	r22, Y+11	; 0x0b
    126e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1270:	8d 85       	ldd	r24, Y+13	; 0x0d
    1272:	9e 85       	ldd	r25, Y+14	; 0x0e
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	4a ef       	ldi	r20, 0xFA	; 250
    127a:	54 e4       	ldi	r21, 0x44	; 68
    127c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	8f 83       	std	Y+7, r24	; 0x07
    1286:	98 87       	std	Y+8, r25	; 0x08
    1288:	a9 87       	std	Y+9, r26	; 0x09
    128a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    128c:	6f 81       	ldd	r22, Y+7	; 0x07
    128e:	78 85       	ldd	r23, Y+8	; 0x08
    1290:	89 85       	ldd	r24, Y+9	; 0x09
    1292:	9a 85       	ldd	r25, Y+10	; 0x0a
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e8       	ldi	r20, 0x80	; 128
    129a:	5f e3       	ldi	r21, 0x3F	; 63
    129c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12a0:	88 23       	and	r24, r24
    12a2:	2c f4       	brge	.+10     	; 0x12ae <CLCD_voidScrollTextLeftToRight+0x10c>
		__ticks = 1;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	9e 83       	std	Y+6, r25	; 0x06
    12aa:	8d 83       	std	Y+5, r24	; 0x05
    12ac:	3f c0       	rjmp	.+126    	; 0x132c <CLCD_voidScrollTextLeftToRight+0x18a>
	else if (__tmp > 65535)
    12ae:	6f 81       	ldd	r22, Y+7	; 0x07
    12b0:	78 85       	ldd	r23, Y+8	; 0x08
    12b2:	89 85       	ldd	r24, Y+9	; 0x09
    12b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	3f ef       	ldi	r19, 0xFF	; 255
    12ba:	4f e7       	ldi	r20, 0x7F	; 127
    12bc:	57 e4       	ldi	r21, 0x47	; 71
    12be:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12c2:	18 16       	cp	r1, r24
    12c4:	4c f5       	brge	.+82     	; 0x1318 <CLCD_voidScrollTextLeftToRight+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    12c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    12cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	40 e2       	ldi	r20, 0x20	; 32
    12d4:	51 e4       	ldi	r21, 0x41	; 65
    12d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	bc 01       	movw	r22, r24
    12e0:	cd 01       	movw	r24, r26
    12e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	9e 83       	std	Y+6, r25	; 0x06
    12ec:	8d 83       	std	Y+5, r24	; 0x05
    12ee:	0f c0       	rjmp	.+30     	; 0x130e <CLCD_voidScrollTextLeftToRight+0x16c>
    12f0:	88 ec       	ldi	r24, 0xC8	; 200
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	9c 83       	std	Y+4, r25	; 0x04
    12f6:	8b 83       	std	Y+3, r24	; 0x03
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	9c 81       	ldd	r25, Y+4	; 0x04
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <CLCD_voidScrollTextLeftToRight+0x15a>
    1300:	9c 83       	std	Y+4, r25	; 0x04
    1302:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1304:	8d 81       	ldd	r24, Y+5	; 0x05
    1306:	9e 81       	ldd	r25, Y+6	; 0x06
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	9e 83       	std	Y+6, r25	; 0x06
    130c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    130e:	8d 81       	ldd	r24, Y+5	; 0x05
    1310:	9e 81       	ldd	r25, Y+6	; 0x06
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	69 f7       	brne	.-38     	; 0x12f0 <CLCD_voidScrollTextLeftToRight+0x14e>
    1316:	14 c0       	rjmp	.+40     	; 0x1340 <CLCD_voidScrollTextLeftToRight+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1318:	6f 81       	ldd	r22, Y+7	; 0x07
    131a:	78 85       	ldd	r23, Y+8	; 0x08
    131c:	89 85       	ldd	r24, Y+9	; 0x09
    131e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1320:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	9e 83       	std	Y+6, r25	; 0x06
    132a:	8d 83       	std	Y+5, r24	; 0x05
    132c:	8d 81       	ldd	r24, Y+5	; 0x05
    132e:	9e 81       	ldd	r25, Y+6	; 0x06
    1330:	9a 83       	std	Y+2, r25	; 0x02
    1332:	89 83       	std	Y+1, r24	; 0x01
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	9a 81       	ldd	r25, Y+2	; 0x02
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	f1 f7       	brne	.-4      	; 0x1338 <CLCD_voidScrollTextLeftToRight+0x196>
    133c:	9a 83       	std	Y+2, r25	; 0x02
    133e:	89 83       	std	Y+1, r24	; 0x01
	while(Copy_u8Text[STR_u8Lenght] != '\0')
	{
		STR_u8Lenght++;
	}

	for(s8 position = -STR_u8Lenght ; position<=16 ; position++)
    1340:	88 89       	ldd	r24, Y+16	; 0x10
    1342:	8f 5f       	subi	r24, 0xFF	; 255
    1344:	88 8b       	std	Y+16, r24	; 0x10
    1346:	88 89       	ldd	r24, Y+16	; 0x10
    1348:	81 31       	cpi	r24, 0x11	; 17
    134a:	0c f4       	brge	.+2      	; 0x134e <CLCD_voidScrollTextLeftToRight+0x1ac>
    134c:	4a cf       	rjmp	.-364    	; 0x11e2 <CLCD_voidScrollTextLeftToRight+0x40>
				CLCD_voidSendData(Copy_u8Text[i]);
			}
		}
		_delay_ms(300);
	}
}
    134e:	63 96       	adiw	r28, 0x13	; 19
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <CLCD_voidScrollTextRightToLeft>:


void CLCD_voidScrollTextRightToLeft(char *Copy_u8Text)
{
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    1368:	63 97       	sbiw	r28, 0x13	; 19
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	cd bf       	out	0x3d, r28	; 61
    1374:	9b 8b       	std	Y+19, r25	; 0x13
    1376:	8a 8b       	std	Y+18, r24	; 0x12
    u8 STR_u8Length = 0;
    1378:	19 8a       	std	Y+17, r1	; 0x11
    137a:	03 c0       	rjmp	.+6      	; 0x1382 <CLCD_voidScrollTextRightToLeft+0x22>

    while(Copy_u8Text[STR_u8Length] != '\0')
    {
        STR_u8Length++;
    137c:	89 89       	ldd	r24, Y+17	; 0x11
    137e:	8f 5f       	subi	r24, 0xFF	; 255
    1380:	89 8b       	std	Y+17, r24	; 0x11

void CLCD_voidScrollTextRightToLeft(char *Copy_u8Text)
{
    u8 STR_u8Length = 0;

    while(Copy_u8Text[STR_u8Length] != '\0')
    1382:	89 89       	ldd	r24, Y+17	; 0x11
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	8a 89       	ldd	r24, Y+18	; 0x12
    138a:	9b 89       	ldd	r25, Y+19	; 0x13
    138c:	fc 01       	movw	r30, r24
    138e:	e2 0f       	add	r30, r18
    1390:	f3 1f       	adc	r31, r19
    1392:	80 81       	ld	r24, Z
    1394:	88 23       	and	r24, r24
    1396:	91 f7       	brne	.-28     	; 0x137c <CLCD_voidScrollTextRightToLeft+0x1c>
    {
        STR_u8Length++;
    }

    for(s8 position = 16; position >= -STR_u8Length; position--)
    1398:	80 e1       	ldi	r24, 0x10	; 16
    139a:	88 8b       	std	Y+16, r24	; 0x10
    139c:	af c0       	rjmp	.+350    	; 0x14fc <CLCD_voidScrollTextRightToLeft+0x19c>
    {
        CLCD_voidSendCommand(0x01);  //Clear display
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	0e 94 e6 06 	call	0xdcc	; 0xdcc <CLCD_voidSendCommand>

        if(position >= 0)
    13a4:	88 89       	ldd	r24, Y+16	; 0x10
    13a6:	88 23       	and	r24, r24
    13a8:	2c f0       	brlt	.+10     	; 0x13b4 <CLCD_voidScrollTextRightToLeft+0x54>
        {
            CLCD_voidSetXYPosition(position, 0);
    13aa:	88 89       	ldd	r24, Y+16	; 0x10
    13ac:	60 e0       	ldi	r22, 0x00	; 0
    13ae:	0e 94 b1 08 	call	0x1162	; 0x1162 <CLCD_voidSetXYPosition>
    13b2:	04 c0       	rjmp	.+8      	; 0x13bc <CLCD_voidScrollTextRightToLeft+0x5c>
        }
        else
        {
            CLCD_voidSetXYPosition(0, 0);
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	60 e0       	ldi	r22, 0x00	; 0
    13b8:	0e 94 b1 08 	call	0x1162	; 0x1162 <CLCD_voidSetXYPosition>
        }

        for (u8 i = 0; i < STR_u8Length; i++)
    13bc:	1f 86       	std	Y+15, r1	; 0x0f
    13be:	25 c0       	rjmp	.+74     	; 0x140a <CLCD_voidScrollTextRightToLeft+0xaa>
        {
            if (i + position >= 0 && i + position < 16)
    13c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	88 89       	ldd	r24, Y+16	; 0x10
    13c8:	99 27       	eor	r25, r25
    13ca:	87 fd       	sbrc	r24, 7
    13cc:	90 95       	com	r25
    13ce:	82 0f       	add	r24, r18
    13d0:	93 1f       	adc	r25, r19
    13d2:	99 23       	and	r25, r25
    13d4:	bc f0       	brlt	.+46     	; 0x1404 <CLCD_voidScrollTextRightToLeft+0xa4>
    13d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	88 89       	ldd	r24, Y+16	; 0x10
    13de:	99 27       	eor	r25, r25
    13e0:	87 fd       	sbrc	r24, 7
    13e2:	90 95       	com	r25
    13e4:	82 0f       	add	r24, r18
    13e6:	93 1f       	adc	r25, r19
    13e8:	80 31       	cpi	r24, 0x10	; 16
    13ea:	91 05       	cpc	r25, r1
    13ec:	5c f4       	brge	.+22     	; 0x1404 <CLCD_voidScrollTextRightToLeft+0xa4>
            {
                CLCD_voidSendData(Copy_u8Text[i]);
    13ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	8a 89       	ldd	r24, Y+18	; 0x12
    13f6:	9b 89       	ldd	r25, Y+19	; 0x13
    13f8:	fc 01       	movw	r30, r24
    13fa:	e2 0f       	add	r30, r18
    13fc:	f3 1f       	adc	r31, r19
    13fe:	80 81       	ld	r24, Z
    1400:	0e 94 48 06 	call	0xc90	; 0xc90 <CLCD_voidSendData>
        else
        {
            CLCD_voidSetXYPosition(0, 0);
        }

        for (u8 i = 0; i < STR_u8Length; i++)
    1404:	8f 85       	ldd	r24, Y+15	; 0x0f
    1406:	8f 5f       	subi	r24, 0xFF	; 255
    1408:	8f 87       	std	Y+15, r24	; 0x0f
    140a:	9f 85       	ldd	r25, Y+15	; 0x0f
    140c:	89 89       	ldd	r24, Y+17	; 0x11
    140e:	98 17       	cp	r25, r24
    1410:	b8 f2       	brcs	.-82     	; 0x13c0 <CLCD_voidScrollTextRightToLeft+0x60>
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	a6 e9       	ldi	r26, 0x96	; 150
    1418:	b3 e4       	ldi	r27, 0x43	; 67
    141a:	8b 87       	std	Y+11, r24	; 0x0b
    141c:	9c 87       	std	Y+12, r25	; 0x0c
    141e:	ad 87       	std	Y+13, r26	; 0x0d
    1420:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1422:	6b 85       	ldd	r22, Y+11	; 0x0b
    1424:	7c 85       	ldd	r23, Y+12	; 0x0c
    1426:	8d 85       	ldd	r24, Y+13	; 0x0d
    1428:	9e 85       	ldd	r25, Y+14	; 0x0e
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	4a ef       	ldi	r20, 0xFA	; 250
    1430:	54 e4       	ldi	r21, 0x44	; 68
    1432:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	8f 83       	std	Y+7, r24	; 0x07
    143c:	98 87       	std	Y+8, r25	; 0x08
    143e:	a9 87       	std	Y+9, r26	; 0x09
    1440:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1442:	6f 81       	ldd	r22, Y+7	; 0x07
    1444:	78 85       	ldd	r23, Y+8	; 0x08
    1446:	89 85       	ldd	r24, Y+9	; 0x09
    1448:	9a 85       	ldd	r25, Y+10	; 0x0a
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e8       	ldi	r20, 0x80	; 128
    1450:	5f e3       	ldi	r21, 0x3F	; 63
    1452:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1456:	88 23       	and	r24, r24
    1458:	2c f4       	brge	.+10     	; 0x1464 <CLCD_voidScrollTextRightToLeft+0x104>
		__ticks = 1;
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	9e 83       	std	Y+6, r25	; 0x06
    1460:	8d 83       	std	Y+5, r24	; 0x05
    1462:	3f c0       	rjmp	.+126    	; 0x14e2 <CLCD_voidScrollTextRightToLeft+0x182>
	else if (__tmp > 65535)
    1464:	6f 81       	ldd	r22, Y+7	; 0x07
    1466:	78 85       	ldd	r23, Y+8	; 0x08
    1468:	89 85       	ldd	r24, Y+9	; 0x09
    146a:	9a 85       	ldd	r25, Y+10	; 0x0a
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	3f ef       	ldi	r19, 0xFF	; 255
    1470:	4f e7       	ldi	r20, 0x7F	; 127
    1472:	57 e4       	ldi	r21, 0x47	; 71
    1474:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1478:	18 16       	cp	r1, r24
    147a:	4c f5       	brge	.+82     	; 0x14ce <CLCD_voidScrollTextRightToLeft+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147c:	6b 85       	ldd	r22, Y+11	; 0x0b
    147e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1480:	8d 85       	ldd	r24, Y+13	; 0x0d
    1482:	9e 85       	ldd	r25, Y+14	; 0x0e
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	40 e2       	ldi	r20, 0x20	; 32
    148a:	51 e4       	ldi	r21, 0x41	; 65
    148c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	bc 01       	movw	r22, r24
    1496:	cd 01       	movw	r24, r26
    1498:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	9e 83       	std	Y+6, r25	; 0x06
    14a2:	8d 83       	std	Y+5, r24	; 0x05
    14a4:	0f c0       	rjmp	.+30     	; 0x14c4 <CLCD_voidScrollTextRightToLeft+0x164>
    14a6:	88 ec       	ldi	r24, 0xC8	; 200
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	9c 83       	std	Y+4, r25	; 0x04
    14ac:	8b 83       	std	Y+3, r24	; 0x03
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	9c 81       	ldd	r25, Y+4	; 0x04
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	f1 f7       	brne	.-4      	; 0x14b2 <CLCD_voidScrollTextRightToLeft+0x152>
    14b6:	9c 83       	std	Y+4, r25	; 0x04
    14b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ba:	8d 81       	ldd	r24, Y+5	; 0x05
    14bc:	9e 81       	ldd	r25, Y+6	; 0x06
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	9e 83       	std	Y+6, r25	; 0x06
    14c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c4:	8d 81       	ldd	r24, Y+5	; 0x05
    14c6:	9e 81       	ldd	r25, Y+6	; 0x06
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	69 f7       	brne	.-38     	; 0x14a6 <CLCD_voidScrollTextRightToLeft+0x146>
    14cc:	14 c0       	rjmp	.+40     	; 0x14f6 <CLCD_voidScrollTextRightToLeft+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ce:	6f 81       	ldd	r22, Y+7	; 0x07
    14d0:	78 85       	ldd	r23, Y+8	; 0x08
    14d2:	89 85       	ldd	r24, Y+9	; 0x09
    14d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	9e 83       	std	Y+6, r25	; 0x06
    14e0:	8d 83       	std	Y+5, r24	; 0x05
    14e2:	8d 81       	ldd	r24, Y+5	; 0x05
    14e4:	9e 81       	ldd	r25, Y+6	; 0x06
    14e6:	9a 83       	std	Y+2, r25	; 0x02
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	9a 81       	ldd	r25, Y+2	; 0x02
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	f1 f7       	brne	.-4      	; 0x14ee <CLCD_voidScrollTextRightToLeft+0x18e>
    14f2:	9a 83       	std	Y+2, r25	; 0x02
    14f4:	89 83       	std	Y+1, r24	; 0x01
    while(Copy_u8Text[STR_u8Length] != '\0')
    {
        STR_u8Length++;
    }

    for(s8 position = 16; position >= -STR_u8Length; position--)
    14f6:	88 89       	ldd	r24, Y+16	; 0x10
    14f8:	81 50       	subi	r24, 0x01	; 1
    14fa:	88 8b       	std	Y+16, r24	; 0x10
    14fc:	88 89       	ldd	r24, Y+16	; 0x10
    14fe:	28 2f       	mov	r18, r24
    1500:	33 27       	eor	r19, r19
    1502:	27 fd       	sbrc	r18, 7
    1504:	30 95       	com	r19
    1506:	89 89       	ldd	r24, Y+17	; 0x11
    1508:	88 2f       	mov	r24, r24
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	90 95       	com	r25
    150e:	81 95       	neg	r24
    1510:	9f 4f       	sbci	r25, 0xFF	; 255
    1512:	28 17       	cp	r18, r24
    1514:	39 07       	cpc	r19, r25
    1516:	0c f0       	brlt	.+2      	; 0x151a <CLCD_voidScrollTextRightToLeft+0x1ba>
    1518:	42 cf       	rjmp	.-380    	; 0x139e <CLCD_voidScrollTextRightToLeft+0x3e>
            }
        }

        _delay_ms(300);
    }
}
    151a:	63 96       	adiw	r28, 0x13	; 19
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	f8 94       	cli
    1520:	de bf       	out	0x3e, r29	; 62
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	cd bf       	out	0x3d, r28	; 61
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <CLCD_voidScrollTextSinsoidalwave>:


void CLCD_voidScrollTextSinsoidalwave(char *Copy_u8Text)
{
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    1534:	65 97       	sbiw	r28, 0x15	; 21
    1536:	0f b6       	in	r0, 0x3f	; 63
    1538:	f8 94       	cli
    153a:	de bf       	out	0x3e, r29	; 62
    153c:	0f be       	out	0x3f, r0	; 63
    153e:	cd bf       	out	0x3d, r28	; 61
    1540:	9b 8b       	std	Y+19, r25	; 0x13
    1542:	8a 8b       	std	Y+18, r24	; 0x12
	u8 STR_u8Lenght=0;
    1544:	19 8a       	std	Y+17, r1	; 0x11
    1546:	03 c0       	rjmp	.+6      	; 0x154e <CLCD_voidScrollTextSinsoidalwave+0x22>
	while(Copy_u8Text[STR_u8Lenght] != '\0')
	{
		STR_u8Lenght++;
    1548:	89 89       	ldd	r24, Y+17	; 0x11
    154a:	8f 5f       	subi	r24, 0xFF	; 255
    154c:	89 8b       	std	Y+17, r24	; 0x11


void CLCD_voidScrollTextSinsoidalwave(char *Copy_u8Text)
{
	u8 STR_u8Lenght=0;
	while(Copy_u8Text[STR_u8Lenght] != '\0')
    154e:	89 89       	ldd	r24, Y+17	; 0x11
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	8a 89       	ldd	r24, Y+18	; 0x12
    1556:	9b 89       	ldd	r25, Y+19	; 0x13
    1558:	fc 01       	movw	r30, r24
    155a:	e2 0f       	add	r30, r18
    155c:	f3 1f       	adc	r31, r19
    155e:	80 81       	ld	r24, Z
    1560:	88 23       	and	r24, r24
    1562:	91 f7       	brne	.-28     	; 0x1548 <CLCD_voidScrollTextSinsoidalwave+0x1c>
	{
		STR_u8Lenght++;
	}

	for(s8 position = -STR_u8Lenght ; position<=16 ; position++)
    1564:	89 89       	ldd	r24, Y+17	; 0x11
    1566:	81 95       	neg	r24
    1568:	88 8b       	std	Y+16, r24	; 0x10
    156a:	c6 c0       	rjmp	.+396    	; 0x16f8 <CLCD_voidScrollTextSinsoidalwave+0x1cc>
	{
		CLCD_voidSendCommand(0x01);    //Clear Display
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	0e 94 e6 06 	call	0xdcc	; 0xdcc <CLCD_voidSendCommand>
		if(position >= 0) CLCD_voidSetXYPosition(position , (position%2));
    1572:	88 89       	ldd	r24, Y+16	; 0x10
    1574:	88 23       	and	r24, r24
    1576:	cc f0       	brlt	.+50     	; 0x15aa <CLCD_voidScrollTextSinsoidalwave+0x7e>
    1578:	88 89       	ldd	r24, Y+16	; 0x10
    157a:	8c 8b       	std	Y+20, r24	; 0x14
    157c:	88 89       	ldd	r24, Y+16	; 0x10
    157e:	98 2f       	mov	r25, r24
    1580:	91 78       	andi	r25, 0x81	; 129
    1582:	9d 8b       	std	Y+21, r25	; 0x15
    1584:	8d 89       	ldd	r24, Y+21	; 0x15
    1586:	88 23       	and	r24, r24
    1588:	4c f4       	brge	.+18     	; 0x159c <CLCD_voidScrollTextSinsoidalwave+0x70>
    158a:	9d 89       	ldd	r25, Y+21	; 0x15
    158c:	91 50       	subi	r25, 0x01	; 1
    158e:	9d 8b       	std	Y+21, r25	; 0x15
    1590:	8d 89       	ldd	r24, Y+21	; 0x15
    1592:	8e 6f       	ori	r24, 0xFE	; 254
    1594:	8d 8b       	std	Y+21, r24	; 0x15
    1596:	9d 89       	ldd	r25, Y+21	; 0x15
    1598:	9f 5f       	subi	r25, 0xFF	; 255
    159a:	9d 8b       	std	Y+21, r25	; 0x15
    159c:	8d 89       	ldd	r24, Y+21	; 0x15
    159e:	98 2f       	mov	r25, r24
    15a0:	8c 89       	ldd	r24, Y+20	; 0x14
    15a2:	69 2f       	mov	r22, r25
    15a4:	0e 94 b1 08 	call	0x1162	; 0x1162 <CLCD_voidSetXYPosition>
    15a8:	07 c0       	rjmp	.+14     	; 0x15b8 <CLCD_voidScrollTextSinsoidalwave+0x8c>
		else if(position < 0) CLCD_voidSetXYPosition(0 , 0);
    15aa:	88 89       	ldd	r24, Y+16	; 0x10
    15ac:	88 23       	and	r24, r24
    15ae:	24 f4       	brge	.+8      	; 0x15b8 <CLCD_voidScrollTextSinsoidalwave+0x8c>
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	60 e0       	ldi	r22, 0x00	; 0
    15b4:	0e 94 b1 08 	call	0x1162	; 0x1162 <CLCD_voidSetXYPosition>

		for(u8 i=0 ; i<STR_u8Lenght ; i++)
    15b8:	1f 86       	std	Y+15, r1	; 0x0f
    15ba:	25 c0       	rjmp	.+74     	; 0x1606 <CLCD_voidScrollTextSinsoidalwave+0xda>
		{
			if(i + position >= 0 && i + position < 16 )
    15bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	88 89       	ldd	r24, Y+16	; 0x10
    15c4:	99 27       	eor	r25, r25
    15c6:	87 fd       	sbrc	r24, 7
    15c8:	90 95       	com	r25
    15ca:	82 0f       	add	r24, r18
    15cc:	93 1f       	adc	r25, r19
    15ce:	99 23       	and	r25, r25
    15d0:	bc f0       	brlt	.+46     	; 0x1600 <CLCD_voidScrollTextSinsoidalwave+0xd4>
    15d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	88 89       	ldd	r24, Y+16	; 0x10
    15da:	99 27       	eor	r25, r25
    15dc:	87 fd       	sbrc	r24, 7
    15de:	90 95       	com	r25
    15e0:	82 0f       	add	r24, r18
    15e2:	93 1f       	adc	r25, r19
    15e4:	80 31       	cpi	r24, 0x10	; 16
    15e6:	91 05       	cpc	r25, r1
    15e8:	5c f4       	brge	.+22     	; 0x1600 <CLCD_voidScrollTextSinsoidalwave+0xd4>
			{
				CLCD_voidSendData(Copy_u8Text[i]);
    15ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	8a 89       	ldd	r24, Y+18	; 0x12
    15f2:	9b 89       	ldd	r25, Y+19	; 0x13
    15f4:	fc 01       	movw	r30, r24
    15f6:	e2 0f       	add	r30, r18
    15f8:	f3 1f       	adc	r31, r19
    15fa:	80 81       	ld	r24, Z
    15fc:	0e 94 48 06 	call	0xc90	; 0xc90 <CLCD_voidSendData>
	{
		CLCD_voidSendCommand(0x01);    //Clear Display
		if(position >= 0) CLCD_voidSetXYPosition(position , (position%2));
		else if(position < 0) CLCD_voidSetXYPosition(0 , 0);

		for(u8 i=0 ; i<STR_u8Lenght ; i++)
    1600:	8f 85       	ldd	r24, Y+15	; 0x0f
    1602:	8f 5f       	subi	r24, 0xFF	; 255
    1604:	8f 87       	std	Y+15, r24	; 0x0f
    1606:	9f 85       	ldd	r25, Y+15	; 0x0f
    1608:	89 89       	ldd	r24, Y+17	; 0x11
    160a:	98 17       	cp	r25, r24
    160c:	b8 f2       	brcs	.-82     	; 0x15bc <CLCD_voidScrollTextSinsoidalwave+0x90>
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	a6 e9       	ldi	r26, 0x96	; 150
    1614:	b3 e4       	ldi	r27, 0x43	; 67
    1616:	8b 87       	std	Y+11, r24	; 0x0b
    1618:	9c 87       	std	Y+12, r25	; 0x0c
    161a:	ad 87       	std	Y+13, r26	; 0x0d
    161c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    161e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1620:	7c 85       	ldd	r23, Y+12	; 0x0c
    1622:	8d 85       	ldd	r24, Y+13	; 0x0d
    1624:	9e 85       	ldd	r25, Y+14	; 0x0e
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	4a ef       	ldi	r20, 0xFA	; 250
    162c:	54 e4       	ldi	r21, 0x44	; 68
    162e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	8f 83       	std	Y+7, r24	; 0x07
    1638:	98 87       	std	Y+8, r25	; 0x08
    163a:	a9 87       	std	Y+9, r26	; 0x09
    163c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    163e:	6f 81       	ldd	r22, Y+7	; 0x07
    1640:	78 85       	ldd	r23, Y+8	; 0x08
    1642:	89 85       	ldd	r24, Y+9	; 0x09
    1644:	9a 85       	ldd	r25, Y+10	; 0x0a
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	40 e8       	ldi	r20, 0x80	; 128
    164c:	5f e3       	ldi	r21, 0x3F	; 63
    164e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1652:	88 23       	and	r24, r24
    1654:	2c f4       	brge	.+10     	; 0x1660 <CLCD_voidScrollTextSinsoidalwave+0x134>
		__ticks = 1;
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	9e 83       	std	Y+6, r25	; 0x06
    165c:	8d 83       	std	Y+5, r24	; 0x05
    165e:	3f c0       	rjmp	.+126    	; 0x16de <CLCD_voidScrollTextSinsoidalwave+0x1b2>
	else if (__tmp > 65535)
    1660:	6f 81       	ldd	r22, Y+7	; 0x07
    1662:	78 85       	ldd	r23, Y+8	; 0x08
    1664:	89 85       	ldd	r24, Y+9	; 0x09
    1666:	9a 85       	ldd	r25, Y+10	; 0x0a
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	3f ef       	ldi	r19, 0xFF	; 255
    166c:	4f e7       	ldi	r20, 0x7F	; 127
    166e:	57 e4       	ldi	r21, 0x47	; 71
    1670:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1674:	18 16       	cp	r1, r24
    1676:	4c f5       	brge	.+82     	; 0x16ca <CLCD_voidScrollTextSinsoidalwave+0x19e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1678:	6b 85       	ldd	r22, Y+11	; 0x0b
    167a:	7c 85       	ldd	r23, Y+12	; 0x0c
    167c:	8d 85       	ldd	r24, Y+13	; 0x0d
    167e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	40 e2       	ldi	r20, 0x20	; 32
    1686:	51 e4       	ldi	r21, 0x41	; 65
    1688:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	bc 01       	movw	r22, r24
    1692:	cd 01       	movw	r24, r26
    1694:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	9e 83       	std	Y+6, r25	; 0x06
    169e:	8d 83       	std	Y+5, r24	; 0x05
    16a0:	0f c0       	rjmp	.+30     	; 0x16c0 <CLCD_voidScrollTextSinsoidalwave+0x194>
    16a2:	88 ec       	ldi	r24, 0xC8	; 200
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	9c 83       	std	Y+4, r25	; 0x04
    16a8:	8b 83       	std	Y+3, r24	; 0x03
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	9c 81       	ldd	r25, Y+4	; 0x04
    16ae:	01 97       	sbiw	r24, 0x01	; 1
    16b0:	f1 f7       	brne	.-4      	; 0x16ae <CLCD_voidScrollTextSinsoidalwave+0x182>
    16b2:	9c 83       	std	Y+4, r25	; 0x04
    16b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b6:	8d 81       	ldd	r24, Y+5	; 0x05
    16b8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ba:	01 97       	sbiw	r24, 0x01	; 1
    16bc:	9e 83       	std	Y+6, r25	; 0x06
    16be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c0:	8d 81       	ldd	r24, Y+5	; 0x05
    16c2:	9e 81       	ldd	r25, Y+6	; 0x06
    16c4:	00 97       	sbiw	r24, 0x00	; 0
    16c6:	69 f7       	brne	.-38     	; 0x16a2 <CLCD_voidScrollTextSinsoidalwave+0x176>
    16c8:	14 c0       	rjmp	.+40     	; 0x16f2 <CLCD_voidScrollTextSinsoidalwave+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ca:	6f 81       	ldd	r22, Y+7	; 0x07
    16cc:	78 85       	ldd	r23, Y+8	; 0x08
    16ce:	89 85       	ldd	r24, Y+9	; 0x09
    16d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	9e 83       	std	Y+6, r25	; 0x06
    16dc:	8d 83       	std	Y+5, r24	; 0x05
    16de:	8d 81       	ldd	r24, Y+5	; 0x05
    16e0:	9e 81       	ldd	r25, Y+6	; 0x06
    16e2:	9a 83       	std	Y+2, r25	; 0x02
    16e4:	89 83       	std	Y+1, r24	; 0x01
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ea:	01 97       	sbiw	r24, 0x01	; 1
    16ec:	f1 f7       	brne	.-4      	; 0x16ea <CLCD_voidScrollTextSinsoidalwave+0x1be>
    16ee:	9a 83       	std	Y+2, r25	; 0x02
    16f0:	89 83       	std	Y+1, r24	; 0x01
	while(Copy_u8Text[STR_u8Lenght] != '\0')
	{
		STR_u8Lenght++;
	}

	for(s8 position = -STR_u8Lenght ; position<=16 ; position++)
    16f2:	88 89       	ldd	r24, Y+16	; 0x10
    16f4:	8f 5f       	subi	r24, 0xFF	; 255
    16f6:	88 8b       	std	Y+16, r24	; 0x10
    16f8:	88 89       	ldd	r24, Y+16	; 0x10
    16fa:	81 31       	cpi	r24, 0x11	; 17
    16fc:	0c f4       	brge	.+2      	; 0x1700 <CLCD_voidScrollTextSinsoidalwave+0x1d4>
    16fe:	36 cf       	rjmp	.-404    	; 0x156c <CLCD_voidScrollTextSinsoidalwave+0x40>
				CLCD_voidSendData(Copy_u8Text[i]);
			}
		}
		_delay_ms(300);
	}
}
    1700:	65 96       	adiw	r28, 0x15	; 21
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	f8 94       	cli
    1706:	de bf       	out	0x3e, r29	; 62
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	cd bf       	out	0x3d, r28	; 61
    170c:	cf 91       	pop	r28
    170e:	df 91       	pop	r29
    1710:	08 95       	ret

00001712 <CLCD_voidClearDisplay>:


void CLCD_voidClearDisplay(void)
{
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	2e 97       	sbiw	r28, 0x0e	; 14
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	de bf       	out	0x3e, r29	; 62
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand(0x01);
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	0e 94 e6 06 	call	0xdcc	; 0xdcc <CLCD_voidSendCommand>
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	a0 e0       	ldi	r26, 0x00	; 0
    1732:	b0 e4       	ldi	r27, 0x40	; 64
    1734:	8b 87       	std	Y+11, r24	; 0x0b
    1736:	9c 87       	std	Y+12, r25	; 0x0c
    1738:	ad 87       	std	Y+13, r26	; 0x0d
    173a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    173c:	6b 85       	ldd	r22, Y+11	; 0x0b
    173e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1740:	8d 85       	ldd	r24, Y+13	; 0x0d
    1742:	9e 85       	ldd	r25, Y+14	; 0x0e
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	4a ef       	ldi	r20, 0xFA	; 250
    174a:	54 e4       	ldi	r21, 0x44	; 68
    174c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	8f 83       	std	Y+7, r24	; 0x07
    1756:	98 87       	std	Y+8, r25	; 0x08
    1758:	a9 87       	std	Y+9, r26	; 0x09
    175a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    175c:	6f 81       	ldd	r22, Y+7	; 0x07
    175e:	78 85       	ldd	r23, Y+8	; 0x08
    1760:	89 85       	ldd	r24, Y+9	; 0x09
    1762:	9a 85       	ldd	r25, Y+10	; 0x0a
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	40 e8       	ldi	r20, 0x80	; 128
    176a:	5f e3       	ldi	r21, 0x3F	; 63
    176c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1770:	88 23       	and	r24, r24
    1772:	2c f4       	brge	.+10     	; 0x177e <CLCD_voidClearDisplay+0x6c>
		__ticks = 1;
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	9e 83       	std	Y+6, r25	; 0x06
    177a:	8d 83       	std	Y+5, r24	; 0x05
    177c:	3f c0       	rjmp	.+126    	; 0x17fc <CLCD_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    177e:	6f 81       	ldd	r22, Y+7	; 0x07
    1780:	78 85       	ldd	r23, Y+8	; 0x08
    1782:	89 85       	ldd	r24, Y+9	; 0x09
    1784:	9a 85       	ldd	r25, Y+10	; 0x0a
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	3f ef       	ldi	r19, 0xFF	; 255
    178a:	4f e7       	ldi	r20, 0x7F	; 127
    178c:	57 e4       	ldi	r21, 0x47	; 71
    178e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1792:	18 16       	cp	r1, r24
    1794:	4c f5       	brge	.+82     	; 0x17e8 <CLCD_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1796:	6b 85       	ldd	r22, Y+11	; 0x0b
    1798:	7c 85       	ldd	r23, Y+12	; 0x0c
    179a:	8d 85       	ldd	r24, Y+13	; 0x0d
    179c:	9e 85       	ldd	r25, Y+14	; 0x0e
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	40 e2       	ldi	r20, 0x20	; 32
    17a4:	51 e4       	ldi	r21, 0x41	; 65
    17a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17aa:	dc 01       	movw	r26, r24
    17ac:	cb 01       	movw	r24, r22
    17ae:	bc 01       	movw	r22, r24
    17b0:	cd 01       	movw	r24, r26
    17b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	9e 83       	std	Y+6, r25	; 0x06
    17bc:	8d 83       	std	Y+5, r24	; 0x05
    17be:	0f c0       	rjmp	.+30     	; 0x17de <CLCD_voidClearDisplay+0xcc>
    17c0:	88 ec       	ldi	r24, 0xC8	; 200
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	9c 83       	std	Y+4, r25	; 0x04
    17c6:	8b 83       	std	Y+3, r24	; 0x03
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	9c 81       	ldd	r25, Y+4	; 0x04
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	f1 f7       	brne	.-4      	; 0x17cc <CLCD_voidClearDisplay+0xba>
    17d0:	9c 83       	std	Y+4, r25	; 0x04
    17d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d4:	8d 81       	ldd	r24, Y+5	; 0x05
    17d6:	9e 81       	ldd	r25, Y+6	; 0x06
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	9e 83       	std	Y+6, r25	; 0x06
    17dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17de:	8d 81       	ldd	r24, Y+5	; 0x05
    17e0:	9e 81       	ldd	r25, Y+6	; 0x06
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	69 f7       	brne	.-38     	; 0x17c0 <CLCD_voidClearDisplay+0xae>
    17e6:	14 c0       	rjmp	.+40     	; 0x1810 <CLCD_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e8:	6f 81       	ldd	r22, Y+7	; 0x07
    17ea:	78 85       	ldd	r23, Y+8	; 0x08
    17ec:	89 85       	ldd	r24, Y+9	; 0x09
    17ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	9e 83       	std	Y+6, r25	; 0x06
    17fa:	8d 83       	std	Y+5, r24	; 0x05
    17fc:	8d 81       	ldd	r24, Y+5	; 0x05
    17fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1800:	9a 83       	std	Y+2, r25	; 0x02
    1802:	89 83       	std	Y+1, r24	; 0x01
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	9a 81       	ldd	r25, Y+2	; 0x02
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	f1 f7       	brne	.-4      	; 0x1808 <CLCD_voidClearDisplay+0xf6>
    180c:	9a 83       	std	Y+2, r25	; 0x02
    180e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1810:	2e 96       	adiw	r28, 0x0e	; 14
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	f8 94       	cli
    1816:	de bf       	out	0x3e, r29	; 62
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	cd bf       	out	0x3d, r28	; 61
    181c:	cf 91       	pop	r28
    181e:	df 91       	pop	r29
    1820:	08 95       	ret

00001822 <CLCD_voidShift>:

void CLCD_voidShift(CLCD_SHIFT Copy_enuShiftDirection)
{
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	0f 92       	push	r0
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_enuShiftDirection == CLCD_SHIFT_RIGHT)||(Copy_enuShiftDirection == CLCD_SHIFT_LEFT))
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	8c 31       	cpi	r24, 0x1C	; 28
    1832:	19 f0       	breq	.+6      	; 0x183a <CLCD_voidShift+0x18>
    1834:	89 81       	ldd	r24, Y+1	; 0x01
    1836:	88 31       	cpi	r24, 0x18	; 24
    1838:	19 f4       	brne	.+6      	; 0x1840 <CLCD_voidShift+0x1e>
	{
		CLCD_voidSendCommand(Copy_enuShiftDirection);
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	0e 94 e6 06 	call	0xdcc	; 0xdcc <CLCD_voidSendCommand>
	}
}
    1840:	0f 90       	pop	r0
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <CLCD_voidCreateShape>:


void CLCD_voidCreateShape(u8 Copy_u8Location,u8 *Copy_pu8Shape)
{
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	00 d0       	rcall	.+0      	; 0x184e <CLCD_voidCreateShape+0x6>
    184e:	00 d0       	rcall	.+0      	; 0x1850 <CLCD_voidCreateShape+0x8>
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	8a 83       	std	Y+2, r24	; 0x02
    1856:	7c 83       	std	Y+4, r23	; 0x04
    1858:	6b 83       	std	Y+3, r22	; 0x03
	if((Copy_u8Location <= 7) && (Copy_u8Location >= 0))
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	88 30       	cpi	r24, 0x08	; 8
    185e:	f8 f4       	brcc	.+62     	; 0x189e <CLCD_voidCreateShape+0x56>
	{
		CLCD_voidSendCommand( 0x40 | (Copy_u8Location *8));
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	88 2f       	mov	r24, r24
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	88 0f       	add	r24, r24
    1868:	99 1f       	adc	r25, r25
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	80 64       	ori	r24, 0x40	; 64
    1874:	0e 94 e6 06 	call	0xdcc	; 0xdcc <CLCD_voidSendCommand>
		for(u8 i = 0 ; i<8 ; i++ )
    1878:	19 82       	std	Y+1, r1	; 0x01
    187a:	0e c0       	rjmp	.+28     	; 0x1898 <CLCD_voidCreateShape+0x50>
		{
			CLCD_voidSendData(Copy_pu8Shape[i]);
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	9c 81       	ldd	r25, Y+4	; 0x04
    1886:	fc 01       	movw	r30, r24
    1888:	e2 0f       	add	r30, r18
    188a:	f3 1f       	adc	r31, r19
    188c:	80 81       	ld	r24, Z
    188e:	0e 94 48 06 	call	0xc90	; 0xc90 <CLCD_voidSendData>
void CLCD_voidCreateShape(u8 Copy_u8Location,u8 *Copy_pu8Shape)
{
	if((Copy_u8Location <= 7) && (Copy_u8Location >= 0))
	{
		CLCD_voidSendCommand( 0x40 | (Copy_u8Location *8));
		for(u8 i = 0 ; i<8 ; i++ )
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	8f 5f       	subi	r24, 0xFF	; 255
    1896:	89 83       	std	Y+1, r24	; 0x01
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	88 30       	cpi	r24, 0x08	; 8
    189c:	78 f3       	brcs	.-34     	; 0x187c <CLCD_voidCreateShape+0x34>
		{
			CLCD_voidSendData(Copy_pu8Shape[i]);
		}
	}
}
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	08 95       	ret

000018ac <CLCD_voidDrawShape>:


void CLCD_voidDrawShape(u8 Copy_u8Location)
{
    18ac:	df 93       	push	r29
    18ae:	cf 93       	push	r28
    18b0:	0f 92       	push	r0
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendData(Copy_u8Location);
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	0e 94 48 06 	call	0xc90	; 0xc90 <CLCD_voidSendData>
}
    18be:	0f 90       	pop	r0
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <CLCD_voidSendFloat>:

void CLCD_voidSendFloat(f64 Copy_s32float)
{
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	6c 97       	sbiw	r28, 0x1c	; 28
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	de bf       	out	0x3e, r29	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	cd bf       	out	0x3d, r28	; 61
    18da:	69 8f       	std	Y+25, r22	; 0x19
    18dc:	7a 8f       	std	Y+26, r23	; 0x1a
    18de:	8b 8f       	std	Y+27, r24	; 0x1b
    18e0:	9c 8f       	std	Y+28, r25	; 0x1c
	int integer_part = (int)Copy_s32float;          // Extract the integer part
    18e2:	69 8d       	ldd	r22, Y+25	; 0x19
    18e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ea:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	9c 83       	std	Y+4, r25	; 0x04
    18f4:	8b 83       	std	Y+3, r24	; 0x03
	int decimal_part = (int)((Copy_s32float - integer_part) * 100);  // Extract the decimal part (2 decimal places)
    18f6:	8b 81       	ldd	r24, Y+3	; 0x03
    18f8:	9c 81       	ldd	r25, Y+4	; 0x04
    18fa:	aa 27       	eor	r26, r26
    18fc:	97 fd       	sbrc	r25, 7
    18fe:	a0 95       	com	r26
    1900:	ba 2f       	mov	r27, r26
    1902:	bc 01       	movw	r22, r24
    1904:	cd 01       	movw	r24, r26
    1906:	0e 94 a1 03 	call	0x742	; 0x742 <__floatsisf>
    190a:	9b 01       	movw	r18, r22
    190c:	ac 01       	movw	r20, r24
    190e:	69 8d       	ldd	r22, Y+25	; 0x19
    1910:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1912:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1914:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1916:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	bc 01       	movw	r22, r24
    1920:	cd 01       	movw	r24, r26
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	48 ec       	ldi	r20, 0xC8	; 200
    1928:	52 e4       	ldi	r21, 0x42	; 66
    192a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	bc 01       	movw	r22, r24
    1934:	cd 01       	movw	r24, r26
    1936:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	9a 83       	std	Y+2, r25	; 0x02
    1940:	89 83       	std	Y+1, r24	; 0x01

	char buffer[20];  // Buffer to hold the converted string

	// Format and print the integer and decimal parts separately
	sprintf(buffer, "%d.%02d", integer_part, decimal_part);
    1942:	8d b7       	in	r24, 0x3d	; 61
    1944:	9e b7       	in	r25, 0x3e	; 62
    1946:	08 97       	sbiw	r24, 0x08	; 8
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	9e bf       	out	0x3e, r25	; 62
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	8d bf       	out	0x3d, r24	; 61
    1952:	ed b7       	in	r30, 0x3d	; 61
    1954:	fe b7       	in	r31, 0x3e	; 62
    1956:	31 96       	adiw	r30, 0x01	; 1
    1958:	ce 01       	movw	r24, r28
    195a:	05 96       	adiw	r24, 0x05	; 5
    195c:	91 83       	std	Z+1, r25	; 0x01
    195e:	80 83       	st	Z, r24
    1960:	80 e6       	ldi	r24, 0x60	; 96
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	93 83       	std	Z+3, r25	; 0x03
    1966:	82 83       	std	Z+2, r24	; 0x02
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	9c 81       	ldd	r25, Y+4	; 0x04
    196c:	95 83       	std	Z+5, r25	; 0x05
    196e:	84 83       	std	Z+4, r24	; 0x04
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	9a 81       	ldd	r25, Y+2	; 0x02
    1974:	97 83       	std	Z+7, r25	; 0x07
    1976:	86 83       	std	Z+6, r24	; 0x06
    1978:	0e 94 8d 10 	call	0x211a	; 0x211a <sprintf>
    197c:	8d b7       	in	r24, 0x3d	; 61
    197e:	9e b7       	in	r25, 0x3e	; 62
    1980:	08 96       	adiw	r24, 0x08	; 8
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	9e bf       	out	0x3e, r25	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	8d bf       	out	0x3d, r24	; 61

	CLCD_voidSendString(buffer);
    198c:	ce 01       	movw	r24, r28
    198e:	05 96       	adiw	r24, 0x05	; 5
    1990:	0e 94 12 08 	call	0x1024	; 0x1024 <CLCD_voidSendString>
}
    1994:	6c 96       	adiw	r28, 0x1c	; 28
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	cd bf       	out	0x3d, r28	; 61
    19a0:	cf 91       	pop	r28
    19a2:	df 91       	pop	r29
    19a4:	08 95       	ret

000019a6 <DIO_voidSetPinDirection>:

#include "DIO_interface.h"
#include "DIO_register.h"

void DIO_voidSetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	27 97       	sbiw	r28, 0x07	; 7
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	de bf       	out	0x3e, r29	; 62
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	cd bf       	out	0x3d, r28	; 61
    19ba:	89 83       	std	Y+1, r24	; 0x01
    19bc:	6a 83       	std	Y+2, r22	; 0x02
    19be:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Direction == DIO_u8INPUT)
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	88 23       	and	r24, r24
    19c4:	09 f0       	breq	.+2      	; 0x19c8 <DIO_voidSetPinDirection+0x22>
    19c6:	74 c0       	rjmp	.+232    	; 0x1ab0 <DIO_voidSetPinDirection+0x10a>
	{
		switch(Copy_u8Port)
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	3f 83       	std	Y+7, r19	; 0x07
    19d0:	2e 83       	std	Y+6, r18	; 0x06
    19d2:	8e 81       	ldd	r24, Y+6	; 0x06
    19d4:	9f 81       	ldd	r25, Y+7	; 0x07
    19d6:	81 30       	cpi	r24, 0x01	; 1
    19d8:	91 05       	cpc	r25, r1
    19da:	59 f1       	breq	.+86     	; 0x1a32 <DIO_voidSetPinDirection+0x8c>
    19dc:	2e 81       	ldd	r18, Y+6	; 0x06
    19de:	3f 81       	ldd	r19, Y+7	; 0x07
    19e0:	22 30       	cpi	r18, 0x02	; 2
    19e2:	31 05       	cpc	r19, r1
    19e4:	2c f4       	brge	.+10     	; 0x19f0 <DIO_voidSetPinDirection+0x4a>
    19e6:	8e 81       	ldd	r24, Y+6	; 0x06
    19e8:	9f 81       	ldd	r25, Y+7	; 0x07
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	69 f0       	breq	.+26     	; 0x1a08 <DIO_voidSetPinDirection+0x62>
    19ee:	d2 c0       	rjmp	.+420    	; 0x1b94 <DIO_voidSetPinDirection+0x1ee>
    19f0:	2e 81       	ldd	r18, Y+6	; 0x06
    19f2:	3f 81       	ldd	r19, Y+7	; 0x07
    19f4:	22 30       	cpi	r18, 0x02	; 2
    19f6:	31 05       	cpc	r19, r1
    19f8:	89 f1       	breq	.+98     	; 0x1a5c <DIO_voidSetPinDirection+0xb6>
    19fa:	8e 81       	ldd	r24, Y+6	; 0x06
    19fc:	9f 81       	ldd	r25, Y+7	; 0x07
    19fe:	83 30       	cpi	r24, 0x03	; 3
    1a00:	91 05       	cpc	r25, r1
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <DIO_voidSetPinDirection+0x60>
    1a04:	40 c0       	rjmp	.+128    	; 0x1a86 <DIO_voidSetPinDirection+0xe0>
    1a06:	c6 c0       	rjmp	.+396    	; 0x1b94 <DIO_voidSetPinDirection+0x1ee>
		{
		case DIO_u8PORTA : CLR_BIT(DDRA , Copy_u8Pin); break; 
    1a08:	aa e3       	ldi	r26, 0x3A	; 58
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	ea e3       	ldi	r30, 0x3A	; 58
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	48 2f       	mov	r20, r24
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	02 2e       	mov	r0, r18
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <DIO_voidSetPinDirection+0x80>
    1a22:	88 0f       	add	r24, r24
    1a24:	99 1f       	adc	r25, r25
    1a26:	0a 94       	dec	r0
    1a28:	e2 f7       	brpl	.-8      	; 0x1a22 <DIO_voidSetPinDirection+0x7c>
    1a2a:	80 95       	com	r24
    1a2c:	84 23       	and	r24, r20
    1a2e:	8c 93       	st	X, r24
    1a30:	b1 c0       	rjmp	.+354    	; 0x1b94 <DIO_voidSetPinDirection+0x1ee>
		case DIO_u8PORTB : CLR_BIT(DDRB , Copy_u8Pin); break;
    1a32:	a7 e3       	ldi	r26, 0x37	; 55
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e7 e3       	ldi	r30, 0x37	; 55
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	48 2f       	mov	r20, r24
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	02 2e       	mov	r0, r18
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <DIO_voidSetPinDirection+0xaa>
    1a4c:	88 0f       	add	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	0a 94       	dec	r0
    1a52:	e2 f7       	brpl	.-8      	; 0x1a4c <DIO_voidSetPinDirection+0xa6>
    1a54:	80 95       	com	r24
    1a56:	84 23       	and	r24, r20
    1a58:	8c 93       	st	X, r24
    1a5a:	9c c0       	rjmp	.+312    	; 0x1b94 <DIO_voidSetPinDirection+0x1ee>
		case DIO_u8PORTC : CLR_BIT(DDRC , Copy_u8Pin); break;
    1a5c:	a4 e3       	ldi	r26, 0x34	; 52
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e4 e3       	ldi	r30, 0x34	; 52
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	48 2f       	mov	r20, r24
    1a68:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	02 2e       	mov	r0, r18
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <DIO_voidSetPinDirection+0xd4>
    1a76:	88 0f       	add	r24, r24
    1a78:	99 1f       	adc	r25, r25
    1a7a:	0a 94       	dec	r0
    1a7c:	e2 f7       	brpl	.-8      	; 0x1a76 <DIO_voidSetPinDirection+0xd0>
    1a7e:	80 95       	com	r24
    1a80:	84 23       	and	r24, r20
    1a82:	8c 93       	st	X, r24
    1a84:	87 c0       	rjmp	.+270    	; 0x1b94 <DIO_voidSetPinDirection+0x1ee>
		case DIO_u8PORTD : CLR_BIT(DDRD , Copy_u8Pin); break;
    1a86:	a1 e3       	ldi	r26, 0x31	; 49
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e1 e3       	ldi	r30, 0x31	; 49
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	48 2f       	mov	r20, r24
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	28 2f       	mov	r18, r24
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	02 2e       	mov	r0, r18
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <DIO_voidSetPinDirection+0xfe>
    1aa0:	88 0f       	add	r24, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	0a 94       	dec	r0
    1aa6:	e2 f7       	brpl	.-8      	; 0x1aa0 <DIO_voidSetPinDirection+0xfa>
    1aa8:	80 95       	com	r24
    1aaa:	84 23       	and	r24, r20
    1aac:	8c 93       	st	X, r24
    1aae:	72 c0       	rjmp	.+228    	; 0x1b94 <DIO_voidSetPinDirection+0x1ee>
		}
	}
	else if(Copy_u8Direction == DIO_u8OUTPUT)
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	81 30       	cpi	r24, 0x01	; 1
    1ab4:	09 f0       	breq	.+2      	; 0x1ab8 <DIO_voidSetPinDirection+0x112>
    1ab6:	6e c0       	rjmp	.+220    	; 0x1b94 <DIO_voidSetPinDirection+0x1ee>
	{
		switch(Copy_u8Port)
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
    1aba:	28 2f       	mov	r18, r24
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	3d 83       	std	Y+5, r19	; 0x05
    1ac0:	2c 83       	std	Y+4, r18	; 0x04
    1ac2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac6:	81 30       	cpi	r24, 0x01	; 1
    1ac8:	91 05       	cpc	r25, r1
    1aca:	49 f1       	breq	.+82     	; 0x1b1e <DIO_voidSetPinDirection+0x178>
    1acc:	2c 81       	ldd	r18, Y+4	; 0x04
    1ace:	3d 81       	ldd	r19, Y+5	; 0x05
    1ad0:	22 30       	cpi	r18, 0x02	; 2
    1ad2:	31 05       	cpc	r19, r1
    1ad4:	2c f4       	brge	.+10     	; 0x1ae0 <DIO_voidSetPinDirection+0x13a>
    1ad6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad8:	9d 81       	ldd	r25, Y+5	; 0x05
    1ada:	00 97       	sbiw	r24, 0x00	; 0
    1adc:	61 f0       	breq	.+24     	; 0x1af6 <DIO_voidSetPinDirection+0x150>
    1ade:	5a c0       	rjmp	.+180    	; 0x1b94 <DIO_voidSetPinDirection+0x1ee>
    1ae0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ae2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ae4:	22 30       	cpi	r18, 0x02	; 2
    1ae6:	31 05       	cpc	r19, r1
    1ae8:	71 f1       	breq	.+92     	; 0x1b46 <DIO_voidSetPinDirection+0x1a0>
    1aea:	8c 81       	ldd	r24, Y+4	; 0x04
    1aec:	9d 81       	ldd	r25, Y+5	; 0x05
    1aee:	83 30       	cpi	r24, 0x03	; 3
    1af0:	91 05       	cpc	r25, r1
    1af2:	e9 f1       	breq	.+122    	; 0x1b6e <DIO_voidSetPinDirection+0x1c8>
    1af4:	4f c0       	rjmp	.+158    	; 0x1b94 <DIO_voidSetPinDirection+0x1ee>
		{
		case DIO_u8PORTA : SET_BIT(DDRA , Copy_u8Pin); break;
    1af6:	aa e3       	ldi	r26, 0x3A	; 58
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	ea e3       	ldi	r30, 0x3A	; 58
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	48 2f       	mov	r20, r24
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	02 2e       	mov	r0, r18
    1b0e:	02 c0       	rjmp	.+4      	; 0x1b14 <DIO_voidSetPinDirection+0x16e>
    1b10:	88 0f       	add	r24, r24
    1b12:	99 1f       	adc	r25, r25
    1b14:	0a 94       	dec	r0
    1b16:	e2 f7       	brpl	.-8      	; 0x1b10 <DIO_voidSetPinDirection+0x16a>
    1b18:	84 2b       	or	r24, r20
    1b1a:	8c 93       	st	X, r24
    1b1c:	3b c0       	rjmp	.+118    	; 0x1b94 <DIO_voidSetPinDirection+0x1ee>
		case DIO_u8PORTB : SET_BIT(DDRB , Copy_u8Pin); break;
    1b1e:	a7 e3       	ldi	r26, 0x37	; 55
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e7 e3       	ldi	r30, 0x37	; 55
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	48 2f       	mov	r20, r24
    1b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	02 2e       	mov	r0, r18
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <DIO_voidSetPinDirection+0x196>
    1b38:	88 0f       	add	r24, r24
    1b3a:	99 1f       	adc	r25, r25
    1b3c:	0a 94       	dec	r0
    1b3e:	e2 f7       	brpl	.-8      	; 0x1b38 <DIO_voidSetPinDirection+0x192>
    1b40:	84 2b       	or	r24, r20
    1b42:	8c 93       	st	X, r24
    1b44:	27 c0       	rjmp	.+78     	; 0x1b94 <DIO_voidSetPinDirection+0x1ee>
		case DIO_u8PORTC : SET_BIT(DDRC , Copy_u8Pin); break;
    1b46:	a4 e3       	ldi	r26, 0x34	; 52
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	e4 e3       	ldi	r30, 0x34	; 52
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	48 2f       	mov	r20, r24
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	28 2f       	mov	r18, r24
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	02 2e       	mov	r0, r18
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <DIO_voidSetPinDirection+0x1be>
    1b60:	88 0f       	add	r24, r24
    1b62:	99 1f       	adc	r25, r25
    1b64:	0a 94       	dec	r0
    1b66:	e2 f7       	brpl	.-8      	; 0x1b60 <DIO_voidSetPinDirection+0x1ba>
    1b68:	84 2b       	or	r24, r20
    1b6a:	8c 93       	st	X, r24
    1b6c:	13 c0       	rjmp	.+38     	; 0x1b94 <DIO_voidSetPinDirection+0x1ee>
		case DIO_u8PORTD : SET_BIT(DDRD , Copy_u8Pin); break;
    1b6e:	a1 e3       	ldi	r26, 0x31	; 49
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	e1 e3       	ldi	r30, 0x31	; 49
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	48 2f       	mov	r20, r24
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	02 2e       	mov	r0, r18
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <DIO_voidSetPinDirection+0x1e6>
    1b88:	88 0f       	add	r24, r24
    1b8a:	99 1f       	adc	r25, r25
    1b8c:	0a 94       	dec	r0
    1b8e:	e2 f7       	brpl	.-8      	; 0x1b88 <DIO_voidSetPinDirection+0x1e2>
    1b90:	84 2b       	or	r24, r20
    1b92:	8c 93       	st	X, r24
		}
	}
}
    1b94:	27 96       	adiw	r28, 0x07	; 7
    1b96:	0f b6       	in	r0, 0x3f	; 63
    1b98:	f8 94       	cli
    1b9a:	de bf       	out	0x3e, r29	; 62
    1b9c:	0f be       	out	0x3f, r0	; 63
    1b9e:	cd bf       	out	0x3d, r28	; 61
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	08 95       	ret

00001ba6 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	27 97       	sbiw	r28, 0x07	; 7
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	de bf       	out	0x3e, r29	; 62
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	89 83       	std	Y+1, r24	; 0x01
    1bbc:	6a 83       	std	Y+2, r22	; 0x02
    1bbe:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8Value == DIO_u8LOW)
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	88 23       	and	r24, r24
    1bc4:	09 f0       	breq	.+2      	; 0x1bc8 <DIO_voidSetPinValue+0x22>
    1bc6:	74 c0       	rjmp	.+232    	; 0x1cb0 <DIO_voidSetPinValue+0x10a>
	{
		switch (Copy_u8Port)
    1bc8:	89 81       	ldd	r24, Y+1	; 0x01
    1bca:	28 2f       	mov	r18, r24
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	3f 83       	std	Y+7, r19	; 0x07
    1bd0:	2e 83       	std	Y+6, r18	; 0x06
    1bd2:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd4:	9f 81       	ldd	r25, Y+7	; 0x07
    1bd6:	81 30       	cpi	r24, 0x01	; 1
    1bd8:	91 05       	cpc	r25, r1
    1bda:	59 f1       	breq	.+86     	; 0x1c32 <DIO_voidSetPinValue+0x8c>
    1bdc:	2e 81       	ldd	r18, Y+6	; 0x06
    1bde:	3f 81       	ldd	r19, Y+7	; 0x07
    1be0:	22 30       	cpi	r18, 0x02	; 2
    1be2:	31 05       	cpc	r19, r1
    1be4:	2c f4       	brge	.+10     	; 0x1bf0 <DIO_voidSetPinValue+0x4a>
    1be6:	8e 81       	ldd	r24, Y+6	; 0x06
    1be8:	9f 81       	ldd	r25, Y+7	; 0x07
    1bea:	00 97       	sbiw	r24, 0x00	; 0
    1bec:	69 f0       	breq	.+26     	; 0x1c08 <DIO_voidSetPinValue+0x62>
    1bee:	d2 c0       	rjmp	.+420    	; 0x1d94 <DIO_voidSetPinValue+0x1ee>
    1bf0:	2e 81       	ldd	r18, Y+6	; 0x06
    1bf2:	3f 81       	ldd	r19, Y+7	; 0x07
    1bf4:	22 30       	cpi	r18, 0x02	; 2
    1bf6:	31 05       	cpc	r19, r1
    1bf8:	89 f1       	breq	.+98     	; 0x1c5c <DIO_voidSetPinValue+0xb6>
    1bfa:	8e 81       	ldd	r24, Y+6	; 0x06
    1bfc:	9f 81       	ldd	r25, Y+7	; 0x07
    1bfe:	83 30       	cpi	r24, 0x03	; 3
    1c00:	91 05       	cpc	r25, r1
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <DIO_voidSetPinValue+0x60>
    1c04:	40 c0       	rjmp	.+128    	; 0x1c86 <DIO_voidSetPinValue+0xe0>
    1c06:	c6 c0       	rjmp	.+396    	; 0x1d94 <DIO_voidSetPinValue+0x1ee>
		{
		case DIO_u8PORTA : CLR_BIT(PORTA , Copy_u8Pin); break; 
    1c08:	ab e3       	ldi	r26, 0x3B	; 59
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	eb e3       	ldi	r30, 0x3B	; 59
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	48 2f       	mov	r20, r24
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	02 2e       	mov	r0, r18
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <DIO_voidSetPinValue+0x80>
    1c22:	88 0f       	add	r24, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	0a 94       	dec	r0
    1c28:	e2 f7       	brpl	.-8      	; 0x1c22 <DIO_voidSetPinValue+0x7c>
    1c2a:	80 95       	com	r24
    1c2c:	84 23       	and	r24, r20
    1c2e:	8c 93       	st	X, r24
    1c30:	b1 c0       	rjmp	.+354    	; 0x1d94 <DIO_voidSetPinValue+0x1ee>
		case DIO_u8PORTB : CLR_BIT(PORTB , Copy_u8Pin); break;
    1c32:	a8 e3       	ldi	r26, 0x38	; 56
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	e8 e3       	ldi	r30, 0x38	; 56
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	48 2f       	mov	r20, r24
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	28 2f       	mov	r18, r24
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	02 2e       	mov	r0, r18
    1c4a:	02 c0       	rjmp	.+4      	; 0x1c50 <DIO_voidSetPinValue+0xaa>
    1c4c:	88 0f       	add	r24, r24
    1c4e:	99 1f       	adc	r25, r25
    1c50:	0a 94       	dec	r0
    1c52:	e2 f7       	brpl	.-8      	; 0x1c4c <DIO_voidSetPinValue+0xa6>
    1c54:	80 95       	com	r24
    1c56:	84 23       	and	r24, r20
    1c58:	8c 93       	st	X, r24
    1c5a:	9c c0       	rjmp	.+312    	; 0x1d94 <DIO_voidSetPinValue+0x1ee>
		case DIO_u8PORTC : CLR_BIT(PORTC , Copy_u8Pin); break;
    1c5c:	a5 e3       	ldi	r26, 0x35	; 53
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	e5 e3       	ldi	r30, 0x35	; 53
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	48 2f       	mov	r20, r24
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	28 2f       	mov	r18, r24
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	02 2e       	mov	r0, r18
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <DIO_voidSetPinValue+0xd4>
    1c76:	88 0f       	add	r24, r24
    1c78:	99 1f       	adc	r25, r25
    1c7a:	0a 94       	dec	r0
    1c7c:	e2 f7       	brpl	.-8      	; 0x1c76 <DIO_voidSetPinValue+0xd0>
    1c7e:	80 95       	com	r24
    1c80:	84 23       	and	r24, r20
    1c82:	8c 93       	st	X, r24
    1c84:	87 c0       	rjmp	.+270    	; 0x1d94 <DIO_voidSetPinValue+0x1ee>
		case DIO_u8PORTD : CLR_BIT(PORTD , Copy_u8Pin); break;
    1c86:	a2 e3       	ldi	r26, 0x32	; 50
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	e2 e3       	ldi	r30, 0x32	; 50
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	48 2f       	mov	r20, r24
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	02 2e       	mov	r0, r18
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <DIO_voidSetPinValue+0xfe>
    1ca0:	88 0f       	add	r24, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	0a 94       	dec	r0
    1ca6:	e2 f7       	brpl	.-8      	; 0x1ca0 <DIO_voidSetPinValue+0xfa>
    1ca8:	80 95       	com	r24
    1caa:	84 23       	and	r24, r20
    1cac:	8c 93       	st	X, r24
    1cae:	72 c0       	rjmp	.+228    	; 0x1d94 <DIO_voidSetPinValue+0x1ee>
		}
	}
	else if (Copy_u8Value == DIO_u8HIGH)
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	81 30       	cpi	r24, 0x01	; 1
    1cb4:	09 f0       	breq	.+2      	; 0x1cb8 <DIO_voidSetPinValue+0x112>
    1cb6:	6e c0       	rjmp	.+220    	; 0x1d94 <DIO_voidSetPinValue+0x1ee>
	{				
		switch (Copy_u8Port)
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	28 2f       	mov	r18, r24
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	3d 83       	std	Y+5, r19	; 0x05
    1cc0:	2c 83       	std	Y+4, r18	; 0x04
    1cc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc6:	81 30       	cpi	r24, 0x01	; 1
    1cc8:	91 05       	cpc	r25, r1
    1cca:	49 f1       	breq	.+82     	; 0x1d1e <DIO_voidSetPinValue+0x178>
    1ccc:	2c 81       	ldd	r18, Y+4	; 0x04
    1cce:	3d 81       	ldd	r19, Y+5	; 0x05
    1cd0:	22 30       	cpi	r18, 0x02	; 2
    1cd2:	31 05       	cpc	r19, r1
    1cd4:	2c f4       	brge	.+10     	; 0x1ce0 <DIO_voidSetPinValue+0x13a>
    1cd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	61 f0       	breq	.+24     	; 0x1cf6 <DIO_voidSetPinValue+0x150>
    1cde:	5a c0       	rjmp	.+180    	; 0x1d94 <DIO_voidSetPinValue+0x1ee>
    1ce0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ce2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ce4:	22 30       	cpi	r18, 0x02	; 2
    1ce6:	31 05       	cpc	r19, r1
    1ce8:	71 f1       	breq	.+92     	; 0x1d46 <DIO_voidSetPinValue+0x1a0>
    1cea:	8c 81       	ldd	r24, Y+4	; 0x04
    1cec:	9d 81       	ldd	r25, Y+5	; 0x05
    1cee:	83 30       	cpi	r24, 0x03	; 3
    1cf0:	91 05       	cpc	r25, r1
    1cf2:	e9 f1       	breq	.+122    	; 0x1d6e <DIO_voidSetPinValue+0x1c8>
    1cf4:	4f c0       	rjmp	.+158    	; 0x1d94 <DIO_voidSetPinValue+0x1ee>
		{
		case DIO_u8PORTA : SET_BIT(PORTA , Copy_u8Pin); break; 
    1cf6:	ab e3       	ldi	r26, 0x3B	; 59
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	eb e3       	ldi	r30, 0x3B	; 59
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	48 2f       	mov	r20, r24
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	28 2f       	mov	r18, r24
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	02 2e       	mov	r0, r18
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <DIO_voidSetPinValue+0x16e>
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	0a 94       	dec	r0
    1d16:	e2 f7       	brpl	.-8      	; 0x1d10 <DIO_voidSetPinValue+0x16a>
    1d18:	84 2b       	or	r24, r20
    1d1a:	8c 93       	st	X, r24
    1d1c:	3b c0       	rjmp	.+118    	; 0x1d94 <DIO_voidSetPinValue+0x1ee>
		case DIO_u8PORTB : SET_BIT(PORTB , Copy_u8Pin); break;
    1d1e:	a8 e3       	ldi	r26, 0x38	; 56
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e8 e3       	ldi	r30, 0x38	; 56
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	48 2f       	mov	r20, r24
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	02 2e       	mov	r0, r18
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <DIO_voidSetPinValue+0x196>
    1d38:	88 0f       	add	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	0a 94       	dec	r0
    1d3e:	e2 f7       	brpl	.-8      	; 0x1d38 <DIO_voidSetPinValue+0x192>
    1d40:	84 2b       	or	r24, r20
    1d42:	8c 93       	st	X, r24
    1d44:	27 c0       	rjmp	.+78     	; 0x1d94 <DIO_voidSetPinValue+0x1ee>
		case DIO_u8PORTC : SET_BIT(PORTC , Copy_u8Pin); break;
    1d46:	a5 e3       	ldi	r26, 0x35	; 53
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e5 e3       	ldi	r30, 0x35	; 53
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	48 2f       	mov	r20, r24
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	28 2f       	mov	r18, r24
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	02 2e       	mov	r0, r18
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <DIO_voidSetPinValue+0x1be>
    1d60:	88 0f       	add	r24, r24
    1d62:	99 1f       	adc	r25, r25
    1d64:	0a 94       	dec	r0
    1d66:	e2 f7       	brpl	.-8      	; 0x1d60 <DIO_voidSetPinValue+0x1ba>
    1d68:	84 2b       	or	r24, r20
    1d6a:	8c 93       	st	X, r24
    1d6c:	13 c0       	rjmp	.+38     	; 0x1d94 <DIO_voidSetPinValue+0x1ee>
		case DIO_u8PORTD : SET_BIT(PORTD , Copy_u8Pin); break;
    1d6e:	a2 e3       	ldi	r26, 0x32	; 50
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e2 e3       	ldi	r30, 0x32	; 50
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	48 2f       	mov	r20, r24
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	02 2e       	mov	r0, r18
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <DIO_voidSetPinValue+0x1e6>
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	0a 94       	dec	r0
    1d8e:	e2 f7       	brpl	.-8      	; 0x1d88 <DIO_voidSetPinValue+0x1e2>
    1d90:	84 2b       	or	r24, r20
    1d92:	8c 93       	st	X, r24
		}
	}	
}
    1d94:	27 96       	adiw	r28, 0x07	; 7
    1d96:	0f b6       	in	r0, 0x3f	; 63
    1d98:	f8 94       	cli
    1d9a:	de bf       	out	0x3e, r29	; 62
    1d9c:	0f be       	out	0x3f, r0	; 63
    1d9e:	cd bf       	out	0x3d, r28	; 61
    1da0:	cf 91       	pop	r28
    1da2:	df 91       	pop	r29
    1da4:	08 95       	ret

00001da6 <DIO_u8GetPinValue>:

u8 	 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	00 d0       	rcall	.+0      	; 0x1dac <DIO_u8GetPinValue+0x6>
    1dac:	00 d0       	rcall	.+0      	; 0x1dae <DIO_u8GetPinValue+0x8>
    1dae:	0f 92       	push	r0
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	8a 83       	std	Y+2, r24	; 0x02
    1db6:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value=0;
    1db8:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	3d 83       	std	Y+5, r19	; 0x05
    1dc2:	2c 83       	std	Y+4, r18	; 0x04
    1dc4:	4c 81       	ldd	r20, Y+4	; 0x04
    1dc6:	5d 81       	ldd	r21, Y+5	; 0x05
    1dc8:	41 30       	cpi	r20, 0x01	; 1
    1dca:	51 05       	cpc	r21, r1
    1dcc:	41 f1       	breq	.+80     	; 0x1e1e <DIO_u8GetPinValue+0x78>
    1dce:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd2:	82 30       	cpi	r24, 0x02	; 2
    1dd4:	91 05       	cpc	r25, r1
    1dd6:	34 f4       	brge	.+12     	; 0x1de4 <DIO_u8GetPinValue+0x3e>
    1dd8:	2c 81       	ldd	r18, Y+4	; 0x04
    1dda:	3d 81       	ldd	r19, Y+5	; 0x05
    1ddc:	21 15       	cp	r18, r1
    1dde:	31 05       	cpc	r19, r1
    1de0:	61 f0       	breq	.+24     	; 0x1dfa <DIO_u8GetPinValue+0x54>
    1de2:	52 c0       	rjmp	.+164    	; 0x1e88 <DIO_u8GetPinValue+0xe2>
    1de4:	4c 81       	ldd	r20, Y+4	; 0x04
    1de6:	5d 81       	ldd	r21, Y+5	; 0x05
    1de8:	42 30       	cpi	r20, 0x02	; 2
    1dea:	51 05       	cpc	r21, r1
    1dec:	51 f1       	breq	.+84     	; 0x1e42 <DIO_u8GetPinValue+0x9c>
    1dee:	8c 81       	ldd	r24, Y+4	; 0x04
    1df0:	9d 81       	ldd	r25, Y+5	; 0x05
    1df2:	83 30       	cpi	r24, 0x03	; 3
    1df4:	91 05       	cpc	r25, r1
    1df6:	b9 f1       	breq	.+110    	; 0x1e66 <DIO_u8GetPinValue+0xc0>
    1df8:	47 c0       	rjmp	.+142    	; 0x1e88 <DIO_u8GetPinValue+0xe2>
	{
	case DIO_u8PORTA : pin_value = GET_BIT(PINA , Copy_u8Pin); break;
    1dfa:	e9 e3       	ldi	r30, 0x39	; 57
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	88 2f       	mov	r24, r24
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	a9 01       	movw	r20, r18
    1e0c:	02 c0       	rjmp	.+4      	; 0x1e12 <DIO_u8GetPinValue+0x6c>
    1e0e:	55 95       	asr	r21
    1e10:	47 95       	ror	r20
    1e12:	8a 95       	dec	r24
    1e14:	e2 f7       	brpl	.-8      	; 0x1e0e <DIO_u8GetPinValue+0x68>
    1e16:	ca 01       	movw	r24, r20
    1e18:	81 70       	andi	r24, 0x01	; 1
    1e1a:	89 83       	std	Y+1, r24	; 0x01
    1e1c:	35 c0       	rjmp	.+106    	; 0x1e88 <DIO_u8GetPinValue+0xe2>
	case DIO_u8PORTB : pin_value = GET_BIT(PINB , Copy_u8Pin); break;
    1e1e:	e6 e3       	ldi	r30, 0x36	; 54
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	28 2f       	mov	r18, r24
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	88 2f       	mov	r24, r24
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	a9 01       	movw	r20, r18
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <DIO_u8GetPinValue+0x90>
    1e32:	55 95       	asr	r21
    1e34:	47 95       	ror	r20
    1e36:	8a 95       	dec	r24
    1e38:	e2 f7       	brpl	.-8      	; 0x1e32 <DIO_u8GetPinValue+0x8c>
    1e3a:	ca 01       	movw	r24, r20
    1e3c:	81 70       	andi	r24, 0x01	; 1
    1e3e:	89 83       	std	Y+1, r24	; 0x01
    1e40:	23 c0       	rjmp	.+70     	; 0x1e88 <DIO_u8GetPinValue+0xe2>
	case DIO_u8PORTC : pin_value = GET_BIT(PINC , Copy_u8Pin); break;
    1e42:	e3 e3       	ldi	r30, 0x33	; 51
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	28 2f       	mov	r18, r24
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	88 2f       	mov	r24, r24
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	a9 01       	movw	r20, r18
    1e54:	02 c0       	rjmp	.+4      	; 0x1e5a <DIO_u8GetPinValue+0xb4>
    1e56:	55 95       	asr	r21
    1e58:	47 95       	ror	r20
    1e5a:	8a 95       	dec	r24
    1e5c:	e2 f7       	brpl	.-8      	; 0x1e56 <DIO_u8GetPinValue+0xb0>
    1e5e:	ca 01       	movw	r24, r20
    1e60:	81 70       	andi	r24, 0x01	; 1
    1e62:	89 83       	std	Y+1, r24	; 0x01
    1e64:	11 c0       	rjmp	.+34     	; 0x1e88 <DIO_u8GetPinValue+0xe2>
	case DIO_u8PORTD : pin_value = GET_BIT(PIND , Copy_u8Pin); break;
    1e66:	e0 e3       	ldi	r30, 0x30	; 48
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	28 2f       	mov	r18, r24
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	88 2f       	mov	r24, r24
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	a9 01       	movw	r20, r18
    1e78:	02 c0       	rjmp	.+4      	; 0x1e7e <DIO_u8GetPinValue+0xd8>
    1e7a:	55 95       	asr	r21
    1e7c:	47 95       	ror	r20
    1e7e:	8a 95       	dec	r24
    1e80:	e2 f7       	brpl	.-8      	; 0x1e7a <DIO_u8GetPinValue+0xd4>
    1e82:	ca 01       	movw	r24, r20
    1e84:	81 70       	andi	r24, 0x01	; 1
    1e86:	89 83       	std	Y+1, r24	; 0x01
	}
	return pin_value;
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	00 d0       	rcall	.+0      	; 0x1ea0 <DIO_voidSetPortDirection+0x6>
    1ea0:	00 d0       	rcall	.+0      	; 0x1ea2 <DIO_voidSetPortDirection+0x8>
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	89 83       	std	Y+1, r24	; 0x01
    1ea8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	28 2f       	mov	r18, r24
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	3c 83       	std	Y+4, r19	; 0x04
    1eb2:	2b 83       	std	Y+3, r18	; 0x03
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb8:	81 30       	cpi	r24, 0x01	; 1
    1eba:	91 05       	cpc	r25, r1
    1ebc:	d1 f0       	breq	.+52     	; 0x1ef2 <DIO_voidSetPortDirection+0x58>
    1ebe:	2b 81       	ldd	r18, Y+3	; 0x03
    1ec0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ec2:	22 30       	cpi	r18, 0x02	; 2
    1ec4:	31 05       	cpc	r19, r1
    1ec6:	2c f4       	brge	.+10     	; 0x1ed2 <DIO_voidSetPortDirection+0x38>
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	61 f0       	breq	.+24     	; 0x1ee8 <DIO_voidSetPortDirection+0x4e>
    1ed0:	1e c0       	rjmp	.+60     	; 0x1f0e <DIO_voidSetPortDirection+0x74>
    1ed2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ed4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed6:	22 30       	cpi	r18, 0x02	; 2
    1ed8:	31 05       	cpc	r19, r1
    1eda:	81 f0       	breq	.+32     	; 0x1efc <DIO_voidSetPortDirection+0x62>
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee0:	83 30       	cpi	r24, 0x03	; 3
    1ee2:	91 05       	cpc	r25, r1
    1ee4:	81 f0       	breq	.+32     	; 0x1f06 <DIO_voidSetPortDirection+0x6c>
    1ee6:	13 c0       	rjmp	.+38     	; 0x1f0e <DIO_voidSetPortDirection+0x74>
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
    1ee8:	ea e3       	ldi	r30, 0x3A	; 58
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	8a 81       	ldd	r24, Y+2	; 0x02
    1eee:	80 83       	st	Z, r24
    1ef0:	0e c0       	rjmp	.+28     	; 0x1f0e <DIO_voidSetPortDirection+0x74>
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
    1ef2:	e7 e3       	ldi	r30, 0x37	; 55
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef8:	80 83       	st	Z, r24
    1efa:	09 c0       	rjmp	.+18     	; 0x1f0e <DIO_voidSetPortDirection+0x74>
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
    1efc:	e4 e3       	ldi	r30, 0x34	; 52
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	80 83       	st	Z, r24
    1f04:	04 c0       	rjmp	.+8      	; 0x1f0e <DIO_voidSetPortDirection+0x74>
	case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
    1f06:	e1 e3       	ldi	r30, 0x31	; 49
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0c:	80 83       	st	Z, r24
	}
}
    1f0e:	0f 90       	pop	r0
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	08 95       	ret

00001f1c <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	00 d0       	rcall	.+0      	; 0x1f22 <DIO_voidSetPortValue+0x6>
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <DIO_voidSetPortValue+0x8>
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	89 83       	std	Y+1, r24	; 0x01
    1f2a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
    1f2e:	28 2f       	mov	r18, r24
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	3c 83       	std	Y+4, r19	; 0x04
    1f34:	2b 83       	std	Y+3, r18	; 0x03
    1f36:	8b 81       	ldd	r24, Y+3	; 0x03
    1f38:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3a:	81 30       	cpi	r24, 0x01	; 1
    1f3c:	91 05       	cpc	r25, r1
    1f3e:	d1 f0       	breq	.+52     	; 0x1f74 <DIO_voidSetPortValue+0x58>
    1f40:	2b 81       	ldd	r18, Y+3	; 0x03
    1f42:	3c 81       	ldd	r19, Y+4	; 0x04
    1f44:	22 30       	cpi	r18, 0x02	; 2
    1f46:	31 05       	cpc	r19, r1
    1f48:	2c f4       	brge	.+10     	; 0x1f54 <DIO_voidSetPortValue+0x38>
    1f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	61 f0       	breq	.+24     	; 0x1f6a <DIO_voidSetPortValue+0x4e>
    1f52:	1e c0       	rjmp	.+60     	; 0x1f90 <DIO_voidSetPortValue+0x74>
    1f54:	2b 81       	ldd	r18, Y+3	; 0x03
    1f56:	3c 81       	ldd	r19, Y+4	; 0x04
    1f58:	22 30       	cpi	r18, 0x02	; 2
    1f5a:	31 05       	cpc	r19, r1
    1f5c:	81 f0       	breq	.+32     	; 0x1f7e <DIO_voidSetPortValue+0x62>
    1f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f60:	9c 81       	ldd	r25, Y+4	; 0x04
    1f62:	83 30       	cpi	r24, 0x03	; 3
    1f64:	91 05       	cpc	r25, r1
    1f66:	81 f0       	breq	.+32     	; 0x1f88 <DIO_voidSetPortValue+0x6c>
    1f68:	13 c0       	rjmp	.+38     	; 0x1f90 <DIO_voidSetPortValue+0x74>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
    1f6a:	eb e3       	ldi	r30, 0x3B	; 59
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f70:	80 83       	st	Z, r24
    1f72:	0e c0       	rjmp	.+28     	; 0x1f90 <DIO_voidSetPortValue+0x74>
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
    1f74:	e8 e3       	ldi	r30, 0x38	; 56
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7a:	80 83       	st	Z, r24
    1f7c:	09 c0       	rjmp	.+18     	; 0x1f90 <DIO_voidSetPortValue+0x74>
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
    1f7e:	e5 e3       	ldi	r30, 0x35	; 53
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	80 83       	st	Z, r24
    1f86:	04 c0       	rjmp	.+8      	; 0x1f90 <DIO_voidSetPortValue+0x74>
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
    1f88:	e2 e3       	ldi	r30, 0x32	; 50
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	80 83       	st	Z, r24
	}
}
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	cf 91       	pop	r28
    1f9a:	df 91       	pop	r29
    1f9c:	08 95       	ret

00001f9e <DIO_u8GetPortValue>:

u8 	 DIO_u8GetPortValue(u8 Copy_u8Port)
{
    1f9e:	df 93       	push	r29
    1fa0:	cf 93       	push	r28
    1fa2:	00 d0       	rcall	.+0      	; 0x1fa4 <DIO_u8GetPortValue+0x6>
    1fa4:	00 d0       	rcall	.+0      	; 0x1fa6 <DIO_u8GetPortValue+0x8>
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	8a 83       	std	Y+2, r24	; 0x02
	u8 port_value;
	switch(Copy_u8Port)
    1fac:	8a 81       	ldd	r24, Y+2	; 0x02
    1fae:	28 2f       	mov	r18, r24
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	3c 83       	std	Y+4, r19	; 0x04
    1fb4:	2b 83       	std	Y+3, r18	; 0x03
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fba:	81 30       	cpi	r24, 0x01	; 1
    1fbc:	91 05       	cpc	r25, r1
    1fbe:	d1 f0       	breq	.+52     	; 0x1ff4 <DIO_u8GetPortValue+0x56>
    1fc0:	2b 81       	ldd	r18, Y+3	; 0x03
    1fc2:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc4:	22 30       	cpi	r18, 0x02	; 2
    1fc6:	31 05       	cpc	r19, r1
    1fc8:	2c f4       	brge	.+10     	; 0x1fd4 <DIO_u8GetPortValue+0x36>
    1fca:	8b 81       	ldd	r24, Y+3	; 0x03
    1fcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fce:	00 97       	sbiw	r24, 0x00	; 0
    1fd0:	61 f0       	breq	.+24     	; 0x1fea <DIO_u8GetPortValue+0x4c>
    1fd2:	1e c0       	rjmp	.+60     	; 0x2010 <DIO_u8GetPortValue+0x72>
    1fd4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd8:	22 30       	cpi	r18, 0x02	; 2
    1fda:	31 05       	cpc	r19, r1
    1fdc:	81 f0       	breq	.+32     	; 0x1ffe <DIO_u8GetPortValue+0x60>
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe2:	83 30       	cpi	r24, 0x03	; 3
    1fe4:	91 05       	cpc	r25, r1
    1fe6:	81 f0       	breq	.+32     	; 0x2008 <DIO_u8GetPortValue+0x6a>
    1fe8:	13 c0       	rjmp	.+38     	; 0x2010 <DIO_u8GetPortValue+0x72>
	{
	case DIO_u8PORTA : port_value = PORTA; break;
    1fea:	eb e3       	ldi	r30, 0x3B	; 59
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    1ff2:	0e c0       	rjmp	.+28     	; 0x2010 <DIO_u8GetPortValue+0x72>
	case DIO_u8PORTB : port_value = PORTB; break;
    1ff4:	e8 e3       	ldi	r30, 0x38	; 56
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	80 81       	ld	r24, Z
    1ffa:	89 83       	std	Y+1, r24	; 0x01
    1ffc:	09 c0       	rjmp	.+18     	; 0x2010 <DIO_u8GetPortValue+0x72>
	case DIO_u8PORTC : port_value = PORTC; break;
    1ffe:	e5 e3       	ldi	r30, 0x35	; 53
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	89 83       	std	Y+1, r24	; 0x01
    2006:	04 c0       	rjmp	.+8      	; 0x2010 <DIO_u8GetPortValue+0x72>
	case DIO_u8PORTD : port_value = PORTD; break;
    2008:	e2 e3       	ldi	r30, 0x32	; 50
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	89 83       	std	Y+1, r24	; 0x01
	}
	return port_value;
    2010:	89 81       	ldd	r24, Y+1	; 0x01
}
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	08 95       	ret

00002020 <main>:
#include "CLCD_Config.h"
#include "DIO_interface.h"
#include "CLCD_Interface.h"

int main(void)
{
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
//	    0b01110,
//		0b00000,
//		0b00000
//	};

	DIO_voidSetPortDirection(DIO_u8PORTA , DIO_u8PORTOUTPUT);
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	6f ef       	ldi	r22, 0xFF	; 255
    202c:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <DIO_voidSetPortDirection>

	DIO_voidSetPinDirection(DIO_u8PORTC , DIO_u8PIN0 , DIO_u8OUTPUT);
    2030:	82 e0       	ldi	r24, 0x02	; 2
    2032:	60 e0       	ldi	r22, 0x00	; 0
    2034:	41 e0       	ldi	r20, 0x01	; 1
    2036:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8PORTC , DIO_u8PIN1 , DIO_u8OUTPUT);
    203a:	82 e0       	ldi	r24, 0x02	; 2
    203c:	61 e0       	ldi	r22, 0x01	; 1
    203e:	41 e0       	ldi	r20, 0x01	; 1
    2040:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8PORTC , DIO_u8PIN2 , DIO_u8OUTPUT);
    2044:	82 e0       	ldi	r24, 0x02	; 2
    2046:	62 e0       	ldi	r22, 0x02	; 2
    2048:	41 e0       	ldi	r20, 0x01	; 1
    204a:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <DIO_voidSetPinDirection>

	CLCD_voidInit();
    204e:	0e 94 84 07 	call	0xf08	; 0xf08 <CLCD_voidInit>
//	CLCD_voidSendString("Tarek Sobih");
//	CLCD_voidSendInteger(3);
//	while(1)
//	{

	CLCD_voidSendFloat(1354.45557);
    2052:	64 e9       	ldi	r22, 0x94	; 148
    2054:	7e e4       	ldi	r23, 0x4E	; 78
    2056:	89 ea       	ldi	r24, 0xA9	; 169
    2058:	94 e4       	ldi	r25, 0x44	; 68
    205a:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <CLCD_voidSendFloat>
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	90 e0       	ldi	r25, 0x00	; 0

//	}
//	return 0;

}
    2062:	cf 91       	pop	r28
    2064:	df 91       	pop	r29
    2066:	08 95       	ret

00002068 <__udivmodsi4>:
    2068:	a1 e2       	ldi	r26, 0x21	; 33
    206a:	1a 2e       	mov	r1, r26
    206c:	aa 1b       	sub	r26, r26
    206e:	bb 1b       	sub	r27, r27
    2070:	fd 01       	movw	r30, r26
    2072:	0d c0       	rjmp	.+26     	; 0x208e <__udivmodsi4_ep>

00002074 <__udivmodsi4_loop>:
    2074:	aa 1f       	adc	r26, r26
    2076:	bb 1f       	adc	r27, r27
    2078:	ee 1f       	adc	r30, r30
    207a:	ff 1f       	adc	r31, r31
    207c:	a2 17       	cp	r26, r18
    207e:	b3 07       	cpc	r27, r19
    2080:	e4 07       	cpc	r30, r20
    2082:	f5 07       	cpc	r31, r21
    2084:	20 f0       	brcs	.+8      	; 0x208e <__udivmodsi4_ep>
    2086:	a2 1b       	sub	r26, r18
    2088:	b3 0b       	sbc	r27, r19
    208a:	e4 0b       	sbc	r30, r20
    208c:	f5 0b       	sbc	r31, r21

0000208e <__udivmodsi4_ep>:
    208e:	66 1f       	adc	r22, r22
    2090:	77 1f       	adc	r23, r23
    2092:	88 1f       	adc	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	1a 94       	dec	r1
    2098:	69 f7       	brne	.-38     	; 0x2074 <__udivmodsi4_loop>
    209a:	60 95       	com	r22
    209c:	70 95       	com	r23
    209e:	80 95       	com	r24
    20a0:	90 95       	com	r25
    20a2:	9b 01       	movw	r18, r22
    20a4:	ac 01       	movw	r20, r24
    20a6:	bd 01       	movw	r22, r26
    20a8:	cf 01       	movw	r24, r30
    20aa:	08 95       	ret

000020ac <__prologue_saves__>:
    20ac:	2f 92       	push	r2
    20ae:	3f 92       	push	r3
    20b0:	4f 92       	push	r4
    20b2:	5f 92       	push	r5
    20b4:	6f 92       	push	r6
    20b6:	7f 92       	push	r7
    20b8:	8f 92       	push	r8
    20ba:	9f 92       	push	r9
    20bc:	af 92       	push	r10
    20be:	bf 92       	push	r11
    20c0:	cf 92       	push	r12
    20c2:	df 92       	push	r13
    20c4:	ef 92       	push	r14
    20c6:	ff 92       	push	r15
    20c8:	0f 93       	push	r16
    20ca:	1f 93       	push	r17
    20cc:	cf 93       	push	r28
    20ce:	df 93       	push	r29
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
    20d4:	ca 1b       	sub	r28, r26
    20d6:	db 0b       	sbc	r29, r27
    20d8:	0f b6       	in	r0, 0x3f	; 63
    20da:	f8 94       	cli
    20dc:	de bf       	out	0x3e, r29	; 62
    20de:	0f be       	out	0x3f, r0	; 63
    20e0:	cd bf       	out	0x3d, r28	; 61
    20e2:	09 94       	ijmp

000020e4 <__epilogue_restores__>:
    20e4:	2a 88       	ldd	r2, Y+18	; 0x12
    20e6:	39 88       	ldd	r3, Y+17	; 0x11
    20e8:	48 88       	ldd	r4, Y+16	; 0x10
    20ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    20ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    20ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    20f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    20f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    20f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    20f6:	b9 84       	ldd	r11, Y+9	; 0x09
    20f8:	c8 84       	ldd	r12, Y+8	; 0x08
    20fa:	df 80       	ldd	r13, Y+7	; 0x07
    20fc:	ee 80       	ldd	r14, Y+6	; 0x06
    20fe:	fd 80       	ldd	r15, Y+5	; 0x05
    2100:	0c 81       	ldd	r16, Y+4	; 0x04
    2102:	1b 81       	ldd	r17, Y+3	; 0x03
    2104:	aa 81       	ldd	r26, Y+2	; 0x02
    2106:	b9 81       	ldd	r27, Y+1	; 0x01
    2108:	ce 0f       	add	r28, r30
    210a:	d1 1d       	adc	r29, r1
    210c:	0f b6       	in	r0, 0x3f	; 63
    210e:	f8 94       	cli
    2110:	de bf       	out	0x3e, r29	; 62
    2112:	0f be       	out	0x3f, r0	; 63
    2114:	cd bf       	out	0x3d, r28	; 61
    2116:	ed 01       	movw	r28, r26
    2118:	08 95       	ret

0000211a <sprintf>:
    211a:	ae e0       	ldi	r26, 0x0E	; 14
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	e3 e9       	ldi	r30, 0x93	; 147
    2120:	f0 e1       	ldi	r31, 0x10	; 16
    2122:	0c 94 64 10 	jmp	0x20c8	; 0x20c8 <__prologue_saves__+0x1c>
    2126:	0d 89       	ldd	r16, Y+21	; 0x15
    2128:	1e 89       	ldd	r17, Y+22	; 0x16
    212a:	86 e0       	ldi	r24, 0x06	; 6
    212c:	8c 83       	std	Y+4, r24	; 0x04
    212e:	1a 83       	std	Y+2, r17	; 0x02
    2130:	09 83       	std	Y+1, r16	; 0x01
    2132:	8f ef       	ldi	r24, 0xFF	; 255
    2134:	9f e7       	ldi	r25, 0x7F	; 127
    2136:	9e 83       	std	Y+6, r25	; 0x06
    2138:	8d 83       	std	Y+5, r24	; 0x05
    213a:	9e 01       	movw	r18, r28
    213c:	27 5e       	subi	r18, 0xE7	; 231
    213e:	3f 4f       	sbci	r19, 0xFF	; 255
    2140:	ce 01       	movw	r24, r28
    2142:	01 96       	adiw	r24, 0x01	; 1
    2144:	6f 89       	ldd	r22, Y+23	; 0x17
    2146:	78 8d       	ldd	r23, Y+24	; 0x18
    2148:	a9 01       	movw	r20, r18
    214a:	0e 94 b1 10 	call	0x2162	; 0x2162 <vfprintf>
    214e:	2f 81       	ldd	r18, Y+7	; 0x07
    2150:	38 85       	ldd	r19, Y+8	; 0x08
    2152:	02 0f       	add	r16, r18
    2154:	13 1f       	adc	r17, r19
    2156:	f8 01       	movw	r30, r16
    2158:	10 82       	st	Z, r1
    215a:	2e 96       	adiw	r28, 0x0e	; 14
    215c:	e4 e0       	ldi	r30, 0x04	; 4
    215e:	0c 94 80 10 	jmp	0x2100	; 0x2100 <__epilogue_restores__+0x1c>

00002162 <vfprintf>:
    2162:	ab e0       	ldi	r26, 0x0B	; 11
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	e7 eb       	ldi	r30, 0xB7	; 183
    2168:	f0 e1       	ldi	r31, 0x10	; 16
    216a:	0c 94 56 10 	jmp	0x20ac	; 0x20ac <__prologue_saves__>
    216e:	3c 01       	movw	r6, r24
    2170:	2b 01       	movw	r4, r22
    2172:	5a 01       	movw	r10, r20
    2174:	fc 01       	movw	r30, r24
    2176:	17 82       	std	Z+7, r1	; 0x07
    2178:	16 82       	std	Z+6, r1	; 0x06
    217a:	83 81       	ldd	r24, Z+3	; 0x03
    217c:	81 fd       	sbrc	r24, 1
    217e:	03 c0       	rjmp	.+6      	; 0x2186 <vfprintf+0x24>
    2180:	6f ef       	ldi	r22, 0xFF	; 255
    2182:	7f ef       	ldi	r23, 0xFF	; 255
    2184:	c6 c1       	rjmp	.+908    	; 0x2512 <vfprintf+0x3b0>
    2186:	9a e0       	ldi	r25, 0x0A	; 10
    2188:	89 2e       	mov	r8, r25
    218a:	1e 01       	movw	r2, r28
    218c:	08 94       	sec
    218e:	21 1c       	adc	r2, r1
    2190:	31 1c       	adc	r3, r1
    2192:	f3 01       	movw	r30, r6
    2194:	23 81       	ldd	r18, Z+3	; 0x03
    2196:	f2 01       	movw	r30, r4
    2198:	23 fd       	sbrc	r18, 3
    219a:	85 91       	lpm	r24, Z+
    219c:	23 ff       	sbrs	r18, 3
    219e:	81 91       	ld	r24, Z+
    21a0:	2f 01       	movw	r4, r30
    21a2:	88 23       	and	r24, r24
    21a4:	09 f4       	brne	.+2      	; 0x21a8 <vfprintf+0x46>
    21a6:	b2 c1       	rjmp	.+868    	; 0x250c <vfprintf+0x3aa>
    21a8:	85 32       	cpi	r24, 0x25	; 37
    21aa:	39 f4       	brne	.+14     	; 0x21ba <vfprintf+0x58>
    21ac:	23 fd       	sbrc	r18, 3
    21ae:	85 91       	lpm	r24, Z+
    21b0:	23 ff       	sbrs	r18, 3
    21b2:	81 91       	ld	r24, Z+
    21b4:	2f 01       	movw	r4, r30
    21b6:	85 32       	cpi	r24, 0x25	; 37
    21b8:	29 f4       	brne	.+10     	; 0x21c4 <vfprintf+0x62>
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	b3 01       	movw	r22, r6
    21be:	0e 94 a4 12 	call	0x2548	; 0x2548 <fputc>
    21c2:	e7 cf       	rjmp	.-50     	; 0x2192 <vfprintf+0x30>
    21c4:	98 2f       	mov	r25, r24
    21c6:	ff 24       	eor	r15, r15
    21c8:	ee 24       	eor	r14, r14
    21ca:	99 24       	eor	r9, r9
    21cc:	ff e1       	ldi	r31, 0x1F	; 31
    21ce:	ff 15       	cp	r31, r15
    21d0:	d0 f0       	brcs	.+52     	; 0x2206 <vfprintf+0xa4>
    21d2:	9b 32       	cpi	r25, 0x2B	; 43
    21d4:	69 f0       	breq	.+26     	; 0x21f0 <vfprintf+0x8e>
    21d6:	9c 32       	cpi	r25, 0x2C	; 44
    21d8:	28 f4       	brcc	.+10     	; 0x21e4 <vfprintf+0x82>
    21da:	90 32       	cpi	r25, 0x20	; 32
    21dc:	59 f0       	breq	.+22     	; 0x21f4 <vfprintf+0x92>
    21de:	93 32       	cpi	r25, 0x23	; 35
    21e0:	91 f4       	brne	.+36     	; 0x2206 <vfprintf+0xa4>
    21e2:	0e c0       	rjmp	.+28     	; 0x2200 <vfprintf+0x9e>
    21e4:	9d 32       	cpi	r25, 0x2D	; 45
    21e6:	49 f0       	breq	.+18     	; 0x21fa <vfprintf+0x98>
    21e8:	90 33       	cpi	r25, 0x30	; 48
    21ea:	69 f4       	brne	.+26     	; 0x2206 <vfprintf+0xa4>
    21ec:	41 e0       	ldi	r20, 0x01	; 1
    21ee:	24 c0       	rjmp	.+72     	; 0x2238 <vfprintf+0xd6>
    21f0:	52 e0       	ldi	r21, 0x02	; 2
    21f2:	f5 2a       	or	r15, r21
    21f4:	84 e0       	ldi	r24, 0x04	; 4
    21f6:	f8 2a       	or	r15, r24
    21f8:	28 c0       	rjmp	.+80     	; 0x224a <vfprintf+0xe8>
    21fa:	98 e0       	ldi	r25, 0x08	; 8
    21fc:	f9 2a       	or	r15, r25
    21fe:	25 c0       	rjmp	.+74     	; 0x224a <vfprintf+0xe8>
    2200:	e0 e1       	ldi	r30, 0x10	; 16
    2202:	fe 2a       	or	r15, r30
    2204:	22 c0       	rjmp	.+68     	; 0x224a <vfprintf+0xe8>
    2206:	f7 fc       	sbrc	r15, 7
    2208:	29 c0       	rjmp	.+82     	; 0x225c <vfprintf+0xfa>
    220a:	89 2f       	mov	r24, r25
    220c:	80 53       	subi	r24, 0x30	; 48
    220e:	8a 30       	cpi	r24, 0x0A	; 10
    2210:	70 f4       	brcc	.+28     	; 0x222e <vfprintf+0xcc>
    2212:	f6 fe       	sbrs	r15, 6
    2214:	05 c0       	rjmp	.+10     	; 0x2220 <vfprintf+0xbe>
    2216:	98 9c       	mul	r9, r8
    2218:	90 2c       	mov	r9, r0
    221a:	11 24       	eor	r1, r1
    221c:	98 0e       	add	r9, r24
    221e:	15 c0       	rjmp	.+42     	; 0x224a <vfprintf+0xe8>
    2220:	e8 9c       	mul	r14, r8
    2222:	e0 2c       	mov	r14, r0
    2224:	11 24       	eor	r1, r1
    2226:	e8 0e       	add	r14, r24
    2228:	f0 e2       	ldi	r31, 0x20	; 32
    222a:	ff 2a       	or	r15, r31
    222c:	0e c0       	rjmp	.+28     	; 0x224a <vfprintf+0xe8>
    222e:	9e 32       	cpi	r25, 0x2E	; 46
    2230:	29 f4       	brne	.+10     	; 0x223c <vfprintf+0xda>
    2232:	f6 fc       	sbrc	r15, 6
    2234:	6b c1       	rjmp	.+726    	; 0x250c <vfprintf+0x3aa>
    2236:	40 e4       	ldi	r20, 0x40	; 64
    2238:	f4 2a       	or	r15, r20
    223a:	07 c0       	rjmp	.+14     	; 0x224a <vfprintf+0xe8>
    223c:	9c 36       	cpi	r25, 0x6C	; 108
    223e:	19 f4       	brne	.+6      	; 0x2246 <vfprintf+0xe4>
    2240:	50 e8       	ldi	r21, 0x80	; 128
    2242:	f5 2a       	or	r15, r21
    2244:	02 c0       	rjmp	.+4      	; 0x224a <vfprintf+0xe8>
    2246:	98 36       	cpi	r25, 0x68	; 104
    2248:	49 f4       	brne	.+18     	; 0x225c <vfprintf+0xfa>
    224a:	f2 01       	movw	r30, r4
    224c:	23 fd       	sbrc	r18, 3
    224e:	95 91       	lpm	r25, Z+
    2250:	23 ff       	sbrs	r18, 3
    2252:	91 91       	ld	r25, Z+
    2254:	2f 01       	movw	r4, r30
    2256:	99 23       	and	r25, r25
    2258:	09 f0       	breq	.+2      	; 0x225c <vfprintf+0xfa>
    225a:	b8 cf       	rjmp	.-144    	; 0x21cc <vfprintf+0x6a>
    225c:	89 2f       	mov	r24, r25
    225e:	85 54       	subi	r24, 0x45	; 69
    2260:	83 30       	cpi	r24, 0x03	; 3
    2262:	18 f0       	brcs	.+6      	; 0x226a <vfprintf+0x108>
    2264:	80 52       	subi	r24, 0x20	; 32
    2266:	83 30       	cpi	r24, 0x03	; 3
    2268:	38 f4       	brcc	.+14     	; 0x2278 <vfprintf+0x116>
    226a:	44 e0       	ldi	r20, 0x04	; 4
    226c:	50 e0       	ldi	r21, 0x00	; 0
    226e:	a4 0e       	add	r10, r20
    2270:	b5 1e       	adc	r11, r21
    2272:	5f e3       	ldi	r21, 0x3F	; 63
    2274:	59 83       	std	Y+1, r21	; 0x01
    2276:	0f c0       	rjmp	.+30     	; 0x2296 <vfprintf+0x134>
    2278:	93 36       	cpi	r25, 0x63	; 99
    227a:	31 f0       	breq	.+12     	; 0x2288 <vfprintf+0x126>
    227c:	93 37       	cpi	r25, 0x73	; 115
    227e:	79 f0       	breq	.+30     	; 0x229e <vfprintf+0x13c>
    2280:	93 35       	cpi	r25, 0x53	; 83
    2282:	09 f0       	breq	.+2      	; 0x2286 <vfprintf+0x124>
    2284:	56 c0       	rjmp	.+172    	; 0x2332 <vfprintf+0x1d0>
    2286:	20 c0       	rjmp	.+64     	; 0x22c8 <vfprintf+0x166>
    2288:	f5 01       	movw	r30, r10
    228a:	80 81       	ld	r24, Z
    228c:	89 83       	std	Y+1, r24	; 0x01
    228e:	42 e0       	ldi	r20, 0x02	; 2
    2290:	50 e0       	ldi	r21, 0x00	; 0
    2292:	a4 0e       	add	r10, r20
    2294:	b5 1e       	adc	r11, r21
    2296:	61 01       	movw	r12, r2
    2298:	01 e0       	ldi	r16, 0x01	; 1
    229a:	10 e0       	ldi	r17, 0x00	; 0
    229c:	12 c0       	rjmp	.+36     	; 0x22c2 <vfprintf+0x160>
    229e:	f5 01       	movw	r30, r10
    22a0:	c0 80       	ld	r12, Z
    22a2:	d1 80       	ldd	r13, Z+1	; 0x01
    22a4:	f6 fc       	sbrc	r15, 6
    22a6:	03 c0       	rjmp	.+6      	; 0x22ae <vfprintf+0x14c>
    22a8:	6f ef       	ldi	r22, 0xFF	; 255
    22aa:	7f ef       	ldi	r23, 0xFF	; 255
    22ac:	02 c0       	rjmp	.+4      	; 0x22b2 <vfprintf+0x150>
    22ae:	69 2d       	mov	r22, r9
    22b0:	70 e0       	ldi	r23, 0x00	; 0
    22b2:	42 e0       	ldi	r20, 0x02	; 2
    22b4:	50 e0       	ldi	r21, 0x00	; 0
    22b6:	a4 0e       	add	r10, r20
    22b8:	b5 1e       	adc	r11, r21
    22ba:	c6 01       	movw	r24, r12
    22bc:	0e 94 99 12 	call	0x2532	; 0x2532 <strnlen>
    22c0:	8c 01       	movw	r16, r24
    22c2:	5f e7       	ldi	r21, 0x7F	; 127
    22c4:	f5 22       	and	r15, r21
    22c6:	14 c0       	rjmp	.+40     	; 0x22f0 <vfprintf+0x18e>
    22c8:	f5 01       	movw	r30, r10
    22ca:	c0 80       	ld	r12, Z
    22cc:	d1 80       	ldd	r13, Z+1	; 0x01
    22ce:	f6 fc       	sbrc	r15, 6
    22d0:	03 c0       	rjmp	.+6      	; 0x22d8 <vfprintf+0x176>
    22d2:	6f ef       	ldi	r22, 0xFF	; 255
    22d4:	7f ef       	ldi	r23, 0xFF	; 255
    22d6:	02 c0       	rjmp	.+4      	; 0x22dc <vfprintf+0x17a>
    22d8:	69 2d       	mov	r22, r9
    22da:	70 e0       	ldi	r23, 0x00	; 0
    22dc:	42 e0       	ldi	r20, 0x02	; 2
    22de:	50 e0       	ldi	r21, 0x00	; 0
    22e0:	a4 0e       	add	r10, r20
    22e2:	b5 1e       	adc	r11, r21
    22e4:	c6 01       	movw	r24, r12
    22e6:	0e 94 8e 12 	call	0x251c	; 0x251c <strnlen_P>
    22ea:	8c 01       	movw	r16, r24
    22ec:	50 e8       	ldi	r21, 0x80	; 128
    22ee:	f5 2a       	or	r15, r21
    22f0:	f3 fe       	sbrs	r15, 3
    22f2:	07 c0       	rjmp	.+14     	; 0x2302 <vfprintf+0x1a0>
    22f4:	1a c0       	rjmp	.+52     	; 0x232a <vfprintf+0x1c8>
    22f6:	80 e2       	ldi	r24, 0x20	; 32
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	b3 01       	movw	r22, r6
    22fc:	0e 94 a4 12 	call	0x2548	; 0x2548 <fputc>
    2300:	ea 94       	dec	r14
    2302:	8e 2d       	mov	r24, r14
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	08 17       	cp	r16, r24
    2308:	19 07       	cpc	r17, r25
    230a:	a8 f3       	brcs	.-22     	; 0x22f6 <vfprintf+0x194>
    230c:	0e c0       	rjmp	.+28     	; 0x232a <vfprintf+0x1c8>
    230e:	f6 01       	movw	r30, r12
    2310:	f7 fc       	sbrc	r15, 7
    2312:	85 91       	lpm	r24, Z+
    2314:	f7 fe       	sbrs	r15, 7
    2316:	81 91       	ld	r24, Z+
    2318:	6f 01       	movw	r12, r30
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	b3 01       	movw	r22, r6
    231e:	0e 94 a4 12 	call	0x2548	; 0x2548 <fputc>
    2322:	e1 10       	cpse	r14, r1
    2324:	ea 94       	dec	r14
    2326:	01 50       	subi	r16, 0x01	; 1
    2328:	10 40       	sbci	r17, 0x00	; 0
    232a:	01 15       	cp	r16, r1
    232c:	11 05       	cpc	r17, r1
    232e:	79 f7       	brne	.-34     	; 0x230e <vfprintf+0x1ac>
    2330:	ea c0       	rjmp	.+468    	; 0x2506 <vfprintf+0x3a4>
    2332:	94 36       	cpi	r25, 0x64	; 100
    2334:	11 f0       	breq	.+4      	; 0x233a <vfprintf+0x1d8>
    2336:	99 36       	cpi	r25, 0x69	; 105
    2338:	69 f5       	brne	.+90     	; 0x2394 <vfprintf+0x232>
    233a:	f7 fe       	sbrs	r15, 7
    233c:	08 c0       	rjmp	.+16     	; 0x234e <vfprintf+0x1ec>
    233e:	f5 01       	movw	r30, r10
    2340:	20 81       	ld	r18, Z
    2342:	31 81       	ldd	r19, Z+1	; 0x01
    2344:	42 81       	ldd	r20, Z+2	; 0x02
    2346:	53 81       	ldd	r21, Z+3	; 0x03
    2348:	84 e0       	ldi	r24, 0x04	; 4
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	0a c0       	rjmp	.+20     	; 0x2362 <vfprintf+0x200>
    234e:	f5 01       	movw	r30, r10
    2350:	80 81       	ld	r24, Z
    2352:	91 81       	ldd	r25, Z+1	; 0x01
    2354:	9c 01       	movw	r18, r24
    2356:	44 27       	eor	r20, r20
    2358:	37 fd       	sbrc	r19, 7
    235a:	40 95       	com	r20
    235c:	54 2f       	mov	r21, r20
    235e:	82 e0       	ldi	r24, 0x02	; 2
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	a8 0e       	add	r10, r24
    2364:	b9 1e       	adc	r11, r25
    2366:	9f e6       	ldi	r25, 0x6F	; 111
    2368:	f9 22       	and	r15, r25
    236a:	57 ff       	sbrs	r21, 7
    236c:	09 c0       	rjmp	.+18     	; 0x2380 <vfprintf+0x21e>
    236e:	50 95       	com	r21
    2370:	40 95       	com	r20
    2372:	30 95       	com	r19
    2374:	21 95       	neg	r18
    2376:	3f 4f       	sbci	r19, 0xFF	; 255
    2378:	4f 4f       	sbci	r20, 0xFF	; 255
    237a:	5f 4f       	sbci	r21, 0xFF	; 255
    237c:	e0 e8       	ldi	r30, 0x80	; 128
    237e:	fe 2a       	or	r15, r30
    2380:	ca 01       	movw	r24, r20
    2382:	b9 01       	movw	r22, r18
    2384:	a1 01       	movw	r20, r2
    2386:	2a e0       	ldi	r18, 0x0A	; 10
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__ultoa_invert>
    238e:	d8 2e       	mov	r13, r24
    2390:	d2 18       	sub	r13, r2
    2392:	40 c0       	rjmp	.+128    	; 0x2414 <vfprintf+0x2b2>
    2394:	95 37       	cpi	r25, 0x75	; 117
    2396:	29 f4       	brne	.+10     	; 0x23a2 <vfprintf+0x240>
    2398:	1f 2d       	mov	r17, r15
    239a:	1f 7e       	andi	r17, 0xEF	; 239
    239c:	2a e0       	ldi	r18, 0x0A	; 10
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	1d c0       	rjmp	.+58     	; 0x23dc <vfprintf+0x27a>
    23a2:	1f 2d       	mov	r17, r15
    23a4:	19 7f       	andi	r17, 0xF9	; 249
    23a6:	9f 36       	cpi	r25, 0x6F	; 111
    23a8:	61 f0       	breq	.+24     	; 0x23c2 <vfprintf+0x260>
    23aa:	90 37       	cpi	r25, 0x70	; 112
    23ac:	20 f4       	brcc	.+8      	; 0x23b6 <vfprintf+0x254>
    23ae:	98 35       	cpi	r25, 0x58	; 88
    23b0:	09 f0       	breq	.+2      	; 0x23b4 <vfprintf+0x252>
    23b2:	ac c0       	rjmp	.+344    	; 0x250c <vfprintf+0x3aa>
    23b4:	0f c0       	rjmp	.+30     	; 0x23d4 <vfprintf+0x272>
    23b6:	90 37       	cpi	r25, 0x70	; 112
    23b8:	39 f0       	breq	.+14     	; 0x23c8 <vfprintf+0x266>
    23ba:	98 37       	cpi	r25, 0x78	; 120
    23bc:	09 f0       	breq	.+2      	; 0x23c0 <vfprintf+0x25e>
    23be:	a6 c0       	rjmp	.+332    	; 0x250c <vfprintf+0x3aa>
    23c0:	04 c0       	rjmp	.+8      	; 0x23ca <vfprintf+0x268>
    23c2:	28 e0       	ldi	r18, 0x08	; 8
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	0a c0       	rjmp	.+20     	; 0x23dc <vfprintf+0x27a>
    23c8:	10 61       	ori	r17, 0x10	; 16
    23ca:	14 fd       	sbrc	r17, 4
    23cc:	14 60       	ori	r17, 0x04	; 4
    23ce:	20 e1       	ldi	r18, 0x10	; 16
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	04 c0       	rjmp	.+8      	; 0x23dc <vfprintf+0x27a>
    23d4:	14 fd       	sbrc	r17, 4
    23d6:	16 60       	ori	r17, 0x06	; 6
    23d8:	20 e1       	ldi	r18, 0x10	; 16
    23da:	32 e0       	ldi	r19, 0x02	; 2
    23dc:	17 ff       	sbrs	r17, 7
    23de:	08 c0       	rjmp	.+16     	; 0x23f0 <vfprintf+0x28e>
    23e0:	f5 01       	movw	r30, r10
    23e2:	60 81       	ld	r22, Z
    23e4:	71 81       	ldd	r23, Z+1	; 0x01
    23e6:	82 81       	ldd	r24, Z+2	; 0x02
    23e8:	93 81       	ldd	r25, Z+3	; 0x03
    23ea:	44 e0       	ldi	r20, 0x04	; 4
    23ec:	50 e0       	ldi	r21, 0x00	; 0
    23ee:	08 c0       	rjmp	.+16     	; 0x2400 <vfprintf+0x29e>
    23f0:	f5 01       	movw	r30, r10
    23f2:	80 81       	ld	r24, Z
    23f4:	91 81       	ldd	r25, Z+1	; 0x01
    23f6:	bc 01       	movw	r22, r24
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	42 e0       	ldi	r20, 0x02	; 2
    23fe:	50 e0       	ldi	r21, 0x00	; 0
    2400:	a4 0e       	add	r10, r20
    2402:	b5 1e       	adc	r11, r21
    2404:	a1 01       	movw	r20, r2
    2406:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__ultoa_invert>
    240a:	d8 2e       	mov	r13, r24
    240c:	d2 18       	sub	r13, r2
    240e:	8f e7       	ldi	r24, 0x7F	; 127
    2410:	f8 2e       	mov	r15, r24
    2412:	f1 22       	and	r15, r17
    2414:	f6 fe       	sbrs	r15, 6
    2416:	0b c0       	rjmp	.+22     	; 0x242e <vfprintf+0x2cc>
    2418:	5e ef       	ldi	r21, 0xFE	; 254
    241a:	f5 22       	and	r15, r21
    241c:	d9 14       	cp	r13, r9
    241e:	38 f4       	brcc	.+14     	; 0x242e <vfprintf+0x2cc>
    2420:	f4 fe       	sbrs	r15, 4
    2422:	07 c0       	rjmp	.+14     	; 0x2432 <vfprintf+0x2d0>
    2424:	f2 fc       	sbrc	r15, 2
    2426:	05 c0       	rjmp	.+10     	; 0x2432 <vfprintf+0x2d0>
    2428:	8f ee       	ldi	r24, 0xEF	; 239
    242a:	f8 22       	and	r15, r24
    242c:	02 c0       	rjmp	.+4      	; 0x2432 <vfprintf+0x2d0>
    242e:	1d 2d       	mov	r17, r13
    2430:	01 c0       	rjmp	.+2      	; 0x2434 <vfprintf+0x2d2>
    2432:	19 2d       	mov	r17, r9
    2434:	f4 fe       	sbrs	r15, 4
    2436:	0d c0       	rjmp	.+26     	; 0x2452 <vfprintf+0x2f0>
    2438:	fe 01       	movw	r30, r28
    243a:	ed 0d       	add	r30, r13
    243c:	f1 1d       	adc	r31, r1
    243e:	80 81       	ld	r24, Z
    2440:	80 33       	cpi	r24, 0x30	; 48
    2442:	19 f4       	brne	.+6      	; 0x244a <vfprintf+0x2e8>
    2444:	99 ee       	ldi	r25, 0xE9	; 233
    2446:	f9 22       	and	r15, r25
    2448:	08 c0       	rjmp	.+16     	; 0x245a <vfprintf+0x2f8>
    244a:	1f 5f       	subi	r17, 0xFF	; 255
    244c:	f2 fe       	sbrs	r15, 2
    244e:	05 c0       	rjmp	.+10     	; 0x245a <vfprintf+0x2f8>
    2450:	03 c0       	rjmp	.+6      	; 0x2458 <vfprintf+0x2f6>
    2452:	8f 2d       	mov	r24, r15
    2454:	86 78       	andi	r24, 0x86	; 134
    2456:	09 f0       	breq	.+2      	; 0x245a <vfprintf+0x2f8>
    2458:	1f 5f       	subi	r17, 0xFF	; 255
    245a:	0f 2d       	mov	r16, r15
    245c:	f3 fc       	sbrc	r15, 3
    245e:	14 c0       	rjmp	.+40     	; 0x2488 <vfprintf+0x326>
    2460:	f0 fe       	sbrs	r15, 0
    2462:	0f c0       	rjmp	.+30     	; 0x2482 <vfprintf+0x320>
    2464:	1e 15       	cp	r17, r14
    2466:	10 f0       	brcs	.+4      	; 0x246c <vfprintf+0x30a>
    2468:	9d 2c       	mov	r9, r13
    246a:	0b c0       	rjmp	.+22     	; 0x2482 <vfprintf+0x320>
    246c:	9d 2c       	mov	r9, r13
    246e:	9e 0c       	add	r9, r14
    2470:	91 1a       	sub	r9, r17
    2472:	1e 2d       	mov	r17, r14
    2474:	06 c0       	rjmp	.+12     	; 0x2482 <vfprintf+0x320>
    2476:	80 e2       	ldi	r24, 0x20	; 32
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	b3 01       	movw	r22, r6
    247c:	0e 94 a4 12 	call	0x2548	; 0x2548 <fputc>
    2480:	1f 5f       	subi	r17, 0xFF	; 255
    2482:	1e 15       	cp	r17, r14
    2484:	c0 f3       	brcs	.-16     	; 0x2476 <vfprintf+0x314>
    2486:	04 c0       	rjmp	.+8      	; 0x2490 <vfprintf+0x32e>
    2488:	1e 15       	cp	r17, r14
    248a:	10 f4       	brcc	.+4      	; 0x2490 <vfprintf+0x32e>
    248c:	e1 1a       	sub	r14, r17
    248e:	01 c0       	rjmp	.+2      	; 0x2492 <vfprintf+0x330>
    2490:	ee 24       	eor	r14, r14
    2492:	04 ff       	sbrs	r16, 4
    2494:	0f c0       	rjmp	.+30     	; 0x24b4 <vfprintf+0x352>
    2496:	80 e3       	ldi	r24, 0x30	; 48
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	b3 01       	movw	r22, r6
    249c:	0e 94 a4 12 	call	0x2548	; 0x2548 <fputc>
    24a0:	02 ff       	sbrs	r16, 2
    24a2:	1d c0       	rjmp	.+58     	; 0x24de <vfprintf+0x37c>
    24a4:	01 fd       	sbrc	r16, 1
    24a6:	03 c0       	rjmp	.+6      	; 0x24ae <vfprintf+0x34c>
    24a8:	88 e7       	ldi	r24, 0x78	; 120
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	0e c0       	rjmp	.+28     	; 0x24ca <vfprintf+0x368>
    24ae:	88 e5       	ldi	r24, 0x58	; 88
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	0b c0       	rjmp	.+22     	; 0x24ca <vfprintf+0x368>
    24b4:	80 2f       	mov	r24, r16
    24b6:	86 78       	andi	r24, 0x86	; 134
    24b8:	91 f0       	breq	.+36     	; 0x24de <vfprintf+0x37c>
    24ba:	01 ff       	sbrs	r16, 1
    24bc:	02 c0       	rjmp	.+4      	; 0x24c2 <vfprintf+0x360>
    24be:	8b e2       	ldi	r24, 0x2B	; 43
    24c0:	01 c0       	rjmp	.+2      	; 0x24c4 <vfprintf+0x362>
    24c2:	80 e2       	ldi	r24, 0x20	; 32
    24c4:	f7 fc       	sbrc	r15, 7
    24c6:	8d e2       	ldi	r24, 0x2D	; 45
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	b3 01       	movw	r22, r6
    24cc:	0e 94 a4 12 	call	0x2548	; 0x2548 <fputc>
    24d0:	06 c0       	rjmp	.+12     	; 0x24de <vfprintf+0x37c>
    24d2:	80 e3       	ldi	r24, 0x30	; 48
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	b3 01       	movw	r22, r6
    24d8:	0e 94 a4 12 	call	0x2548	; 0x2548 <fputc>
    24dc:	9a 94       	dec	r9
    24de:	d9 14       	cp	r13, r9
    24e0:	c0 f3       	brcs	.-16     	; 0x24d2 <vfprintf+0x370>
    24e2:	da 94       	dec	r13
    24e4:	f1 01       	movw	r30, r2
    24e6:	ed 0d       	add	r30, r13
    24e8:	f1 1d       	adc	r31, r1
    24ea:	80 81       	ld	r24, Z
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	b3 01       	movw	r22, r6
    24f0:	0e 94 a4 12 	call	0x2548	; 0x2548 <fputc>
    24f4:	dd 20       	and	r13, r13
    24f6:	a9 f7       	brne	.-22     	; 0x24e2 <vfprintf+0x380>
    24f8:	06 c0       	rjmp	.+12     	; 0x2506 <vfprintf+0x3a4>
    24fa:	80 e2       	ldi	r24, 0x20	; 32
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	b3 01       	movw	r22, r6
    2500:	0e 94 a4 12 	call	0x2548	; 0x2548 <fputc>
    2504:	ea 94       	dec	r14
    2506:	ee 20       	and	r14, r14
    2508:	c1 f7       	brne	.-16     	; 0x24fa <vfprintf+0x398>
    250a:	43 ce       	rjmp	.-890    	; 0x2192 <vfprintf+0x30>
    250c:	f3 01       	movw	r30, r6
    250e:	66 81       	ldd	r22, Z+6	; 0x06
    2510:	77 81       	ldd	r23, Z+7	; 0x07
    2512:	cb 01       	movw	r24, r22
    2514:	2b 96       	adiw	r28, 0x0b	; 11
    2516:	e2 e1       	ldi	r30, 0x12	; 18
    2518:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__epilogue_restores__>

0000251c <strnlen_P>:
    251c:	fc 01       	movw	r30, r24
    251e:	05 90       	lpm	r0, Z+
    2520:	61 50       	subi	r22, 0x01	; 1
    2522:	70 40       	sbci	r23, 0x00	; 0
    2524:	01 10       	cpse	r0, r1
    2526:	d8 f7       	brcc	.-10     	; 0x251e <strnlen_P+0x2>
    2528:	80 95       	com	r24
    252a:	90 95       	com	r25
    252c:	8e 0f       	add	r24, r30
    252e:	9f 1f       	adc	r25, r31
    2530:	08 95       	ret

00002532 <strnlen>:
    2532:	fc 01       	movw	r30, r24
    2534:	61 50       	subi	r22, 0x01	; 1
    2536:	70 40       	sbci	r23, 0x00	; 0
    2538:	01 90       	ld	r0, Z+
    253a:	01 10       	cpse	r0, r1
    253c:	d8 f7       	brcc	.-10     	; 0x2534 <strnlen+0x2>
    253e:	80 95       	com	r24
    2540:	90 95       	com	r25
    2542:	8e 0f       	add	r24, r30
    2544:	9f 1f       	adc	r25, r31
    2546:	08 95       	ret

00002548 <fputc>:
    2548:	0f 93       	push	r16
    254a:	1f 93       	push	r17
    254c:	cf 93       	push	r28
    254e:	df 93       	push	r29
    2550:	8c 01       	movw	r16, r24
    2552:	eb 01       	movw	r28, r22
    2554:	8b 81       	ldd	r24, Y+3	; 0x03
    2556:	81 ff       	sbrs	r24, 1
    2558:	1b c0       	rjmp	.+54     	; 0x2590 <fputc+0x48>
    255a:	82 ff       	sbrs	r24, 2
    255c:	0d c0       	rjmp	.+26     	; 0x2578 <fputc+0x30>
    255e:	2e 81       	ldd	r18, Y+6	; 0x06
    2560:	3f 81       	ldd	r19, Y+7	; 0x07
    2562:	8c 81       	ldd	r24, Y+4	; 0x04
    2564:	9d 81       	ldd	r25, Y+5	; 0x05
    2566:	28 17       	cp	r18, r24
    2568:	39 07       	cpc	r19, r25
    256a:	64 f4       	brge	.+24     	; 0x2584 <fputc+0x3c>
    256c:	e8 81       	ld	r30, Y
    256e:	f9 81       	ldd	r31, Y+1	; 0x01
    2570:	01 93       	st	Z+, r16
    2572:	f9 83       	std	Y+1, r31	; 0x01
    2574:	e8 83       	st	Y, r30
    2576:	06 c0       	rjmp	.+12     	; 0x2584 <fputc+0x3c>
    2578:	e8 85       	ldd	r30, Y+8	; 0x08
    257a:	f9 85       	ldd	r31, Y+9	; 0x09
    257c:	80 2f       	mov	r24, r16
    257e:	09 95       	icall
    2580:	89 2b       	or	r24, r25
    2582:	31 f4       	brne	.+12     	; 0x2590 <fputc+0x48>
    2584:	8e 81       	ldd	r24, Y+6	; 0x06
    2586:	9f 81       	ldd	r25, Y+7	; 0x07
    2588:	01 96       	adiw	r24, 0x01	; 1
    258a:	9f 83       	std	Y+7, r25	; 0x07
    258c:	8e 83       	std	Y+6, r24	; 0x06
    258e:	02 c0       	rjmp	.+4      	; 0x2594 <fputc+0x4c>
    2590:	0f ef       	ldi	r16, 0xFF	; 255
    2592:	1f ef       	ldi	r17, 0xFF	; 255
    2594:	c8 01       	movw	r24, r16
    2596:	df 91       	pop	r29
    2598:	cf 91       	pop	r28
    259a:	1f 91       	pop	r17
    259c:	0f 91       	pop	r16
    259e:	08 95       	ret

000025a0 <__ultoa_invert>:
    25a0:	fa 01       	movw	r30, r20
    25a2:	aa 27       	eor	r26, r26
    25a4:	28 30       	cpi	r18, 0x08	; 8
    25a6:	51 f1       	breq	.+84     	; 0x25fc <__ultoa_invert+0x5c>
    25a8:	20 31       	cpi	r18, 0x10	; 16
    25aa:	81 f1       	breq	.+96     	; 0x260c <__ultoa_invert+0x6c>
    25ac:	e8 94       	clt
    25ae:	6f 93       	push	r22
    25b0:	6e 7f       	andi	r22, 0xFE	; 254
    25b2:	6e 5f       	subi	r22, 0xFE	; 254
    25b4:	7f 4f       	sbci	r23, 0xFF	; 255
    25b6:	8f 4f       	sbci	r24, 0xFF	; 255
    25b8:	9f 4f       	sbci	r25, 0xFF	; 255
    25ba:	af 4f       	sbci	r26, 0xFF	; 255
    25bc:	b1 e0       	ldi	r27, 0x01	; 1
    25be:	3e d0       	rcall	.+124    	; 0x263c <__ultoa_invert+0x9c>
    25c0:	b4 e0       	ldi	r27, 0x04	; 4
    25c2:	3c d0       	rcall	.+120    	; 0x263c <__ultoa_invert+0x9c>
    25c4:	67 0f       	add	r22, r23
    25c6:	78 1f       	adc	r23, r24
    25c8:	89 1f       	adc	r24, r25
    25ca:	9a 1f       	adc	r25, r26
    25cc:	a1 1d       	adc	r26, r1
    25ce:	68 0f       	add	r22, r24
    25d0:	79 1f       	adc	r23, r25
    25d2:	8a 1f       	adc	r24, r26
    25d4:	91 1d       	adc	r25, r1
    25d6:	a1 1d       	adc	r26, r1
    25d8:	6a 0f       	add	r22, r26
    25da:	71 1d       	adc	r23, r1
    25dc:	81 1d       	adc	r24, r1
    25de:	91 1d       	adc	r25, r1
    25e0:	a1 1d       	adc	r26, r1
    25e2:	20 d0       	rcall	.+64     	; 0x2624 <__ultoa_invert+0x84>
    25e4:	09 f4       	brne	.+2      	; 0x25e8 <__ultoa_invert+0x48>
    25e6:	68 94       	set
    25e8:	3f 91       	pop	r19
    25ea:	2a e0       	ldi	r18, 0x0A	; 10
    25ec:	26 9f       	mul	r18, r22
    25ee:	11 24       	eor	r1, r1
    25f0:	30 19       	sub	r19, r0
    25f2:	30 5d       	subi	r19, 0xD0	; 208
    25f4:	31 93       	st	Z+, r19
    25f6:	de f6       	brtc	.-74     	; 0x25ae <__ultoa_invert+0xe>
    25f8:	cf 01       	movw	r24, r30
    25fa:	08 95       	ret
    25fc:	46 2f       	mov	r20, r22
    25fe:	47 70       	andi	r20, 0x07	; 7
    2600:	40 5d       	subi	r20, 0xD0	; 208
    2602:	41 93       	st	Z+, r20
    2604:	b3 e0       	ldi	r27, 0x03	; 3
    2606:	0f d0       	rcall	.+30     	; 0x2626 <__ultoa_invert+0x86>
    2608:	c9 f7       	brne	.-14     	; 0x25fc <__ultoa_invert+0x5c>
    260a:	f6 cf       	rjmp	.-20     	; 0x25f8 <__ultoa_invert+0x58>
    260c:	46 2f       	mov	r20, r22
    260e:	4f 70       	andi	r20, 0x0F	; 15
    2610:	40 5d       	subi	r20, 0xD0	; 208
    2612:	4a 33       	cpi	r20, 0x3A	; 58
    2614:	18 f0       	brcs	.+6      	; 0x261c <__ultoa_invert+0x7c>
    2616:	49 5d       	subi	r20, 0xD9	; 217
    2618:	31 fd       	sbrc	r19, 1
    261a:	40 52       	subi	r20, 0x20	; 32
    261c:	41 93       	st	Z+, r20
    261e:	02 d0       	rcall	.+4      	; 0x2624 <__ultoa_invert+0x84>
    2620:	a9 f7       	brne	.-22     	; 0x260c <__ultoa_invert+0x6c>
    2622:	ea cf       	rjmp	.-44     	; 0x25f8 <__ultoa_invert+0x58>
    2624:	b4 e0       	ldi	r27, 0x04	; 4
    2626:	a6 95       	lsr	r26
    2628:	97 95       	ror	r25
    262a:	87 95       	ror	r24
    262c:	77 95       	ror	r23
    262e:	67 95       	ror	r22
    2630:	ba 95       	dec	r27
    2632:	c9 f7       	brne	.-14     	; 0x2626 <__ultoa_invert+0x86>
    2634:	00 97       	sbiw	r24, 0x00	; 0
    2636:	61 05       	cpc	r22, r1
    2638:	71 05       	cpc	r23, r1
    263a:	08 95       	ret
    263c:	9b 01       	movw	r18, r22
    263e:	ac 01       	movw	r20, r24
    2640:	0a 2e       	mov	r0, r26
    2642:	06 94       	lsr	r0
    2644:	57 95       	ror	r21
    2646:	47 95       	ror	r20
    2648:	37 95       	ror	r19
    264a:	27 95       	ror	r18
    264c:	ba 95       	dec	r27
    264e:	c9 f7       	brne	.-14     	; 0x2642 <__ultoa_invert+0xa2>
    2650:	62 0f       	add	r22, r18
    2652:	73 1f       	adc	r23, r19
    2654:	84 1f       	adc	r24, r20
    2656:	95 1f       	adc	r25, r21
    2658:	a0 1d       	adc	r26, r0
    265a:	08 95       	ret

0000265c <_exit>:
    265c:	f8 94       	cli

0000265e <__stop_program>:
    265e:	ff cf       	rjmp	.-2      	; 0x265e <__stop_program>
