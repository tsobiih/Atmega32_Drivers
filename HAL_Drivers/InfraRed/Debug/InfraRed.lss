
InfraRed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000938  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000e7c  00000000  00000000  0000098c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000daf  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 88 04 	call	0x910	; 0x910 <main>
  64:	0c 94 9a 04 	jmp	0x934	; 0x934 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidSetPinDirection>:

#include "DIO_interface.h"
#include "DIO_register.h"

void DIO_voidSetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	27 97       	sbiw	r28, 0x07	; 7
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	89 83       	std	Y+1, r24	; 0x01
  82:	6a 83       	std	Y+2, r22	; 0x02
  84:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Direction == DIO_u8INPUT)
  86:	8b 81       	ldd	r24, Y+3	; 0x03
  88:	88 23       	and	r24, r24
  8a:	09 f0       	breq	.+2      	; 0x8e <DIO_voidSetPinDirection+0x22>
  8c:	74 c0       	rjmp	.+232    	; 0x176 <DIO_voidSetPinDirection+0x10a>
	{
		switch(Copy_u8Port)
  8e:	89 81       	ldd	r24, Y+1	; 0x01
  90:	28 2f       	mov	r18, r24
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	3f 83       	std	Y+7, r19	; 0x07
  96:	2e 83       	std	Y+6, r18	; 0x06
  98:	8e 81       	ldd	r24, Y+6	; 0x06
  9a:	9f 81       	ldd	r25, Y+7	; 0x07
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	91 05       	cpc	r25, r1
  a0:	59 f1       	breq	.+86     	; 0xf8 <DIO_voidSetPinDirection+0x8c>
  a2:	2e 81       	ldd	r18, Y+6	; 0x06
  a4:	3f 81       	ldd	r19, Y+7	; 0x07
  a6:	22 30       	cpi	r18, 0x02	; 2
  a8:	31 05       	cpc	r19, r1
  aa:	2c f4       	brge	.+10     	; 0xb6 <DIO_voidSetPinDirection+0x4a>
  ac:	8e 81       	ldd	r24, Y+6	; 0x06
  ae:	9f 81       	ldd	r25, Y+7	; 0x07
  b0:	00 97       	sbiw	r24, 0x00	; 0
  b2:	69 f0       	breq	.+26     	; 0xce <DIO_voidSetPinDirection+0x62>
  b4:	d2 c0       	rjmp	.+420    	; 0x25a <DIO_voidSetPinDirection+0x1ee>
  b6:	2e 81       	ldd	r18, Y+6	; 0x06
  b8:	3f 81       	ldd	r19, Y+7	; 0x07
  ba:	22 30       	cpi	r18, 0x02	; 2
  bc:	31 05       	cpc	r19, r1
  be:	89 f1       	breq	.+98     	; 0x122 <DIO_voidSetPinDirection+0xb6>
  c0:	8e 81       	ldd	r24, Y+6	; 0x06
  c2:	9f 81       	ldd	r25, Y+7	; 0x07
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	91 05       	cpc	r25, r1
  c8:	09 f4       	brne	.+2      	; 0xcc <DIO_voidSetPinDirection+0x60>
  ca:	40 c0       	rjmp	.+128    	; 0x14c <DIO_voidSetPinDirection+0xe0>
  cc:	c6 c0       	rjmp	.+396    	; 0x25a <DIO_voidSetPinDirection+0x1ee>
		{
		case DIO_u8PORTA : CLR_BIT(DDRA , Copy_u8Pin); break; 
  ce:	aa e3       	ldi	r26, 0x3A	; 58
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	ea e3       	ldi	r30, 0x3A	; 58
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	48 2f       	mov	r20, r24
  da:	8a 81       	ldd	r24, Y+2	; 0x02
  dc:	28 2f       	mov	r18, r24
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 2e       	mov	r0, r18
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_voidSetPinDirection+0x80>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_voidSetPinDirection+0x7c>
  f0:	80 95       	com	r24
  f2:	84 23       	and	r24, r20
  f4:	8c 93       	st	X, r24
  f6:	b1 c0       	rjmp	.+354    	; 0x25a <DIO_voidSetPinDirection+0x1ee>
		case DIO_u8PORTB : CLR_BIT(DDRB , Copy_u8Pin); break;
  f8:	a7 e3       	ldi	r26, 0x37	; 55
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	e7 e3       	ldi	r30, 0x37	; 55
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	48 2f       	mov	r20, r24
 104:	8a 81       	ldd	r24, Y+2	; 0x02
 106:	28 2f       	mov	r18, r24
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 2e       	mov	r0, r18
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_voidSetPinDirection+0xaa>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	0a 94       	dec	r0
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_voidSetPinDirection+0xa6>
 11a:	80 95       	com	r24
 11c:	84 23       	and	r24, r20
 11e:	8c 93       	st	X, r24
 120:	9c c0       	rjmp	.+312    	; 0x25a <DIO_voidSetPinDirection+0x1ee>
		case DIO_u8PORTC : CLR_BIT(DDRC , Copy_u8Pin); break;
 122:	a4 e3       	ldi	r26, 0x34	; 52
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	e4 e3       	ldi	r30, 0x34	; 52
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	48 2f       	mov	r20, r24
 12e:	8a 81       	ldd	r24, Y+2	; 0x02
 130:	28 2f       	mov	r18, r24
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 2e       	mov	r0, r18
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_voidSetPinDirection+0xd4>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	0a 94       	dec	r0
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_voidSetPinDirection+0xd0>
 144:	80 95       	com	r24
 146:	84 23       	and	r24, r20
 148:	8c 93       	st	X, r24
 14a:	87 c0       	rjmp	.+270    	; 0x25a <DIO_voidSetPinDirection+0x1ee>
		case DIO_u8PORTD : CLR_BIT(DDRD , Copy_u8Pin); break;
 14c:	a1 e3       	ldi	r26, 0x31	; 49
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	e1 e3       	ldi	r30, 0x31	; 49
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	48 2f       	mov	r20, r24
 158:	8a 81       	ldd	r24, Y+2	; 0x02
 15a:	28 2f       	mov	r18, r24
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 2e       	mov	r0, r18
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_voidSetPinDirection+0xfe>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	0a 94       	dec	r0
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_voidSetPinDirection+0xfa>
 16e:	80 95       	com	r24
 170:	84 23       	and	r24, r20
 172:	8c 93       	st	X, r24
 174:	72 c0       	rjmp	.+228    	; 0x25a <DIO_voidSetPinDirection+0x1ee>
		}
	}
	else if(Copy_u8Direction == DIO_u8OUTPUT)
 176:	8b 81       	ldd	r24, Y+3	; 0x03
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	09 f0       	breq	.+2      	; 0x17e <DIO_voidSetPinDirection+0x112>
 17c:	6e c0       	rjmp	.+220    	; 0x25a <DIO_voidSetPinDirection+0x1ee>
	{
		switch(Copy_u8Port)
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	28 2f       	mov	r18, r24
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	3d 83       	std	Y+5, r19	; 0x05
 186:	2c 83       	std	Y+4, r18	; 0x04
 188:	8c 81       	ldd	r24, Y+4	; 0x04
 18a:	9d 81       	ldd	r25, Y+5	; 0x05
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	91 05       	cpc	r25, r1
 190:	49 f1       	breq	.+82     	; 0x1e4 <DIO_voidSetPinDirection+0x178>
 192:	2c 81       	ldd	r18, Y+4	; 0x04
 194:	3d 81       	ldd	r19, Y+5	; 0x05
 196:	22 30       	cpi	r18, 0x02	; 2
 198:	31 05       	cpc	r19, r1
 19a:	2c f4       	brge	.+10     	; 0x1a6 <DIO_voidSetPinDirection+0x13a>
 19c:	8c 81       	ldd	r24, Y+4	; 0x04
 19e:	9d 81       	ldd	r25, Y+5	; 0x05
 1a0:	00 97       	sbiw	r24, 0x00	; 0
 1a2:	61 f0       	breq	.+24     	; 0x1bc <DIO_voidSetPinDirection+0x150>
 1a4:	5a c0       	rjmp	.+180    	; 0x25a <DIO_voidSetPinDirection+0x1ee>
 1a6:	2c 81       	ldd	r18, Y+4	; 0x04
 1a8:	3d 81       	ldd	r19, Y+5	; 0x05
 1aa:	22 30       	cpi	r18, 0x02	; 2
 1ac:	31 05       	cpc	r19, r1
 1ae:	71 f1       	breq	.+92     	; 0x20c <DIO_voidSetPinDirection+0x1a0>
 1b0:	8c 81       	ldd	r24, Y+4	; 0x04
 1b2:	9d 81       	ldd	r25, Y+5	; 0x05
 1b4:	83 30       	cpi	r24, 0x03	; 3
 1b6:	91 05       	cpc	r25, r1
 1b8:	e9 f1       	breq	.+122    	; 0x234 <DIO_voidSetPinDirection+0x1c8>
 1ba:	4f c0       	rjmp	.+158    	; 0x25a <DIO_voidSetPinDirection+0x1ee>
		{
		case DIO_u8PORTA : SET_BIT(DDRA , Copy_u8Pin); break;
 1bc:	aa e3       	ldi	r26, 0x3A	; 58
 1be:	b0 e0       	ldi	r27, 0x00	; 0
 1c0:	ea e3       	ldi	r30, 0x3A	; 58
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	48 2f       	mov	r20, r24
 1c8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ca:	28 2f       	mov	r18, r24
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 2e       	mov	r0, r18
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_voidSetPinDirection+0x16e>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	0a 94       	dec	r0
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_voidSetPinDirection+0x16a>
 1de:	84 2b       	or	r24, r20
 1e0:	8c 93       	st	X, r24
 1e2:	3b c0       	rjmp	.+118    	; 0x25a <DIO_voidSetPinDirection+0x1ee>
		case DIO_u8PORTB : SET_BIT(DDRB , Copy_u8Pin); break;
 1e4:	a7 e3       	ldi	r26, 0x37	; 55
 1e6:	b0 e0       	ldi	r27, 0x00	; 0
 1e8:	e7 e3       	ldi	r30, 0x37	; 55
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	48 2f       	mov	r20, r24
 1f0:	8a 81       	ldd	r24, Y+2	; 0x02
 1f2:	28 2f       	mov	r18, r24
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 2e       	mov	r0, r18
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_voidSetPinDirection+0x196>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	0a 94       	dec	r0
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_voidSetPinDirection+0x192>
 206:	84 2b       	or	r24, r20
 208:	8c 93       	st	X, r24
 20a:	27 c0       	rjmp	.+78     	; 0x25a <DIO_voidSetPinDirection+0x1ee>
		case DIO_u8PORTC : SET_BIT(DDRC , Copy_u8Pin); break;
 20c:	a4 e3       	ldi	r26, 0x34	; 52
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	e4 e3       	ldi	r30, 0x34	; 52
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	48 2f       	mov	r20, r24
 218:	8a 81       	ldd	r24, Y+2	; 0x02
 21a:	28 2f       	mov	r18, r24
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 2e       	mov	r0, r18
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_voidSetPinDirection+0x1be>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	0a 94       	dec	r0
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_voidSetPinDirection+0x1ba>
 22e:	84 2b       	or	r24, r20
 230:	8c 93       	st	X, r24
 232:	13 c0       	rjmp	.+38     	; 0x25a <DIO_voidSetPinDirection+0x1ee>
		case DIO_u8PORTD : SET_BIT(DDRD , Copy_u8Pin); break;
 234:	a1 e3       	ldi	r26, 0x31	; 49
 236:	b0 e0       	ldi	r27, 0x00	; 0
 238:	e1 e3       	ldi	r30, 0x31	; 49
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	48 2f       	mov	r20, r24
 240:	8a 81       	ldd	r24, Y+2	; 0x02
 242:	28 2f       	mov	r18, r24
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 2e       	mov	r0, r18
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_voidSetPinDirection+0x1e6>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	0a 94       	dec	r0
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_voidSetPinDirection+0x1e2>
 256:	84 2b       	or	r24, r20
 258:	8c 93       	st	X, r24
		}
	}
}
 25a:	27 96       	adiw	r28, 0x07	; 7
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	f8 94       	cli
 260:	de bf       	out	0x3e, r29	; 62
 262:	0f be       	out	0x3f, r0	; 63
 264:	cd bf       	out	0x3d, r28	; 61
 266:	cf 91       	pop	r28
 268:	df 91       	pop	r29
 26a:	08 95       	ret

0000026c <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
 26c:	df 93       	push	r29
 26e:	cf 93       	push	r28
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	27 97       	sbiw	r28, 0x07	; 7
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	f8 94       	cli
 27a:	de bf       	out	0x3e, r29	; 62
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	cd bf       	out	0x3d, r28	; 61
 280:	89 83       	std	Y+1, r24	; 0x01
 282:	6a 83       	std	Y+2, r22	; 0x02
 284:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8Value == DIO_u8LOW)
 286:	8b 81       	ldd	r24, Y+3	; 0x03
 288:	88 23       	and	r24, r24
 28a:	09 f0       	breq	.+2      	; 0x28e <DIO_voidSetPinValue+0x22>
 28c:	74 c0       	rjmp	.+232    	; 0x376 <DIO_voidSetPinValue+0x10a>
	{
		switch (Copy_u8Port)
 28e:	89 81       	ldd	r24, Y+1	; 0x01
 290:	28 2f       	mov	r18, r24
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	3f 83       	std	Y+7, r19	; 0x07
 296:	2e 83       	std	Y+6, r18	; 0x06
 298:	8e 81       	ldd	r24, Y+6	; 0x06
 29a:	9f 81       	ldd	r25, Y+7	; 0x07
 29c:	81 30       	cpi	r24, 0x01	; 1
 29e:	91 05       	cpc	r25, r1
 2a0:	59 f1       	breq	.+86     	; 0x2f8 <DIO_voidSetPinValue+0x8c>
 2a2:	2e 81       	ldd	r18, Y+6	; 0x06
 2a4:	3f 81       	ldd	r19, Y+7	; 0x07
 2a6:	22 30       	cpi	r18, 0x02	; 2
 2a8:	31 05       	cpc	r19, r1
 2aa:	2c f4       	brge	.+10     	; 0x2b6 <DIO_voidSetPinValue+0x4a>
 2ac:	8e 81       	ldd	r24, Y+6	; 0x06
 2ae:	9f 81       	ldd	r25, Y+7	; 0x07
 2b0:	00 97       	sbiw	r24, 0x00	; 0
 2b2:	69 f0       	breq	.+26     	; 0x2ce <DIO_voidSetPinValue+0x62>
 2b4:	d2 c0       	rjmp	.+420    	; 0x45a <DIO_voidSetPinValue+0x1ee>
 2b6:	2e 81       	ldd	r18, Y+6	; 0x06
 2b8:	3f 81       	ldd	r19, Y+7	; 0x07
 2ba:	22 30       	cpi	r18, 0x02	; 2
 2bc:	31 05       	cpc	r19, r1
 2be:	89 f1       	breq	.+98     	; 0x322 <DIO_voidSetPinValue+0xb6>
 2c0:	8e 81       	ldd	r24, Y+6	; 0x06
 2c2:	9f 81       	ldd	r25, Y+7	; 0x07
 2c4:	83 30       	cpi	r24, 0x03	; 3
 2c6:	91 05       	cpc	r25, r1
 2c8:	09 f4       	brne	.+2      	; 0x2cc <DIO_voidSetPinValue+0x60>
 2ca:	40 c0       	rjmp	.+128    	; 0x34c <DIO_voidSetPinValue+0xe0>
 2cc:	c6 c0       	rjmp	.+396    	; 0x45a <DIO_voidSetPinValue+0x1ee>
		{
		case DIO_u8PORTA : CLR_BIT(PORTA , Copy_u8Pin); break; 
 2ce:	ab e3       	ldi	r26, 0x3B	; 59
 2d0:	b0 e0       	ldi	r27, 0x00	; 0
 2d2:	eb e3       	ldi	r30, 0x3B	; 59
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	48 2f       	mov	r20, r24
 2da:	8a 81       	ldd	r24, Y+2	; 0x02
 2dc:	28 2f       	mov	r18, r24
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	02 2e       	mov	r0, r18
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_voidSetPinValue+0x80>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	0a 94       	dec	r0
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_voidSetPinValue+0x7c>
 2f0:	80 95       	com	r24
 2f2:	84 23       	and	r24, r20
 2f4:	8c 93       	st	X, r24
 2f6:	b1 c0       	rjmp	.+354    	; 0x45a <DIO_voidSetPinValue+0x1ee>
		case DIO_u8PORTB : CLR_BIT(PORTB , Copy_u8Pin); break;
 2f8:	a8 e3       	ldi	r26, 0x38	; 56
 2fa:	b0 e0       	ldi	r27, 0x00	; 0
 2fc:	e8 e3       	ldi	r30, 0x38	; 56
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	48 2f       	mov	r20, r24
 304:	8a 81       	ldd	r24, Y+2	; 0x02
 306:	28 2f       	mov	r18, r24
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 2e       	mov	r0, r18
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_voidSetPinValue+0xaa>
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	0a 94       	dec	r0
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_voidSetPinValue+0xa6>
 31a:	80 95       	com	r24
 31c:	84 23       	and	r24, r20
 31e:	8c 93       	st	X, r24
 320:	9c c0       	rjmp	.+312    	; 0x45a <DIO_voidSetPinValue+0x1ee>
		case DIO_u8PORTC : CLR_BIT(PORTC , Copy_u8Pin); break;
 322:	a5 e3       	ldi	r26, 0x35	; 53
 324:	b0 e0       	ldi	r27, 0x00	; 0
 326:	e5 e3       	ldi	r30, 0x35	; 53
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	48 2f       	mov	r20, r24
 32e:	8a 81       	ldd	r24, Y+2	; 0x02
 330:	28 2f       	mov	r18, r24
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 2e       	mov	r0, r18
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_voidSetPinValue+0xd4>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_voidSetPinValue+0xd0>
 344:	80 95       	com	r24
 346:	84 23       	and	r24, r20
 348:	8c 93       	st	X, r24
 34a:	87 c0       	rjmp	.+270    	; 0x45a <DIO_voidSetPinValue+0x1ee>
		case DIO_u8PORTD : CLR_BIT(PORTD , Copy_u8Pin); break;
 34c:	a2 e3       	ldi	r26, 0x32	; 50
 34e:	b0 e0       	ldi	r27, 0x00	; 0
 350:	e2 e3       	ldi	r30, 0x32	; 50
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	48 2f       	mov	r20, r24
 358:	8a 81       	ldd	r24, Y+2	; 0x02
 35a:	28 2f       	mov	r18, r24
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	02 2e       	mov	r0, r18
 364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_voidSetPinValue+0xfe>
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	0a 94       	dec	r0
 36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_voidSetPinValue+0xfa>
 36e:	80 95       	com	r24
 370:	84 23       	and	r24, r20
 372:	8c 93       	st	X, r24
 374:	72 c0       	rjmp	.+228    	; 0x45a <DIO_voidSetPinValue+0x1ee>
		}
	}
	else if (Copy_u8Value == DIO_u8HIGH)
 376:	8b 81       	ldd	r24, Y+3	; 0x03
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	09 f0       	breq	.+2      	; 0x37e <DIO_voidSetPinValue+0x112>
 37c:	6e c0       	rjmp	.+220    	; 0x45a <DIO_voidSetPinValue+0x1ee>
	{				
		switch (Copy_u8Port)
 37e:	89 81       	ldd	r24, Y+1	; 0x01
 380:	28 2f       	mov	r18, r24
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	3d 83       	std	Y+5, r19	; 0x05
 386:	2c 83       	std	Y+4, r18	; 0x04
 388:	8c 81       	ldd	r24, Y+4	; 0x04
 38a:	9d 81       	ldd	r25, Y+5	; 0x05
 38c:	81 30       	cpi	r24, 0x01	; 1
 38e:	91 05       	cpc	r25, r1
 390:	49 f1       	breq	.+82     	; 0x3e4 <DIO_voidSetPinValue+0x178>
 392:	2c 81       	ldd	r18, Y+4	; 0x04
 394:	3d 81       	ldd	r19, Y+5	; 0x05
 396:	22 30       	cpi	r18, 0x02	; 2
 398:	31 05       	cpc	r19, r1
 39a:	2c f4       	brge	.+10     	; 0x3a6 <DIO_voidSetPinValue+0x13a>
 39c:	8c 81       	ldd	r24, Y+4	; 0x04
 39e:	9d 81       	ldd	r25, Y+5	; 0x05
 3a0:	00 97       	sbiw	r24, 0x00	; 0
 3a2:	61 f0       	breq	.+24     	; 0x3bc <DIO_voidSetPinValue+0x150>
 3a4:	5a c0       	rjmp	.+180    	; 0x45a <DIO_voidSetPinValue+0x1ee>
 3a6:	2c 81       	ldd	r18, Y+4	; 0x04
 3a8:	3d 81       	ldd	r19, Y+5	; 0x05
 3aa:	22 30       	cpi	r18, 0x02	; 2
 3ac:	31 05       	cpc	r19, r1
 3ae:	71 f1       	breq	.+92     	; 0x40c <DIO_voidSetPinValue+0x1a0>
 3b0:	8c 81       	ldd	r24, Y+4	; 0x04
 3b2:	9d 81       	ldd	r25, Y+5	; 0x05
 3b4:	83 30       	cpi	r24, 0x03	; 3
 3b6:	91 05       	cpc	r25, r1
 3b8:	e9 f1       	breq	.+122    	; 0x434 <DIO_voidSetPinValue+0x1c8>
 3ba:	4f c0       	rjmp	.+158    	; 0x45a <DIO_voidSetPinValue+0x1ee>
		{
		case DIO_u8PORTA : SET_BIT(PORTA , Copy_u8Pin); break; 
 3bc:	ab e3       	ldi	r26, 0x3B	; 59
 3be:	b0 e0       	ldi	r27, 0x00	; 0
 3c0:	eb e3       	ldi	r30, 0x3B	; 59
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	80 81       	ld	r24, Z
 3c6:	48 2f       	mov	r20, r24
 3c8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ca:	28 2f       	mov	r18, r24
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	02 2e       	mov	r0, r18
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_voidSetPinValue+0x16e>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	0a 94       	dec	r0
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_voidSetPinValue+0x16a>
 3de:	84 2b       	or	r24, r20
 3e0:	8c 93       	st	X, r24
 3e2:	3b c0       	rjmp	.+118    	; 0x45a <DIO_voidSetPinValue+0x1ee>
		case DIO_u8PORTB : SET_BIT(PORTB , Copy_u8Pin); break;
 3e4:	a8 e3       	ldi	r26, 0x38	; 56
 3e6:	b0 e0       	ldi	r27, 0x00	; 0
 3e8:	e8 e3       	ldi	r30, 0x38	; 56
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	48 2f       	mov	r20, r24
 3f0:	8a 81       	ldd	r24, Y+2	; 0x02
 3f2:	28 2f       	mov	r18, r24
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	02 2e       	mov	r0, r18
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <DIO_voidSetPinValue+0x196>
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	0a 94       	dec	r0
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_voidSetPinValue+0x192>
 406:	84 2b       	or	r24, r20
 408:	8c 93       	st	X, r24
 40a:	27 c0       	rjmp	.+78     	; 0x45a <DIO_voidSetPinValue+0x1ee>
		case DIO_u8PORTC : SET_BIT(PORTC , Copy_u8Pin); break;
 40c:	a5 e3       	ldi	r26, 0x35	; 53
 40e:	b0 e0       	ldi	r27, 0x00	; 0
 410:	e5 e3       	ldi	r30, 0x35	; 53
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	48 2f       	mov	r20, r24
 418:	8a 81       	ldd	r24, Y+2	; 0x02
 41a:	28 2f       	mov	r18, r24
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	02 2e       	mov	r0, r18
 424:	02 c0       	rjmp	.+4      	; 0x42a <DIO_voidSetPinValue+0x1be>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	0a 94       	dec	r0
 42c:	e2 f7       	brpl	.-8      	; 0x426 <DIO_voidSetPinValue+0x1ba>
 42e:	84 2b       	or	r24, r20
 430:	8c 93       	st	X, r24
 432:	13 c0       	rjmp	.+38     	; 0x45a <DIO_voidSetPinValue+0x1ee>
		case DIO_u8PORTD : SET_BIT(PORTD , Copy_u8Pin); break;
 434:	a2 e3       	ldi	r26, 0x32	; 50
 436:	b0 e0       	ldi	r27, 0x00	; 0
 438:	e2 e3       	ldi	r30, 0x32	; 50
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	80 81       	ld	r24, Z
 43e:	48 2f       	mov	r20, r24
 440:	8a 81       	ldd	r24, Y+2	; 0x02
 442:	28 2f       	mov	r18, r24
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	02 2e       	mov	r0, r18
 44c:	02 c0       	rjmp	.+4      	; 0x452 <DIO_voidSetPinValue+0x1e6>
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	0a 94       	dec	r0
 454:	e2 f7       	brpl	.-8      	; 0x44e <DIO_voidSetPinValue+0x1e2>
 456:	84 2b       	or	r24, r20
 458:	8c 93       	st	X, r24
		}
	}	
}
 45a:	27 96       	adiw	r28, 0x07	; 7
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	f8 94       	cli
 460:	de bf       	out	0x3e, r29	; 62
 462:	0f be       	out	0x3f, r0	; 63
 464:	cd bf       	out	0x3d, r28	; 61
 466:	cf 91       	pop	r28
 468:	df 91       	pop	r29
 46a:	08 95       	ret

0000046c <DIO_u8GetPinValue>:

u8 	 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
 46c:	df 93       	push	r29
 46e:	cf 93       	push	r28
 470:	00 d0       	rcall	.+0      	; 0x472 <DIO_u8GetPinValue+0x6>
 472:	00 d0       	rcall	.+0      	; 0x474 <DIO_u8GetPinValue+0x8>
 474:	0f 92       	push	r0
 476:	cd b7       	in	r28, 0x3d	; 61
 478:	de b7       	in	r29, 0x3e	; 62
 47a:	8a 83       	std	Y+2, r24	; 0x02
 47c:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value=0;
 47e:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
 480:	8a 81       	ldd	r24, Y+2	; 0x02
 482:	28 2f       	mov	r18, r24
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	3d 83       	std	Y+5, r19	; 0x05
 488:	2c 83       	std	Y+4, r18	; 0x04
 48a:	4c 81       	ldd	r20, Y+4	; 0x04
 48c:	5d 81       	ldd	r21, Y+5	; 0x05
 48e:	41 30       	cpi	r20, 0x01	; 1
 490:	51 05       	cpc	r21, r1
 492:	41 f1       	breq	.+80     	; 0x4e4 <DIO_u8GetPinValue+0x78>
 494:	8c 81       	ldd	r24, Y+4	; 0x04
 496:	9d 81       	ldd	r25, Y+5	; 0x05
 498:	82 30       	cpi	r24, 0x02	; 2
 49a:	91 05       	cpc	r25, r1
 49c:	34 f4       	brge	.+12     	; 0x4aa <DIO_u8GetPinValue+0x3e>
 49e:	2c 81       	ldd	r18, Y+4	; 0x04
 4a0:	3d 81       	ldd	r19, Y+5	; 0x05
 4a2:	21 15       	cp	r18, r1
 4a4:	31 05       	cpc	r19, r1
 4a6:	61 f0       	breq	.+24     	; 0x4c0 <DIO_u8GetPinValue+0x54>
 4a8:	52 c0       	rjmp	.+164    	; 0x54e <DIO_u8GetPinValue+0xe2>
 4aa:	4c 81       	ldd	r20, Y+4	; 0x04
 4ac:	5d 81       	ldd	r21, Y+5	; 0x05
 4ae:	42 30       	cpi	r20, 0x02	; 2
 4b0:	51 05       	cpc	r21, r1
 4b2:	51 f1       	breq	.+84     	; 0x508 <DIO_u8GetPinValue+0x9c>
 4b4:	8c 81       	ldd	r24, Y+4	; 0x04
 4b6:	9d 81       	ldd	r25, Y+5	; 0x05
 4b8:	83 30       	cpi	r24, 0x03	; 3
 4ba:	91 05       	cpc	r25, r1
 4bc:	b9 f1       	breq	.+110    	; 0x52c <DIO_u8GetPinValue+0xc0>
 4be:	47 c0       	rjmp	.+142    	; 0x54e <DIO_u8GetPinValue+0xe2>
	{
	case DIO_u8PORTA : pin_value = GET_BIT(PINA , Copy_u8Pin); break;
 4c0:	e9 e3       	ldi	r30, 0x39	; 57
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 81       	ld	r24, Z
 4c6:	28 2f       	mov	r18, r24
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	8b 81       	ldd	r24, Y+3	; 0x03
 4cc:	88 2f       	mov	r24, r24
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	a9 01       	movw	r20, r18
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_u8GetPinValue+0x6c>
 4d4:	55 95       	asr	r21
 4d6:	47 95       	ror	r20
 4d8:	8a 95       	dec	r24
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_u8GetPinValue+0x68>
 4dc:	ca 01       	movw	r24, r20
 4de:	81 70       	andi	r24, 0x01	; 1
 4e0:	89 83       	std	Y+1, r24	; 0x01
 4e2:	35 c0       	rjmp	.+106    	; 0x54e <DIO_u8GetPinValue+0xe2>
	case DIO_u8PORTB : pin_value = GET_BIT(PINB , Copy_u8Pin); break;
 4e4:	e6 e3       	ldi	r30, 0x36	; 54
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	80 81       	ld	r24, Z
 4ea:	28 2f       	mov	r18, r24
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	8b 81       	ldd	r24, Y+3	; 0x03
 4f0:	88 2f       	mov	r24, r24
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	a9 01       	movw	r20, r18
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <DIO_u8GetPinValue+0x90>
 4f8:	55 95       	asr	r21
 4fa:	47 95       	ror	r20
 4fc:	8a 95       	dec	r24
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <DIO_u8GetPinValue+0x8c>
 500:	ca 01       	movw	r24, r20
 502:	81 70       	andi	r24, 0x01	; 1
 504:	89 83       	std	Y+1, r24	; 0x01
 506:	23 c0       	rjmp	.+70     	; 0x54e <DIO_u8GetPinValue+0xe2>
	case DIO_u8PORTC : pin_value = GET_BIT(PINC , Copy_u8Pin); break;
 508:	e3 e3       	ldi	r30, 0x33	; 51
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	80 81       	ld	r24, Z
 50e:	28 2f       	mov	r18, r24
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	8b 81       	ldd	r24, Y+3	; 0x03
 514:	88 2f       	mov	r24, r24
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	a9 01       	movw	r20, r18
 51a:	02 c0       	rjmp	.+4      	; 0x520 <DIO_u8GetPinValue+0xb4>
 51c:	55 95       	asr	r21
 51e:	47 95       	ror	r20
 520:	8a 95       	dec	r24
 522:	e2 f7       	brpl	.-8      	; 0x51c <DIO_u8GetPinValue+0xb0>
 524:	ca 01       	movw	r24, r20
 526:	81 70       	andi	r24, 0x01	; 1
 528:	89 83       	std	Y+1, r24	; 0x01
 52a:	11 c0       	rjmp	.+34     	; 0x54e <DIO_u8GetPinValue+0xe2>
	case DIO_u8PORTD : pin_value = GET_BIT(PIND , Copy_u8Pin); break;
 52c:	e0 e3       	ldi	r30, 0x30	; 48
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	80 81       	ld	r24, Z
 532:	28 2f       	mov	r18, r24
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	8b 81       	ldd	r24, Y+3	; 0x03
 538:	88 2f       	mov	r24, r24
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	a9 01       	movw	r20, r18
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_u8GetPinValue+0xd8>
 540:	55 95       	asr	r21
 542:	47 95       	ror	r20
 544:	8a 95       	dec	r24
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_u8GetPinValue+0xd4>
 548:	ca 01       	movw	r24, r20
 54a:	81 70       	andi	r24, 0x01	; 1
 54c:	89 83       	std	Y+1, r24	; 0x01
	}
	return pin_value;
 54e:	89 81       	ldd	r24, Y+1	; 0x01
}
 550:	0f 90       	pop	r0
 552:	0f 90       	pop	r0
 554:	0f 90       	pop	r0
 556:	0f 90       	pop	r0
 558:	0f 90       	pop	r0
 55a:	cf 91       	pop	r28
 55c:	df 91       	pop	r29
 55e:	08 95       	ret

00000560 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
 560:	df 93       	push	r29
 562:	cf 93       	push	r28
 564:	00 d0       	rcall	.+0      	; 0x566 <DIO_voidSetPortDirection+0x6>
 566:	00 d0       	rcall	.+0      	; 0x568 <DIO_voidSetPortDirection+0x8>
 568:	cd b7       	in	r28, 0x3d	; 61
 56a:	de b7       	in	r29, 0x3e	; 62
 56c:	89 83       	std	Y+1, r24	; 0x01
 56e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
 570:	89 81       	ldd	r24, Y+1	; 0x01
 572:	28 2f       	mov	r18, r24
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	3c 83       	std	Y+4, r19	; 0x04
 578:	2b 83       	std	Y+3, r18	; 0x03
 57a:	8b 81       	ldd	r24, Y+3	; 0x03
 57c:	9c 81       	ldd	r25, Y+4	; 0x04
 57e:	81 30       	cpi	r24, 0x01	; 1
 580:	91 05       	cpc	r25, r1
 582:	d1 f0       	breq	.+52     	; 0x5b8 <DIO_voidSetPortDirection+0x58>
 584:	2b 81       	ldd	r18, Y+3	; 0x03
 586:	3c 81       	ldd	r19, Y+4	; 0x04
 588:	22 30       	cpi	r18, 0x02	; 2
 58a:	31 05       	cpc	r19, r1
 58c:	2c f4       	brge	.+10     	; 0x598 <DIO_voidSetPortDirection+0x38>
 58e:	8b 81       	ldd	r24, Y+3	; 0x03
 590:	9c 81       	ldd	r25, Y+4	; 0x04
 592:	00 97       	sbiw	r24, 0x00	; 0
 594:	61 f0       	breq	.+24     	; 0x5ae <DIO_voidSetPortDirection+0x4e>
 596:	1e c0       	rjmp	.+60     	; 0x5d4 <DIO_voidSetPortDirection+0x74>
 598:	2b 81       	ldd	r18, Y+3	; 0x03
 59a:	3c 81       	ldd	r19, Y+4	; 0x04
 59c:	22 30       	cpi	r18, 0x02	; 2
 59e:	31 05       	cpc	r19, r1
 5a0:	81 f0       	breq	.+32     	; 0x5c2 <DIO_voidSetPortDirection+0x62>
 5a2:	8b 81       	ldd	r24, Y+3	; 0x03
 5a4:	9c 81       	ldd	r25, Y+4	; 0x04
 5a6:	83 30       	cpi	r24, 0x03	; 3
 5a8:	91 05       	cpc	r25, r1
 5aa:	81 f0       	breq	.+32     	; 0x5cc <DIO_voidSetPortDirection+0x6c>
 5ac:	13 c0       	rjmp	.+38     	; 0x5d4 <DIO_voidSetPortDirection+0x74>
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
 5ae:	ea e3       	ldi	r30, 0x3A	; 58
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	8a 81       	ldd	r24, Y+2	; 0x02
 5b4:	80 83       	st	Z, r24
 5b6:	0e c0       	rjmp	.+28     	; 0x5d4 <DIO_voidSetPortDirection+0x74>
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
 5b8:	e7 e3       	ldi	r30, 0x37	; 55
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	8a 81       	ldd	r24, Y+2	; 0x02
 5be:	80 83       	st	Z, r24
 5c0:	09 c0       	rjmp	.+18     	; 0x5d4 <DIO_voidSetPortDirection+0x74>
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
 5c2:	e4 e3       	ldi	r30, 0x34	; 52
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	8a 81       	ldd	r24, Y+2	; 0x02
 5c8:	80 83       	st	Z, r24
 5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <DIO_voidSetPortDirection+0x74>
	case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
 5cc:	e1 e3       	ldi	r30, 0x31	; 49
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	8a 81       	ldd	r24, Y+2	; 0x02
 5d2:	80 83       	st	Z, r24
	}
}
 5d4:	0f 90       	pop	r0
 5d6:	0f 90       	pop	r0
 5d8:	0f 90       	pop	r0
 5da:	0f 90       	pop	r0
 5dc:	cf 91       	pop	r28
 5de:	df 91       	pop	r29
 5e0:	08 95       	ret

000005e2 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
 5e2:	df 93       	push	r29
 5e4:	cf 93       	push	r28
 5e6:	00 d0       	rcall	.+0      	; 0x5e8 <DIO_voidSetPortValue+0x6>
 5e8:	00 d0       	rcall	.+0      	; 0x5ea <DIO_voidSetPortValue+0x8>
 5ea:	cd b7       	in	r28, 0x3d	; 61
 5ec:	de b7       	in	r29, 0x3e	; 62
 5ee:	89 83       	std	Y+1, r24	; 0x01
 5f0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
 5f2:	89 81       	ldd	r24, Y+1	; 0x01
 5f4:	28 2f       	mov	r18, r24
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	3c 83       	std	Y+4, r19	; 0x04
 5fa:	2b 83       	std	Y+3, r18	; 0x03
 5fc:	8b 81       	ldd	r24, Y+3	; 0x03
 5fe:	9c 81       	ldd	r25, Y+4	; 0x04
 600:	81 30       	cpi	r24, 0x01	; 1
 602:	91 05       	cpc	r25, r1
 604:	d1 f0       	breq	.+52     	; 0x63a <DIO_voidSetPortValue+0x58>
 606:	2b 81       	ldd	r18, Y+3	; 0x03
 608:	3c 81       	ldd	r19, Y+4	; 0x04
 60a:	22 30       	cpi	r18, 0x02	; 2
 60c:	31 05       	cpc	r19, r1
 60e:	2c f4       	brge	.+10     	; 0x61a <DIO_voidSetPortValue+0x38>
 610:	8b 81       	ldd	r24, Y+3	; 0x03
 612:	9c 81       	ldd	r25, Y+4	; 0x04
 614:	00 97       	sbiw	r24, 0x00	; 0
 616:	61 f0       	breq	.+24     	; 0x630 <DIO_voidSetPortValue+0x4e>
 618:	1e c0       	rjmp	.+60     	; 0x656 <DIO_voidSetPortValue+0x74>
 61a:	2b 81       	ldd	r18, Y+3	; 0x03
 61c:	3c 81       	ldd	r19, Y+4	; 0x04
 61e:	22 30       	cpi	r18, 0x02	; 2
 620:	31 05       	cpc	r19, r1
 622:	81 f0       	breq	.+32     	; 0x644 <DIO_voidSetPortValue+0x62>
 624:	8b 81       	ldd	r24, Y+3	; 0x03
 626:	9c 81       	ldd	r25, Y+4	; 0x04
 628:	83 30       	cpi	r24, 0x03	; 3
 62a:	91 05       	cpc	r25, r1
 62c:	81 f0       	breq	.+32     	; 0x64e <DIO_voidSetPortValue+0x6c>
 62e:	13 c0       	rjmp	.+38     	; 0x656 <DIO_voidSetPortValue+0x74>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
 630:	eb e3       	ldi	r30, 0x3B	; 59
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	8a 81       	ldd	r24, Y+2	; 0x02
 636:	80 83       	st	Z, r24
 638:	0e c0       	rjmp	.+28     	; 0x656 <DIO_voidSetPortValue+0x74>
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
 63a:	e8 e3       	ldi	r30, 0x38	; 56
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	8a 81       	ldd	r24, Y+2	; 0x02
 640:	80 83       	st	Z, r24
 642:	09 c0       	rjmp	.+18     	; 0x656 <DIO_voidSetPortValue+0x74>
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
 644:	e5 e3       	ldi	r30, 0x35	; 53
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	8a 81       	ldd	r24, Y+2	; 0x02
 64a:	80 83       	st	Z, r24
 64c:	04 c0       	rjmp	.+8      	; 0x656 <DIO_voidSetPortValue+0x74>
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
 64e:	e2 e3       	ldi	r30, 0x32	; 50
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	8a 81       	ldd	r24, Y+2	; 0x02
 654:	80 83       	st	Z, r24
	}
}
 656:	0f 90       	pop	r0
 658:	0f 90       	pop	r0
 65a:	0f 90       	pop	r0
 65c:	0f 90       	pop	r0
 65e:	cf 91       	pop	r28
 660:	df 91       	pop	r29
 662:	08 95       	ret

00000664 <DIO_u8GetPortValue>:

u8 	 DIO_u8GetPortValue(u8 Copy_u8Port)
{
 664:	df 93       	push	r29
 666:	cf 93       	push	r28
 668:	00 d0       	rcall	.+0      	; 0x66a <DIO_u8GetPortValue+0x6>
 66a:	00 d0       	rcall	.+0      	; 0x66c <DIO_u8GetPortValue+0x8>
 66c:	cd b7       	in	r28, 0x3d	; 61
 66e:	de b7       	in	r29, 0x3e	; 62
 670:	8a 83       	std	Y+2, r24	; 0x02
	u8 port_value;
	switch(Copy_u8Port)
 672:	8a 81       	ldd	r24, Y+2	; 0x02
 674:	28 2f       	mov	r18, r24
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	3c 83       	std	Y+4, r19	; 0x04
 67a:	2b 83       	std	Y+3, r18	; 0x03
 67c:	8b 81       	ldd	r24, Y+3	; 0x03
 67e:	9c 81       	ldd	r25, Y+4	; 0x04
 680:	81 30       	cpi	r24, 0x01	; 1
 682:	91 05       	cpc	r25, r1
 684:	d1 f0       	breq	.+52     	; 0x6ba <DIO_u8GetPortValue+0x56>
 686:	2b 81       	ldd	r18, Y+3	; 0x03
 688:	3c 81       	ldd	r19, Y+4	; 0x04
 68a:	22 30       	cpi	r18, 0x02	; 2
 68c:	31 05       	cpc	r19, r1
 68e:	2c f4       	brge	.+10     	; 0x69a <DIO_u8GetPortValue+0x36>
 690:	8b 81       	ldd	r24, Y+3	; 0x03
 692:	9c 81       	ldd	r25, Y+4	; 0x04
 694:	00 97       	sbiw	r24, 0x00	; 0
 696:	61 f0       	breq	.+24     	; 0x6b0 <DIO_u8GetPortValue+0x4c>
 698:	1e c0       	rjmp	.+60     	; 0x6d6 <DIO_u8GetPortValue+0x72>
 69a:	2b 81       	ldd	r18, Y+3	; 0x03
 69c:	3c 81       	ldd	r19, Y+4	; 0x04
 69e:	22 30       	cpi	r18, 0x02	; 2
 6a0:	31 05       	cpc	r19, r1
 6a2:	81 f0       	breq	.+32     	; 0x6c4 <DIO_u8GetPortValue+0x60>
 6a4:	8b 81       	ldd	r24, Y+3	; 0x03
 6a6:	9c 81       	ldd	r25, Y+4	; 0x04
 6a8:	83 30       	cpi	r24, 0x03	; 3
 6aa:	91 05       	cpc	r25, r1
 6ac:	81 f0       	breq	.+32     	; 0x6ce <DIO_u8GetPortValue+0x6a>
 6ae:	13 c0       	rjmp	.+38     	; 0x6d6 <DIO_u8GetPortValue+0x72>
	{
	case DIO_u8PORTA : port_value = PORTA; break;
 6b0:	eb e3       	ldi	r30, 0x3B	; 59
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	80 81       	ld	r24, Z
 6b6:	89 83       	std	Y+1, r24	; 0x01
 6b8:	0e c0       	rjmp	.+28     	; 0x6d6 <DIO_u8GetPortValue+0x72>
	case DIO_u8PORTB : port_value = PORTB; break;
 6ba:	e8 e3       	ldi	r30, 0x38	; 56
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	80 81       	ld	r24, Z
 6c0:	89 83       	std	Y+1, r24	; 0x01
 6c2:	09 c0       	rjmp	.+18     	; 0x6d6 <DIO_u8GetPortValue+0x72>
	case DIO_u8PORTC : port_value = PORTC; break;
 6c4:	e5 e3       	ldi	r30, 0x35	; 53
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	80 81       	ld	r24, Z
 6ca:	89 83       	std	Y+1, r24	; 0x01
 6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <DIO_u8GetPortValue+0x72>
	case DIO_u8PORTD : port_value = PORTD; break;
 6ce:	e2 e3       	ldi	r30, 0x32	; 50
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	80 81       	ld	r24, Z
 6d4:	89 83       	std	Y+1, r24	; 0x01
	}
	return port_value;
 6d6:	89 81       	ldd	r24, Y+1	; 0x01
}
 6d8:	0f 90       	pop	r0
 6da:	0f 90       	pop	r0
 6dc:	0f 90       	pop	r0
 6de:	0f 90       	pop	r0
 6e0:	cf 91       	pop	r28
 6e2:	df 91       	pop	r29
 6e4:	08 95       	ret

000006e6 <InfraRed_voidInit>:
#include "DIO_interface.h"
#include "InfraRed_Interface.h"
#include "InfraRed_config.h"

void InfraRed_voidInit(void)
{
 6e6:	df 93       	push	r29
 6e8:	cf 93       	push	r28
 6ea:	cd b7       	in	r28, 0x3d	; 61
 6ec:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(IR_PORT , IR_F_PIN , DIO_u8INPUT);
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	60 e0       	ldi	r22, 0x00	; 0
 6f2:	40 e0       	ldi	r20, 0x00	; 0
 6f4:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(IR_PORT , IR_L_PIN , DIO_u8INPUT);
 6f8:	80 e0       	ldi	r24, 0x00	; 0
 6fa:	61 e0       	ldi	r22, 0x01	; 1
 6fc:	40 e0       	ldi	r20, 0x00	; 0
 6fe:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(IR_PORT , IR_R_PIN , DIO_u8INPUT);
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	62 e0       	ldi	r22, 0x02	; 2
 706:	40 e0       	ldi	r20, 0x00	; 0
 708:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>

}
 70c:	cf 91       	pop	r28
 70e:	df 91       	pop	r29
 710:	08 95       	ret

00000712 <InfraRed_u8GetFrontRead>:
u8 InfraRed_u8GetFrontRead(void)
{
 712:	df 93       	push	r29
 714:	cf 93       	push	r28
 716:	cd b7       	in	r28, 0x3d	; 61
 718:	de b7       	in	r29, 0x3e	; 62
	return DIO_u8GetPinValue(IR_PORT , IR_F_PIN );
 71a:	80 e0       	ldi	r24, 0x00	; 0
 71c:	60 e0       	ldi	r22, 0x00	; 0
 71e:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_u8GetPinValue>
}
 722:	cf 91       	pop	r28
 724:	df 91       	pop	r29
 726:	08 95       	ret

00000728 <InfraRed_u8GetLeftRead>:
u8 InfraRed_u8GetLeftRead(void)
{
 728:	df 93       	push	r29
 72a:	cf 93       	push	r28
 72c:	cd b7       	in	r28, 0x3d	; 61
 72e:	de b7       	in	r29, 0x3e	; 62
	return DIO_u8GetPinValue(IR_PORT , IR_L_PIN );
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	61 e0       	ldi	r22, 0x01	; 1
 734:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_u8GetPinValue>
}
 738:	cf 91       	pop	r28
 73a:	df 91       	pop	r29
 73c:	08 95       	ret

0000073e <InfraRed_u8GetRightRead>:
u8 InfraRed_u8GetRightRead(void)
{
 73e:	df 93       	push	r29
 740:	cf 93       	push	r28
 742:	cd b7       	in	r28, 0x3d	; 61
 744:	de b7       	in	r29, 0x3e	; 62
	return DIO_u8GetPinValue(IR_PORT , IR_R_PIN );
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	62 e0       	ldi	r22, 0x02	; 2
 74a:	0e 94 36 02 	call	0x46c	; 0x46c <DIO_u8GetPinValue>
}
 74e:	cf 91       	pop	r28
 750:	df 91       	pop	r29
 752:	08 95       	ret

00000754 <UART_voidInit>:
#include "UART_interface.h"
#include "UART_private.h"
#include "UART_register.h"

void UART_voidInit(void)
{
 754:	df 93       	push	r29
 756:	cf 93       	push	r28
 758:	0f 92       	push	r0
 75a:	cd b7       	in	r28, 0x3d	; 61
 75c:	de b7       	in	r29, 0x3e	; 62
	u8 Local_8uUCSRC = 0b10000110;
 75e:	86 e8       	ldi	r24, 0x86	; 134
 760:	89 83       	std	Y+1, r24	; 0x01
	//Register Select
	SET_BIT(Local_8uUCSRC , 7);
 762:	89 81       	ldd	r24, Y+1	; 0x01
 764:	80 68       	ori	r24, 0x80	; 128
 766:	89 83       	std	Y+1, r24	; 0x01

	//Select Asynchronous mode
	CLR_BIT(Local_8uUCSRC , 6);
 768:	89 81       	ldd	r24, Y+1	; 0x01
 76a:	8f 7b       	andi	r24, 0xBF	; 191
 76c:	89 83       	std	Y+1, r24	; 0x01

	//Select Parity mode Even
	CLR_BIT(Local_8uUCSRC , 5);
 76e:	89 81       	ldd	r24, Y+1	; 0x01
 770:	8f 7d       	andi	r24, 0xDF	; 223
 772:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_8uUCSRC , 4);
 774:	89 81       	ldd	r24, Y+1	; 0x01
 776:	8f 7e       	andi	r24, 0xEF	; 239
 778:	89 83       	std	Y+1, r24	; 0x01

	//Select one Stop Bit
	CLR_BIT(Local_8uUCSRC , 3);
 77a:	89 81       	ldd	r24, Y+1	; 0x01
 77c:	87 7f       	andi	r24, 0xF7	; 247
 77e:	89 83       	std	Y+1, r24	; 0x01

	//Select Character Size 8 Bits
	CLR_BIT(UCSRB , 2);
 780:	aa e2       	ldi	r26, 0x2A	; 42
 782:	b0 e0       	ldi	r27, 0x00	; 0
 784:	ea e2       	ldi	r30, 0x2A	; 42
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	80 81       	ld	r24, Z
 78a:	8b 7f       	andi	r24, 0xFB	; 251
 78c:	8c 93       	st	X, r24
	SET_BIT(Local_8uUCSRC , 1);
 78e:	89 81       	ldd	r24, Y+1	; 0x01
 790:	82 60       	ori	r24, 0x02	; 2
 792:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_8uUCSRC , 2);
 794:	89 81       	ldd	r24, Y+1	; 0x01
 796:	84 60       	ori	r24, 0x04	; 4
 798:	89 83       	std	Y+1, r24	; 0x01

	UCSRC = Local_8uUCSRC;
 79a:	e0 e4       	ldi	r30, 0x40	; 64
 79c:	f0 e0       	ldi	r31, 0x00	; 0
 79e:	89 81       	ldd	r24, Y+1	; 0x01
 7a0:	80 83       	st	Z, r24

	//Select Baud Rate
	UBRRL = 51;
 7a2:	e9 e2       	ldi	r30, 0x29	; 41
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	83 e3       	ldi	r24, 0x33	; 51
 7a8:	80 83       	st	Z, r24

	//Enable Transmitter & Receiver
	SET_BIT(UCSRB , 4);
 7aa:	aa e2       	ldi	r26, 0x2A	; 42
 7ac:	b0 e0       	ldi	r27, 0x00	; 0
 7ae:	ea e2       	ldi	r30, 0x2A	; 42
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	80 81       	ld	r24, Z
 7b4:	80 61       	ori	r24, 0x10	; 16
 7b6:	8c 93       	st	X, r24
	SET_BIT(UCSRB , 3);
 7b8:	aa e2       	ldi	r26, 0x2A	; 42
 7ba:	b0 e0       	ldi	r27, 0x00	; 0
 7bc:	ea e2       	ldi	r30, 0x2A	; 42
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	80 81       	ld	r24, Z
 7c2:	88 60       	ori	r24, 0x08	; 8
 7c4:	8c 93       	st	X, r24
}
 7c6:	0f 90       	pop	r0
 7c8:	cf 91       	pop	r28
 7ca:	df 91       	pop	r29
 7cc:	08 95       	ret

000007ce <UART_voidSendData>:

void UART_voidSendData(u8 Copy_u8Data)
{
 7ce:	df 93       	push	r29
 7d0:	cf 93       	push	r28
 7d2:	0f 92       	push	r0
 7d4:	cd b7       	in	r28, 0x3d	; 61
 7d6:	de b7       	in	r29, 0x3e	; 62
 7d8:	89 83       	std	Y+1, r24	; 0x01
 7da:	01 c0       	rjmp	.+2      	; 0x7de <UART_voidSendData+0x10>
	while((GET_BIT(UCSRA , 5)) != 1)    //check if data register empty this bit will be 1
	{
		asm("NOP");
 7dc:	00 00       	nop
	SET_BIT(UCSRB , 3);
}

void UART_voidSendData(u8 Copy_u8Data)
{
	while((GET_BIT(UCSRA , 5)) != 1)    //check if data register empty this bit will be 1
 7de:	eb e2       	ldi	r30, 0x2B	; 43
 7e0:	f0 e0       	ldi	r31, 0x00	; 0
 7e2:	80 81       	ld	r24, Z
 7e4:	82 95       	swap	r24
 7e6:	86 95       	lsr	r24
 7e8:	87 70       	andi	r24, 0x07	; 7
 7ea:	88 2f       	mov	r24, r24
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	81 70       	andi	r24, 0x01	; 1
 7f0:	90 70       	andi	r25, 0x00	; 0
 7f2:	00 97       	sbiw	r24, 0x00	; 0
 7f4:	99 f3       	breq	.-26     	; 0x7dc <UART_voidSendData+0xe>
	{
		asm("NOP");
	}
	UDR = Copy_u8Data;
 7f6:	ec e2       	ldi	r30, 0x2C	; 44
 7f8:	f0 e0       	ldi	r31, 0x00	; 0
 7fa:	89 81       	ldd	r24, Y+1	; 0x01
 7fc:	80 83       	st	Z, r24
}
 7fe:	0f 90       	pop	r0
 800:	cf 91       	pop	r28
 802:	df 91       	pop	r29
 804:	08 95       	ret

00000806 <UART_u8ReceiveData>:

u8	UART_u8ReceiveData(void)
{
 806:	df 93       	push	r29
 808:	cf 93       	push	r28
 80a:	cd b7       	in	r28, 0x3d	; 61
 80c:	de b7       	in	r29, 0x3e	; 62
 80e:	01 c0       	rjmp	.+2      	; 0x812 <UART_u8ReceiveData+0xc>
	while((GET_BIT(UCSRA , 7)) != 1)    //check if Receive complete this bit will be 1
	{
		asm("NOP");
 810:	00 00       	nop
	UDR = Copy_u8Data;
}

u8	UART_u8ReceiveData(void)
{
	while((GET_BIT(UCSRA , 7)) != 1)    //check if Receive complete this bit will be 1
 812:	eb e2       	ldi	r30, 0x2B	; 43
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	80 81       	ld	r24, Z
 818:	88 1f       	adc	r24, r24
 81a:	88 27       	eor	r24, r24
 81c:	88 1f       	adc	r24, r24
 81e:	81 30       	cpi	r24, 0x01	; 1
 820:	b9 f7       	brne	.-18     	; 0x810 <UART_u8ReceiveData+0xa>
	{
		asm("NOP");
	}
	return UDR;
 822:	ec e2       	ldi	r30, 0x2C	; 44
 824:	f0 e0       	ldi	r31, 0x00	; 0
 826:	80 81       	ld	r24, Z
}
 828:	cf 91       	pop	r28
 82a:	df 91       	pop	r29
 82c:	08 95       	ret

0000082e <UART_voidSendString>:


void UART_voidSendString(const char *Copy_u8Data)
{
 82e:	df 93       	push	r29
 830:	cf 93       	push	r28
 832:	00 d0       	rcall	.+0      	; 0x834 <UART_voidSendString+0x6>
 834:	cd b7       	in	r28, 0x3d	; 61
 836:	de b7       	in	r29, 0x3e	; 62
 838:	9a 83       	std	Y+2, r25	; 0x02
 83a:	89 83       	std	Y+1, r24	; 0x01
 83c:	18 c0       	rjmp	.+48     	; 0x86e <__stack+0xf>
    while (*Copy_u8Data != '\0')
    {
        while ((GET_BIT(UCSRA , 5)) != 1)
        {
            asm("NOP");
 83e:	00 00       	nop

void UART_voidSendString(const char *Copy_u8Data)
{
    while (*Copy_u8Data != '\0')
    {
        while ((GET_BIT(UCSRA , 5)) != 1)
 840:	eb e2       	ldi	r30, 0x2B	; 43
 842:	f0 e0       	ldi	r31, 0x00	; 0
 844:	80 81       	ld	r24, Z
 846:	82 95       	swap	r24
 848:	86 95       	lsr	r24
 84a:	87 70       	andi	r24, 0x07	; 7
 84c:	88 2f       	mov	r24, r24
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	81 70       	andi	r24, 0x01	; 1
 852:	90 70       	andi	r25, 0x00	; 0
 854:	00 97       	sbiw	r24, 0x00	; 0
 856:	99 f3       	breq	.-26     	; 0x83e <UART_voidSendString+0x10>
        {
            asm("NOP");
        }

        UDR = *Copy_u8Data;
 858:	ac e2       	ldi	r26, 0x2C	; 44
 85a:	b0 e0       	ldi	r27, 0x00	; 0
 85c:	e9 81       	ldd	r30, Y+1	; 0x01
 85e:	fa 81       	ldd	r31, Y+2	; 0x02
 860:	80 81       	ld	r24, Z
 862:	8c 93       	st	X, r24

        Copy_u8Data++;
 864:	89 81       	ldd	r24, Y+1	; 0x01
 866:	9a 81       	ldd	r25, Y+2	; 0x02
 868:	01 96       	adiw	r24, 0x01	; 1
 86a:	9a 83       	std	Y+2, r25	; 0x02
 86c:	89 83       	std	Y+1, r24	; 0x01
}


void UART_voidSendString(const char *Copy_u8Data)
{
    while (*Copy_u8Data != '\0')
 86e:	e9 81       	ldd	r30, Y+1	; 0x01
 870:	fa 81       	ldd	r31, Y+2	; 0x02
 872:	80 81       	ld	r24, Z
 874:	88 23       	and	r24, r24
 876:	21 f7       	brne	.-56     	; 0x840 <UART_voidSendString+0x12>

        UDR = *Copy_u8Data;

        Copy_u8Data++;
    }
}
 878:	0f 90       	pop	r0
 87a:	0f 90       	pop	r0
 87c:	cf 91       	pop	r28
 87e:	df 91       	pop	r29
 880:	08 95       	ret

00000882 <UART_u8ReceiveString>:



void UART_u8ReceiveString(u8* Copy_u8RecievedData)
{
 882:	df 93       	push	r29
 884:	cf 93       	push	r28
 886:	00 d0       	rcall	.+0      	; 0x888 <UART_u8ReceiveString+0x6>
 888:	00 d0       	rcall	.+0      	; 0x88a <UART_u8ReceiveString+0x8>
 88a:	cd b7       	in	r28, 0x3d	; 61
 88c:	de b7       	in	r29, 0x3e	; 62
 88e:	9c 83       	std	Y+4, r25	; 0x04
 890:	8b 83       	std	Y+3, r24	; 0x03
    u8 i = 0;
 892:	1a 82       	std	Y+2, r1	; 0x02
    u8 MaxSize = 30; //
 894:	8e e1       	ldi	r24, 0x1E	; 30
 896:	89 83       	std	Y+1, r24	; 0x01

    while (1)
    {
        while ((GET_BIT(UCSRA, 7)) != 1); //
 898:	eb e2       	ldi	r30, 0x2B	; 43
 89a:	f0 e0       	ldi	r31, 0x00	; 0
 89c:	80 81       	ld	r24, Z
 89e:	88 1f       	adc	r24, r24
 8a0:	88 27       	eor	r24, r24
 8a2:	88 1f       	adc	r24, r24
 8a4:	81 30       	cpi	r24, 0x01	; 1
 8a6:	c1 f7       	brne	.-16     	; 0x898 <UART_u8ReceiveString+0x16>
        Copy_u8RecievedData[i] = UDR; //
 8a8:	8a 81       	ldd	r24, Y+2	; 0x02
 8aa:	28 2f       	mov	r18, r24
 8ac:	30 e0       	ldi	r19, 0x00	; 0
 8ae:	8b 81       	ldd	r24, Y+3	; 0x03
 8b0:	9c 81       	ldd	r25, Y+4	; 0x04
 8b2:	dc 01       	movw	r26, r24
 8b4:	a2 0f       	add	r26, r18
 8b6:	b3 1f       	adc	r27, r19
 8b8:	ec e2       	ldi	r30, 0x2C	; 44
 8ba:	f0 e0       	ldi	r31, 0x00	; 0
 8bc:	80 81       	ld	r24, Z
 8be:	8c 93       	st	X, r24

        if (Copy_u8RecievedData[i] == '\0')
 8c0:	8a 81       	ldd	r24, Y+2	; 0x02
 8c2:	28 2f       	mov	r18, r24
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	8b 81       	ldd	r24, Y+3	; 0x03
 8c8:	9c 81       	ldd	r25, Y+4	; 0x04
 8ca:	fc 01       	movw	r30, r24
 8cc:	e2 0f       	add	r30, r18
 8ce:	f3 1f       	adc	r31, r19
 8d0:	80 81       	ld	r24, Z
 8d2:	88 23       	and	r24, r24
 8d4:	b1 f0       	breq	.+44     	; 0x902 <UART_u8ReceiveString+0x80>
        {
            break;
        }

        i++;
 8d6:	8a 81       	ldd	r24, Y+2	; 0x02
 8d8:	8f 5f       	subi	r24, 0xFF	; 255
 8da:	8a 83       	std	Y+2, r24	; 0x02

        if (i >= MaxSize - 1) //
 8dc:	8a 81       	ldd	r24, Y+2	; 0x02
 8de:	28 2f       	mov	r18, r24
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	89 81       	ldd	r24, Y+1	; 0x01
 8e4:	88 2f       	mov	r24, r24
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	01 97       	sbiw	r24, 0x01	; 1
 8ea:	28 17       	cp	r18, r24
 8ec:	39 07       	cpc	r19, r25
 8ee:	a4 f2       	brlt	.-88     	; 0x898 <UART_u8ReceiveString+0x16>
        {
            Copy_u8RecievedData[i] = '\0'; //
 8f0:	8a 81       	ldd	r24, Y+2	; 0x02
 8f2:	28 2f       	mov	r18, r24
 8f4:	30 e0       	ldi	r19, 0x00	; 0
 8f6:	8b 81       	ldd	r24, Y+3	; 0x03
 8f8:	9c 81       	ldd	r25, Y+4	; 0x04
 8fa:	fc 01       	movw	r30, r24
 8fc:	e2 0f       	add	r30, r18
 8fe:	f3 1f       	adc	r31, r19
 900:	10 82       	st	Z, r1
            break;
        }
    }
}
 902:	0f 90       	pop	r0
 904:	0f 90       	pop	r0
 906:	0f 90       	pop	r0
 908:	0f 90       	pop	r0
 90a:	cf 91       	pop	r28
 90c:	df 91       	pop	r29
 90e:	08 95       	ret

00000910 <main>:
#include "DIO_interface.h"
#include "UART_interface.h"
#include "InfraRed_Interface.h"

int main(void)
{
 910:	df 93       	push	r29
 912:	cf 93       	push	r28
 914:	00 d0       	rcall	.+0      	; 0x916 <main+0x6>
 916:	0f 92       	push	r0
 918:	cd b7       	in	r28, 0x3d	; 61
 91a:	de b7       	in	r29, 0x3e	; 62
	u8 RSensor;

//	DIO_voidSetPinDirection(DIO_u8PORTB , DIO_u8PIN1 , DIO_u8OUTPUT );
//	DIO_voidSetPinValue(DIO_u8PORTB , DIO_u8PIN1 , DIO_u8HIGH );

	InfraRed_voidInit();
 91c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <InfraRed_voidInit>

	while(1)
	{
		 MSensor = InfraRed_u8GetFrontRead();
 920:	0e 94 89 03 	call	0x712	; 0x712 <InfraRed_u8GetFrontRead>
 924:	8b 83       	std	Y+3, r24	; 0x03
		 LSensor = InfraRed_u8GetLeftRead();
 926:	0e 94 94 03 	call	0x728	; 0x728 <InfraRed_u8GetLeftRead>
 92a:	8a 83       	std	Y+2, r24	; 0x02
		 RSensor = InfraRed_u8GetRightRead();  // || LSensor==1 || RSensor==1
 92c:	0e 94 9f 03 	call	0x73e	; 0x73e <InfraRed_u8GetRightRead>
 930:	89 83       	std	Y+1, r24	; 0x01
 932:	f6 cf       	rjmp	.-20     	; 0x920 <main+0x10>

00000934 <_exit>:
 934:	f8 94       	cli

00000936 <__stop_program>:
 936:	ff cf       	rjmp	.-2      	; 0x936 <__stop_program>
