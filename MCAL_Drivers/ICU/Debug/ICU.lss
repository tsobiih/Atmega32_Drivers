
ICU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00800060  00002f08  00002f9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800186  00800186  000030c2  2**0
                  ALLOC
  3 .stab         00002430  00000000  00000000  000030c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011a8  00000000  00000000  000054f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000669c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  0000681c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  000069ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  000089fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  00009b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000ab64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000ad04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000afc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b8d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <__vector_8>
      24:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <__vector_9>
      28:	0c 94 98 10 	jmp	0x2130	; 0x2130 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 39       	cpi	r26, 0x93	; 147
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <main>
      8a:	0c 94 82 17 	jmp	0x2f04	; 0x2f04 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 aa 14 	jmp	0x2954	; 0x2954 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e7       	ldi	r26, 0x7D	; 125
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c6 14 	jmp	0x298c	; 0x298c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b6 14 	jmp	0x296c	; 0x296c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d2 14 	jmp	0x29a4	; 0x29a4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b6 14 	jmp	0x296c	; 0x296c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d2 14 	jmp	0x29a4	; 0x29a4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 aa 14 	jmp	0x2954	; 0x2954 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e7       	ldi	r24, 0x7D	; 125
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c6 14 	jmp	0x298c	; 0x298c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b6 14 	jmp	0x296c	; 0x296c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d2 14 	jmp	0x29a4	; 0x29a4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b6 14 	jmp	0x296c	; 0x296c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d2 14 	jmp	0x29a4	; 0x29a4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b6 14 	jmp	0x296c	; 0x296c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d2 14 	jmp	0x29a4	; 0x29a4 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b3 14 	jmp	0x2966	; 0x2966 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 ba 14 	jmp	0x2974	; 0x2974 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 d6 14 	jmp	0x29ac	; 0x29ac <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	eb 57       	subi	r30, 0x7B	; 123
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <CLCD_voidSendData>:
#include "CLCD_Config.h"
#include "CLCD_Private.h"


void CLCD_voidSendData(u8 Copy_u8Data)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	2f 97       	sbiw	r28, 0x0f	; 15
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
     cb4:	8f 87       	std	Y+15, r24	; 0x0f
    //Set rs pin to high for send data
    DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_RS_PORT , DIO_u8HIGH);
     cb6:	82 e0       	ldi	r24, 0x02	; 2
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	41 e0       	ldi	r20, 0x01	; 1
     cbc:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <DIO_voidSetPinValue>

    //Set rw pin to low for write
    DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_RW_PORT , DIO_u8LOW);
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	61 e0       	ldi	r22, 0x01	; 1
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <DIO_voidSetPinValue>

    //Put data
    DIO_voidSetPortValue(CLCD_DATA_PORT , Copy_u8Data);
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	6f 85       	ldd	r22, Y+15	; 0x0f
     cce:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <DIO_voidSetPortValue>

    //generate enable pulse
    DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_E_PORT , DIO_u8HIGH);
     cd2:	82 e0       	ldi	r24, 0x02	; 2
     cd4:	62 e0       	ldi	r22, 0x02	; 2
     cd6:	41 e0       	ldi	r20, 0x01	; 1
     cd8:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <DIO_voidSetPinValue>
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	a0 e0       	ldi	r26, 0x00	; 0
     ce2:	b0 e4       	ldi	r27, 0x40	; 64
     ce4:	8b 87       	std	Y+11, r24	; 0x0b
     ce6:	9c 87       	std	Y+12, r25	; 0x0c
     ce8:	ad 87       	std	Y+13, r26	; 0x0d
     cea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cec:	6b 85       	ldd	r22, Y+11	; 0x0b
     cee:	7c 85       	ldd	r23, Y+12	; 0x0c
     cf0:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf2:	9e 85       	ldd	r25, Y+14	; 0x0e
     cf4:	20 e0       	ldi	r18, 0x00	; 0
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	4a ef       	ldi	r20, 0xFA	; 250
     cfa:	54 e4       	ldi	r21, 0x44	; 68
     cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d00:	dc 01       	movw	r26, r24
     d02:	cb 01       	movw	r24, r22
     d04:	8f 83       	std	Y+7, r24	; 0x07
     d06:	98 87       	std	Y+8, r25	; 0x08
     d08:	a9 87       	std	Y+9, r26	; 0x09
     d0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d0c:	6f 81       	ldd	r22, Y+7	; 0x07
     d0e:	78 85       	ldd	r23, Y+8	; 0x08
     d10:	89 85       	ldd	r24, Y+9	; 0x09
     d12:	9a 85       	ldd	r25, Y+10	; 0x0a
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	40 e8       	ldi	r20, 0x80	; 128
     d1a:	5f e3       	ldi	r21, 0x3F	; 63
     d1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d20:	88 23       	and	r24, r24
     d22:	2c f4       	brge	.+10     	; 0xd2e <CLCD_voidSendData+0x8e>
		__ticks = 1;
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	9e 83       	std	Y+6, r25	; 0x06
     d2a:	8d 83       	std	Y+5, r24	; 0x05
     d2c:	3f c0       	rjmp	.+126    	; 0xdac <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     d2e:	6f 81       	ldd	r22, Y+7	; 0x07
     d30:	78 85       	ldd	r23, Y+8	; 0x08
     d32:	89 85       	ldd	r24, Y+9	; 0x09
     d34:	9a 85       	ldd	r25, Y+10	; 0x0a
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	3f ef       	ldi	r19, 0xFF	; 255
     d3a:	4f e7       	ldi	r20, 0x7F	; 127
     d3c:	57 e4       	ldi	r21, 0x47	; 71
     d3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d42:	18 16       	cp	r1, r24
     d44:	4c f5       	brge	.+82     	; 0xd98 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d46:	6b 85       	ldd	r22, Y+11	; 0x0b
     d48:	7c 85       	ldd	r23, Y+12	; 0x0c
     d4a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d4c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	40 e2       	ldi	r20, 0x20	; 32
     d54:	51 e4       	ldi	r21, 0x41	; 65
     d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d5a:	dc 01       	movw	r26, r24
     d5c:	cb 01       	movw	r24, r22
     d5e:	bc 01       	movw	r22, r24
     d60:	cd 01       	movw	r24, r26
     d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d66:	dc 01       	movw	r26, r24
     d68:	cb 01       	movw	r24, r22
     d6a:	9e 83       	std	Y+6, r25	; 0x06
     d6c:	8d 83       	std	Y+5, r24	; 0x05
     d6e:	0f c0       	rjmp	.+30     	; 0xd8e <CLCD_voidSendData+0xee>
     d70:	88 ec       	ldi	r24, 0xC8	; 200
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	9c 83       	std	Y+4, r25	; 0x04
     d76:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d78:	8b 81       	ldd	r24, Y+3	; 0x03
     d7a:	9c 81       	ldd	r25, Y+4	; 0x04
     d7c:	01 97       	sbiw	r24, 0x01	; 1
     d7e:	f1 f7       	brne	.-4      	; 0xd7c <CLCD_voidSendData+0xdc>
     d80:	9c 83       	std	Y+4, r25	; 0x04
     d82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d84:	8d 81       	ldd	r24, Y+5	; 0x05
     d86:	9e 81       	ldd	r25, Y+6	; 0x06
     d88:	01 97       	sbiw	r24, 0x01	; 1
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	00 97       	sbiw	r24, 0x00	; 0
     d94:	69 f7       	brne	.-38     	; 0xd70 <CLCD_voidSendData+0xd0>
     d96:	14 c0       	rjmp	.+40     	; 0xdc0 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d98:	6f 81       	ldd	r22, Y+7	; 0x07
     d9a:	78 85       	ldd	r23, Y+8	; 0x08
     d9c:	89 85       	ldd	r24, Y+9	; 0x09
     d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da4:	dc 01       	movw	r26, r24
     da6:	cb 01       	movw	r24, r22
     da8:	9e 83       	std	Y+6, r25	; 0x06
     daa:	8d 83       	std	Y+5, r24	; 0x05
     dac:	8d 81       	ldd	r24, Y+5	; 0x05
     dae:	9e 81       	ldd	r25, Y+6	; 0x06
     db0:	9a 83       	std	Y+2, r25	; 0x02
     db2:	89 83       	std	Y+1, r24	; 0x01
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	9a 81       	ldd	r25, Y+2	; 0x02
     db8:	01 97       	sbiw	r24, 0x01	; 1
     dba:	f1 f7       	brne	.-4      	; 0xdb8 <CLCD_voidSendData+0x118>
     dbc:	9a 83       	std	Y+2, r25	; 0x02
     dbe:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_E_PORT , DIO_u8LOW);
     dc0:	82 e0       	ldi	r24, 0x02	; 2
     dc2:	62 e0       	ldi	r22, 0x02	; 2
     dc4:	40 e0       	ldi	r20, 0x00	; 0
     dc6:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <DIO_voidSetPinValue>

}
     dca:	2f 96       	adiw	r28, 0x0f	; 15
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	de bf       	out	0x3e, r29	; 62
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	cd bf       	out	0x3d, r28	; 61
     dd6:	cf 91       	pop	r28
     dd8:	df 91       	pop	r29
     dda:	08 95       	ret

00000ddc <CLCD_voidSendCommand>:
void CLCD_voidSendCommand(u8 Copy_u8DCommand)
{
     ddc:	df 93       	push	r29
     dde:	cf 93       	push	r28
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	2f 97       	sbiw	r28, 0x0f	; 15
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	f8 94       	cli
     dea:	de bf       	out	0x3e, r29	; 62
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	cd bf       	out	0x3d, r28	; 61
     df0:	8f 87       	std	Y+15, r24	; 0x0f
    //Set rs pin to high for send data
    DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_RS_PORT , DIO_u8LOW);
     df2:	82 e0       	ldi	r24, 0x02	; 2
     df4:	60 e0       	ldi	r22, 0x00	; 0
     df6:	40 e0       	ldi	r20, 0x00	; 0
     df8:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <DIO_voidSetPinValue>

    //Set rw pin to low for write
    DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_RW_PORT , DIO_u8LOW);
     dfc:	82 e0       	ldi	r24, 0x02	; 2
     dfe:	61 e0       	ldi	r22, 0x01	; 1
     e00:	40 e0       	ldi	r20, 0x00	; 0
     e02:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <DIO_voidSetPinValue>

    //Put data
    DIO_voidSetPortValue(CLCD_DATA_PORT , Copy_u8DCommand);
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	6f 85       	ldd	r22, Y+15	; 0x0f
     e0a:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <DIO_voidSetPortValue>

    //generate enable pulse
    DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_E_PORT , DIO_u8HIGH);
     e0e:	82 e0       	ldi	r24, 0x02	; 2
     e10:	62 e0       	ldi	r22, 0x02	; 2
     e12:	41 e0       	ldi	r20, 0x01	; 1
     e14:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <DIO_voidSetPinValue>
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	a0 e0       	ldi	r26, 0x00	; 0
     e1e:	b0 e4       	ldi	r27, 0x40	; 64
     e20:	8b 87       	std	Y+11, r24	; 0x0b
     e22:	9c 87       	std	Y+12, r25	; 0x0c
     e24:	ad 87       	std	Y+13, r26	; 0x0d
     e26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e28:	6b 85       	ldd	r22, Y+11	; 0x0b
     e2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	4a ef       	ldi	r20, 0xFA	; 250
     e36:	54 e4       	ldi	r21, 0x44	; 68
     e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e3c:	dc 01       	movw	r26, r24
     e3e:	cb 01       	movw	r24, r22
     e40:	8f 83       	std	Y+7, r24	; 0x07
     e42:	98 87       	std	Y+8, r25	; 0x08
     e44:	a9 87       	std	Y+9, r26	; 0x09
     e46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e48:	6f 81       	ldd	r22, Y+7	; 0x07
     e4a:	78 85       	ldd	r23, Y+8	; 0x08
     e4c:	89 85       	ldd	r24, Y+9	; 0x09
     e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	40 e8       	ldi	r20, 0x80	; 128
     e56:	5f e3       	ldi	r21, 0x3F	; 63
     e58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e5c:	88 23       	and	r24, r24
     e5e:	2c f4       	brge	.+10     	; 0xe6a <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	9e 83       	std	Y+6, r25	; 0x06
     e66:	8d 83       	std	Y+5, r24	; 0x05
     e68:	3f c0       	rjmp	.+126    	; 0xee8 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     e6a:	6f 81       	ldd	r22, Y+7	; 0x07
     e6c:	78 85       	ldd	r23, Y+8	; 0x08
     e6e:	89 85       	ldd	r24, Y+9	; 0x09
     e70:	9a 85       	ldd	r25, Y+10	; 0x0a
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	3f ef       	ldi	r19, 0xFF	; 255
     e76:	4f e7       	ldi	r20, 0x7F	; 127
     e78:	57 e4       	ldi	r21, 0x47	; 71
     e7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e7e:	18 16       	cp	r1, r24
     e80:	4c f5       	brge	.+82     	; 0xed4 <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e82:	6b 85       	ldd	r22, Y+11	; 0x0b
     e84:	7c 85       	ldd	r23, Y+12	; 0x0c
     e86:	8d 85       	ldd	r24, Y+13	; 0x0d
     e88:	9e 85       	ldd	r25, Y+14	; 0x0e
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	40 e2       	ldi	r20, 0x20	; 32
     e90:	51 e4       	ldi	r21, 0x41	; 65
     e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e96:	dc 01       	movw	r26, r24
     e98:	cb 01       	movw	r24, r22
     e9a:	bc 01       	movw	r22, r24
     e9c:	cd 01       	movw	r24, r26
     e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	9e 83       	std	Y+6, r25	; 0x06
     ea8:	8d 83       	std	Y+5, r24	; 0x05
     eaa:	0f c0       	rjmp	.+30     	; 0xeca <CLCD_voidSendCommand+0xee>
     eac:	88 ec       	ldi	r24, 0xC8	; 200
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	9c 83       	std	Y+4, r25	; 0x04
     eb2:	8b 83       	std	Y+3, r24	; 0x03
     eb4:	8b 81       	ldd	r24, Y+3	; 0x03
     eb6:	9c 81       	ldd	r25, Y+4	; 0x04
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	f1 f7       	brne	.-4      	; 0xeb8 <CLCD_voidSendCommand+0xdc>
     ebc:	9c 83       	std	Y+4, r25	; 0x04
     ebe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ec0:	8d 81       	ldd	r24, Y+5	; 0x05
     ec2:	9e 81       	ldd	r25, Y+6	; 0x06
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	9e 83       	std	Y+6, r25	; 0x06
     ec8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eca:	8d 81       	ldd	r24, Y+5	; 0x05
     ecc:	9e 81       	ldd	r25, Y+6	; 0x06
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	69 f7       	brne	.-38     	; 0xeac <CLCD_voidSendCommand+0xd0>
     ed2:	14 c0       	rjmp	.+40     	; 0xefc <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ed4:	6f 81       	ldd	r22, Y+7	; 0x07
     ed6:	78 85       	ldd	r23, Y+8	; 0x08
     ed8:	89 85       	ldd	r24, Y+9	; 0x09
     eda:	9a 85       	ldd	r25, Y+10	; 0x0a
     edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ee0:	dc 01       	movw	r26, r24
     ee2:	cb 01       	movw	r24, r22
     ee4:	9e 83       	std	Y+6, r25	; 0x06
     ee6:	8d 83       	std	Y+5, r24	; 0x05
     ee8:	8d 81       	ldd	r24, Y+5	; 0x05
     eea:	9e 81       	ldd	r25, Y+6	; 0x06
     eec:	9a 83       	std	Y+2, r25	; 0x02
     eee:	89 83       	std	Y+1, r24	; 0x01
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	9a 81       	ldd	r25, Y+2	; 0x02
     ef4:	01 97       	sbiw	r24, 0x01	; 1
     ef6:	f1 f7       	brne	.-4      	; 0xef4 <CLCD_voidSendCommand+0x118>
     ef8:	9a 83       	std	Y+2, r25	; 0x02
     efa:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_E_PORT , DIO_u8LOW);
     efc:	82 e0       	ldi	r24, 0x02	; 2
     efe:	62 e0       	ldi	r22, 0x02	; 2
     f00:	40 e0       	ldi	r20, 0x00	; 0
     f02:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <DIO_voidSetPinValue>
}
     f06:	2f 96       	adiw	r28, 0x0f	; 15
     f08:	0f b6       	in	r0, 0x3f	; 63
     f0a:	f8 94       	cli
     f0c:	de bf       	out	0x3e, r29	; 62
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	cd bf       	out	0x3d, r28	; 61
     f12:	cf 91       	pop	r28
     f14:	df 91       	pop	r29
     f16:	08 95       	ret

00000f18 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
     f20:	2e 97       	sbiw	r28, 0x0e	; 14
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPortDirection(CLCD_DATA_PORT , DIO_u8PORTOUTPUT);
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	6f ef       	ldi	r22, 0xFF	; 255
     f30:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <DIO_voidSetPortDirection>

	DIO_voidSetPinDirection(CLCD_CTRL_PORT , CLCD_RS_PORT , DIO_u8OUTPUT);
     f34:	82 e0       	ldi	r24, 0x02	; 2
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	41 e0       	ldi	r20, 0x01	; 1
     f3a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CLCD_CTRL_PORT , CLCD_RW_PORT , DIO_u8OUTPUT);
     f3e:	82 e0       	ldi	r24, 0x02	; 2
     f40:	61 e0       	ldi	r22, 0x01	; 1
     f42:	41 e0       	ldi	r20, 0x01	; 1
     f44:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CLCD_CTRL_PORT , CLCD_E_PORT , DIO_u8OUTPUT);
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	62 e0       	ldi	r22, 0x02	; 2
     f4c:	41 e0       	ldi	r20, 0x01	; 1
     f4e:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_voidSetPinDirection>
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	a0 e2       	ldi	r26, 0x20	; 32
     f58:	b2 e4       	ldi	r27, 0x42	; 66
     f5a:	8b 87       	std	Y+11, r24	; 0x0b
     f5c:	9c 87       	std	Y+12, r25	; 0x0c
     f5e:	ad 87       	std	Y+13, r26	; 0x0d
     f60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f62:	6b 85       	ldd	r22, Y+11	; 0x0b
     f64:	7c 85       	ldd	r23, Y+12	; 0x0c
     f66:	8d 85       	ldd	r24, Y+13	; 0x0d
     f68:	9e 85       	ldd	r25, Y+14	; 0x0e
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	4a ef       	ldi	r20, 0xFA	; 250
     f70:	54 e4       	ldi	r21, 0x44	; 68
     f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f76:	dc 01       	movw	r26, r24
     f78:	cb 01       	movw	r24, r22
     f7a:	8f 83       	std	Y+7, r24	; 0x07
     f7c:	98 87       	std	Y+8, r25	; 0x08
     f7e:	a9 87       	std	Y+9, r26	; 0x09
     f80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f82:	6f 81       	ldd	r22, Y+7	; 0x07
     f84:	78 85       	ldd	r23, Y+8	; 0x08
     f86:	89 85       	ldd	r24, Y+9	; 0x09
     f88:	9a 85       	ldd	r25, Y+10	; 0x0a
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e8       	ldi	r20, 0x80	; 128
     f90:	5f e3       	ldi	r21, 0x3F	; 63
     f92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f96:	88 23       	and	r24, r24
     f98:	2c f4       	brge	.+10     	; 0xfa4 <CLCD_voidInit+0x8c>
		__ticks = 1;
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	9e 83       	std	Y+6, r25	; 0x06
     fa0:	8d 83       	std	Y+5, r24	; 0x05
     fa2:	3f c0       	rjmp	.+126    	; 0x1022 <CLCD_voidInit+0x10a>
	else if (__tmp > 65535)
     fa4:	6f 81       	ldd	r22, Y+7	; 0x07
     fa6:	78 85       	ldd	r23, Y+8	; 0x08
     fa8:	89 85       	ldd	r24, Y+9	; 0x09
     faa:	9a 85       	ldd	r25, Y+10	; 0x0a
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	3f ef       	ldi	r19, 0xFF	; 255
     fb0:	4f e7       	ldi	r20, 0x7F	; 127
     fb2:	57 e4       	ldi	r21, 0x47	; 71
     fb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fb8:	18 16       	cp	r1, r24
     fba:	4c f5       	brge	.+82     	; 0x100e <CLCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fbc:	6b 85       	ldd	r22, Y+11	; 0x0b
     fbe:	7c 85       	ldd	r23, Y+12	; 0x0c
     fc0:	8d 85       	ldd	r24, Y+13	; 0x0d
     fc2:	9e 85       	ldd	r25, Y+14	; 0x0e
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	40 e2       	ldi	r20, 0x20	; 32
     fca:	51 e4       	ldi	r21, 0x41	; 65
     fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd0:	dc 01       	movw	r26, r24
     fd2:	cb 01       	movw	r24, r22
     fd4:	bc 01       	movw	r22, r24
     fd6:	cd 01       	movw	r24, r26
     fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fdc:	dc 01       	movw	r26, r24
     fde:	cb 01       	movw	r24, r22
     fe0:	9e 83       	std	Y+6, r25	; 0x06
     fe2:	8d 83       	std	Y+5, r24	; 0x05
     fe4:	0f c0       	rjmp	.+30     	; 0x1004 <CLCD_voidInit+0xec>
     fe6:	88 ec       	ldi	r24, 0xC8	; 200
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	9c 83       	std	Y+4, r25	; 0x04
     fec:	8b 83       	std	Y+3, r24	; 0x03
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	9c 81       	ldd	r25, Y+4	; 0x04
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	f1 f7       	brne	.-4      	; 0xff2 <CLCD_voidInit+0xda>
     ff6:	9c 83       	std	Y+4, r25	; 0x04
     ff8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ffa:	8d 81       	ldd	r24, Y+5	; 0x05
     ffc:	9e 81       	ldd	r25, Y+6	; 0x06
     ffe:	01 97       	sbiw	r24, 0x01	; 1
    1000:	9e 83       	std	Y+6, r25	; 0x06
    1002:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1004:	8d 81       	ldd	r24, Y+5	; 0x05
    1006:	9e 81       	ldd	r25, Y+6	; 0x06
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	69 f7       	brne	.-38     	; 0xfe6 <CLCD_voidInit+0xce>
    100c:	14 c0       	rjmp	.+40     	; 0x1036 <CLCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    100e:	6f 81       	ldd	r22, Y+7	; 0x07
    1010:	78 85       	ldd	r23, Y+8	; 0x08
    1012:	89 85       	ldd	r24, Y+9	; 0x09
    1014:	9a 85       	ldd	r25, Y+10	; 0x0a
    1016:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	9e 83       	std	Y+6, r25	; 0x06
    1020:	8d 83       	std	Y+5, r24	; 0x05
    1022:	8d 81       	ldd	r24, Y+5	; 0x05
    1024:	9e 81       	ldd	r25, Y+6	; 0x06
    1026:	9a 83       	std	Y+2, r25	; 0x02
    1028:	89 83       	std	Y+1, r24	; 0x01
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	9a 81       	ldd	r25, Y+2	; 0x02
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	f1 f7       	brne	.-4      	; 0x102e <CLCD_voidInit+0x116>
    1032:	9a 83       	std	Y+2, r25	; 0x02
    1034:	89 83       	std	Y+1, r24	; 0x01

    //Wait for more than 30 ms
    _delay_ms(40);
    //Set Function
    CLCD_voidSendCommand(0b00111000);
    1036:	88 e3       	ldi	r24, 0x38	; 56
    1038:	0e 94 ee 06 	call	0xddc	; 0xddc <CLCD_voidSendCommand>
    //Display ON/OFF
    CLCD_voidSendCommand(0b00001111);
    103c:	8f e0       	ldi	r24, 0x0F	; 15
    103e:	0e 94 ee 06 	call	0xddc	; 0xddc <CLCD_voidSendCommand>
    //Display Clear
    CLCD_voidSendCommand(0b00000001);
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	0e 94 ee 06 	call	0xddc	; 0xddc <CLCD_voidSendCommand>
}
    1048:	2e 96       	adiw	r28, 0x0e	; 14
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	de bf       	out	0x3e, r29	; 62
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	cd bf       	out	0x3d, r28	; 61
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <CLCD_voidSendString>:

void CLCD_voidSendString(const char *Copy_pString)
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	00 d0       	rcall	.+0      	; 0x1060 <CLCD_voidSendString+0x6>
    1060:	0f 92       	push	r0
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	9b 83       	std	Y+3, r25	; 0x03
    1068:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
    106a:	19 82       	std	Y+1, r1	; 0x01
    106c:	0e c0       	rjmp	.+28     	; 0x108a <CLCD_voidSendString+0x30>
	while(Copy_pString[Local_u8Counter] != '\0')
	{
		CLCD_voidSendData(Copy_pString[Local_u8Counter]);
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	9b 81       	ldd	r25, Y+3	; 0x03
    1078:	fc 01       	movw	r30, r24
    107a:	e2 0f       	add	r30, r18
    107c:	f3 1f       	adc	r31, r19
    107e:	80 81       	ld	r24, Z
    1080:	0e 94 50 06 	call	0xca0	; 0xca0 <CLCD_voidSendData>
		Local_u8Counter++;
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	8f 5f       	subi	r24, 0xFF	; 255
    1088:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char *Copy_pString)
{
	u8 Local_u8Counter=0;
	while(Copy_pString[Local_u8Counter] != '\0')
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	9b 81       	ldd	r25, Y+3	; 0x03
    1094:	fc 01       	movw	r30, r24
    1096:	e2 0f       	add	r30, r18
    1098:	f3 1f       	adc	r31, r19
    109a:	80 81       	ld	r24, Z
    109c:	88 23       	and	r24, r24
    109e:	39 f7       	brne	.-50     	; 0x106e <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <CLCD_voidSendInteger>:


void CLCD_voidSendInteger(u32 Copy_u32Integer)
{
    10ac:	0f 93       	push	r16
    10ae:	1f 93       	push	r17
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	60 97       	sbiw	r28, 0x10	; 16
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	6d 87       	std	Y+13, r22	; 0x0d
    10c6:	7e 87       	std	Y+14, r23	; 0x0e
    10c8:	8f 87       	std	Y+15, r24	; 0x0f
    10ca:	98 8b       	std	Y+16, r25	; 0x10
	u8 Local_u8Number[10];
	u8 i=0;
    10cc:	1a 82       	std	Y+2, r1	; 0x02
    10ce:	2e c0       	rjmp	.+92     	; 0x112c <CLCD_voidSendInteger+0x80>
	while(Copy_u32Integer >= 10)
	{
		Local_u8Number[i] = Copy_u32Integer%10 + ZERO_ASCII;
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	08 2f       	mov	r16, r24
    10d4:	10 e0       	ldi	r17, 0x00	; 0
    10d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10da:	af 85       	ldd	r26, Y+15	; 0x0f
    10dc:	b8 89       	ldd	r27, Y+16	; 0x10
    10de:	2a e0       	ldi	r18, 0x0A	; 10
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	40 e0       	ldi	r20, 0x00	; 0
    10e4:	50 e0       	ldi	r21, 0x00	; 0
    10e6:	bc 01       	movw	r22, r24
    10e8:	cd 01       	movw	r24, r26
    10ea:	0e 94 88 14 	call	0x2910	; 0x2910 <__udivmodsi4>
    10ee:	dc 01       	movw	r26, r24
    10f0:	cb 01       	movw	r24, r22
    10f2:	28 2f       	mov	r18, r24
    10f4:	20 5d       	subi	r18, 0xD0	; 208
    10f6:	ce 01       	movw	r24, r28
    10f8:	03 96       	adiw	r24, 0x03	; 3
    10fa:	fc 01       	movw	r30, r24
    10fc:	e0 0f       	add	r30, r16
    10fe:	f1 1f       	adc	r31, r17
    1100:	20 83       	st	Z, r18
		Copy_u32Integer = Copy_u32Integer/10;
    1102:	8d 85       	ldd	r24, Y+13	; 0x0d
    1104:	9e 85       	ldd	r25, Y+14	; 0x0e
    1106:	af 85       	ldd	r26, Y+15	; 0x0f
    1108:	b8 89       	ldd	r27, Y+16	; 0x10
    110a:	2a e0       	ldi	r18, 0x0A	; 10
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	40 e0       	ldi	r20, 0x00	; 0
    1110:	50 e0       	ldi	r21, 0x00	; 0
    1112:	bc 01       	movw	r22, r24
    1114:	cd 01       	movw	r24, r26
    1116:	0e 94 88 14 	call	0x2910	; 0x2910 <__udivmodsi4>
    111a:	da 01       	movw	r26, r20
    111c:	c9 01       	movw	r24, r18
    111e:	8d 87       	std	Y+13, r24	; 0x0d
    1120:	9e 87       	std	Y+14, r25	; 0x0e
    1122:	af 87       	std	Y+15, r26	; 0x0f
    1124:	b8 8b       	std	Y+16, r27	; 0x10
		i++;
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	8f 5f       	subi	r24, 0xFF	; 255
    112a:	8a 83       	std	Y+2, r24	; 0x02

void CLCD_voidSendInteger(u32 Copy_u32Integer)
{
	u8 Local_u8Number[10];
	u8 i=0;
	while(Copy_u32Integer >= 10)
    112c:	8d 85       	ldd	r24, Y+13	; 0x0d
    112e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1130:	af 85       	ldd	r26, Y+15	; 0x0f
    1132:	b8 89       	ldd	r27, Y+16	; 0x10
    1134:	8a 30       	cpi	r24, 0x0A	; 10
    1136:	91 05       	cpc	r25, r1
    1138:	a1 05       	cpc	r26, r1
    113a:	b1 05       	cpc	r27, r1
    113c:	48 f6       	brcc	.-110    	; 0x10d0 <CLCD_voidSendInteger+0x24>
	{
		Local_u8Number[i] = Copy_u32Integer%10 + ZERO_ASCII;
		Copy_u32Integer = Copy_u32Integer/10;
		i++;
	}
	Local_u8Number[i] = Copy_u32Integer + ZERO_ASCII;
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	8d 85       	ldd	r24, Y+13	; 0x0d
    1146:	48 2f       	mov	r20, r24
    1148:	40 5d       	subi	r20, 0xD0	; 208
    114a:	ce 01       	movw	r24, r28
    114c:	03 96       	adiw	r24, 0x03	; 3
    114e:	fc 01       	movw	r30, r24
    1150:	e2 0f       	add	r30, r18
    1152:	f3 1f       	adc	r31, r19
    1154:	40 83       	st	Z, r20

	for(s8 j=i ; j>=0 ; j--)
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	89 83       	std	Y+1, r24	; 0x01
    115a:	10 c0       	rjmp	.+32     	; 0x117c <CLCD_voidSendInteger+0xd0>
	{
		CLCD_voidSendData(Local_u8Number[j]);
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	28 2f       	mov	r18, r24
    1160:	33 27       	eor	r19, r19
    1162:	27 fd       	sbrc	r18, 7
    1164:	30 95       	com	r19
    1166:	ce 01       	movw	r24, r28
    1168:	03 96       	adiw	r24, 0x03	; 3
    116a:	fc 01       	movw	r30, r24
    116c:	e2 0f       	add	r30, r18
    116e:	f3 1f       	adc	r31, r19
    1170:	80 81       	ld	r24, Z
    1172:	0e 94 50 06 	call	0xca0	; 0xca0 <CLCD_voidSendData>
		Copy_u32Integer = Copy_u32Integer/10;
		i++;
	}
	Local_u8Number[i] = Copy_u32Integer + ZERO_ASCII;

	for(s8 j=i ; j>=0 ; j--)
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	81 50       	subi	r24, 0x01	; 1
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	88 23       	and	r24, r24
    1180:	6c f7       	brge	.-38     	; 0x115c <CLCD_voidSendInteger+0xb0>
	{
		CLCD_voidSendData(Local_u8Number[j]);
	}
}
    1182:	60 96       	adiw	r28, 0x10	; 16
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	cd bf       	out	0x3d, r28	; 61
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	1f 91       	pop	r17
    1194:	0f 91       	pop	r16
    1196:	08 95       	ret

00001198 <CLCD_voidSetXYPosition>:



void CLCD_voidSetXYPosition(u8 Copy_u8XPositin , u8 Copy_u8YPositin)
{
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	00 d0       	rcall	.+0      	; 0x119e <CLCD_voidSetXYPosition+0x6>
    119e:	0f 92       	push	r0
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
    11a4:	8a 83       	std	Y+2, r24	; 0x02
    11a6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;

	if(Copy_u8YPositin == 0)
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	88 23       	and	r24, r24
    11ac:	19 f4       	brne	.+6      	; 0x11b4 <CLCD_voidSetXYPosition+0x1c>
	{
		Local_u8Address = Copy_u8XPositin;
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	89 83       	std	Y+1, r24	; 0x01
    11b2:	06 c0       	rjmp	.+12     	; 0x11c0 <CLCD_voidSetXYPosition+0x28>
	}
	else if(Copy_u8YPositin == 1)
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	19 f4       	brne	.+6      	; 0x11c0 <CLCD_voidSetXYPosition+0x28>
	{
		Local_u8Address = Copy_u8XPositin + 0x40;
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	80 5c       	subi	r24, 0xC0	; 192
    11be:	89 83       	std	Y+1, r24	; 0x01
	}
	SET_BIT(Local_u8Address , 7);
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	80 68       	ori	r24, 0x80	; 128
    11c4:	89 83       	std	Y+1, r24	; 0x01

	CLCD_voidSendCommand(Local_u8Address);
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	0e 94 ee 06 	call	0xddc	; 0xddc <CLCD_voidSendCommand>
}
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <CLCD_voidScrollTextLeftToRight>:



void CLCD_voidScrollTextLeftToRight(char *Copy_u8Text)
{
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	63 97       	sbiw	r28, 0x13	; 19
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	9b 8b       	std	Y+19, r25	; 0x13
    11ee:	8a 8b       	std	Y+18, r24	; 0x12
	u8 STR_u8Lenght=0;
    11f0:	19 8a       	std	Y+17, r1	; 0x11
    11f2:	03 c0       	rjmp	.+6      	; 0x11fa <CLCD_voidScrollTextLeftToRight+0x22>
	while(Copy_u8Text[STR_u8Lenght] != '\0')
	{
		STR_u8Lenght++;
    11f4:	89 89       	ldd	r24, Y+17	; 0x11
    11f6:	8f 5f       	subi	r24, 0xFF	; 255
    11f8:	89 8b       	std	Y+17, r24	; 0x11


void CLCD_voidScrollTextLeftToRight(char *Copy_u8Text)
{
	u8 STR_u8Lenght=0;
	while(Copy_u8Text[STR_u8Lenght] != '\0')
    11fa:	89 89       	ldd	r24, Y+17	; 0x11
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	8a 89       	ldd	r24, Y+18	; 0x12
    1202:	9b 89       	ldd	r25, Y+19	; 0x13
    1204:	fc 01       	movw	r30, r24
    1206:	e2 0f       	add	r30, r18
    1208:	f3 1f       	adc	r31, r19
    120a:	80 81       	ld	r24, Z
    120c:	88 23       	and	r24, r24
    120e:	91 f7       	brne	.-28     	; 0x11f4 <CLCD_voidScrollTextLeftToRight+0x1c>
	{
		STR_u8Lenght++;
	}

	for(s8 position = -STR_u8Lenght ; position<=16 ; position++)
    1210:	89 89       	ldd	r24, Y+17	; 0x11
    1212:	81 95       	neg	r24
    1214:	88 8b       	std	Y+16, r24	; 0x10
    1216:	b2 c0       	rjmp	.+356    	; 0x137c <CLCD_voidScrollTextLeftToRight+0x1a4>
	{
		CLCD_voidSendCommand(0x01);    //Clear Display
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	0e 94 ee 06 	call	0xddc	; 0xddc <CLCD_voidSendCommand>
		if(position >= 0) CLCD_voidSetXYPosition(position , 0);
    121e:	88 89       	ldd	r24, Y+16	; 0x10
    1220:	88 23       	and	r24, r24
    1222:	2c f0       	brlt	.+10     	; 0x122e <CLCD_voidScrollTextLeftToRight+0x56>
    1224:	88 89       	ldd	r24, Y+16	; 0x10
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	0e 94 cc 08 	call	0x1198	; 0x1198 <CLCD_voidSetXYPosition>
    122c:	07 c0       	rjmp	.+14     	; 0x123c <CLCD_voidScrollTextLeftToRight+0x64>
		else if(position < 0) CLCD_voidSetXYPosition(0 , 0);
    122e:	88 89       	ldd	r24, Y+16	; 0x10
    1230:	88 23       	and	r24, r24
    1232:	24 f4       	brge	.+8      	; 0x123c <CLCD_voidScrollTextLeftToRight+0x64>
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	0e 94 cc 08 	call	0x1198	; 0x1198 <CLCD_voidSetXYPosition>

		for(u8 i=0 ; i<STR_u8Lenght ; i++)
    123c:	1f 86       	std	Y+15, r1	; 0x0f
    123e:	25 c0       	rjmp	.+74     	; 0x128a <CLCD_voidScrollTextLeftToRight+0xb2>
		{
			if(i + position >= 0 && i + position < 16 )
    1240:	8f 85       	ldd	r24, Y+15	; 0x0f
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	88 89       	ldd	r24, Y+16	; 0x10
    1248:	99 27       	eor	r25, r25
    124a:	87 fd       	sbrc	r24, 7
    124c:	90 95       	com	r25
    124e:	82 0f       	add	r24, r18
    1250:	93 1f       	adc	r25, r19
    1252:	99 23       	and	r25, r25
    1254:	bc f0       	brlt	.+46     	; 0x1284 <CLCD_voidScrollTextLeftToRight+0xac>
    1256:	8f 85       	ldd	r24, Y+15	; 0x0f
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	88 89       	ldd	r24, Y+16	; 0x10
    125e:	99 27       	eor	r25, r25
    1260:	87 fd       	sbrc	r24, 7
    1262:	90 95       	com	r25
    1264:	82 0f       	add	r24, r18
    1266:	93 1f       	adc	r25, r19
    1268:	80 31       	cpi	r24, 0x10	; 16
    126a:	91 05       	cpc	r25, r1
    126c:	5c f4       	brge	.+22     	; 0x1284 <CLCD_voidScrollTextLeftToRight+0xac>
			{
				CLCD_voidSendData(Copy_u8Text[i]);
    126e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	8a 89       	ldd	r24, Y+18	; 0x12
    1276:	9b 89       	ldd	r25, Y+19	; 0x13
    1278:	fc 01       	movw	r30, r24
    127a:	e2 0f       	add	r30, r18
    127c:	f3 1f       	adc	r31, r19
    127e:	80 81       	ld	r24, Z
    1280:	0e 94 50 06 	call	0xca0	; 0xca0 <CLCD_voidSendData>
	{
		CLCD_voidSendCommand(0x01);    //Clear Display
		if(position >= 0) CLCD_voidSetXYPosition(position , 0);
		else if(position < 0) CLCD_voidSetXYPosition(0 , 0);

		for(u8 i=0 ; i<STR_u8Lenght ; i++)
    1284:	8f 85       	ldd	r24, Y+15	; 0x0f
    1286:	8f 5f       	subi	r24, 0xFF	; 255
    1288:	8f 87       	std	Y+15, r24	; 0x0f
    128a:	9f 85       	ldd	r25, Y+15	; 0x0f
    128c:	89 89       	ldd	r24, Y+17	; 0x11
    128e:	98 17       	cp	r25, r24
    1290:	b8 f2       	brcs	.-82     	; 0x1240 <CLCD_voidScrollTextLeftToRight+0x68>
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	a6 e9       	ldi	r26, 0x96	; 150
    1298:	b3 e4       	ldi	r27, 0x43	; 67
    129a:	8b 87       	std	Y+11, r24	; 0x0b
    129c:	9c 87       	std	Y+12, r25	; 0x0c
    129e:	ad 87       	std	Y+13, r26	; 0x0d
    12a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	4a ef       	ldi	r20, 0xFA	; 250
    12b0:	54 e4       	ldi	r21, 0x44	; 68
    12b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	8f 83       	std	Y+7, r24	; 0x07
    12bc:	98 87       	std	Y+8, r25	; 0x08
    12be:	a9 87       	std	Y+9, r26	; 0x09
    12c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12c2:	6f 81       	ldd	r22, Y+7	; 0x07
    12c4:	78 85       	ldd	r23, Y+8	; 0x08
    12c6:	89 85       	ldd	r24, Y+9	; 0x09
    12c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	40 e8       	ldi	r20, 0x80	; 128
    12d0:	5f e3       	ldi	r21, 0x3F	; 63
    12d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12d6:	88 23       	and	r24, r24
    12d8:	2c f4       	brge	.+10     	; 0x12e4 <CLCD_voidScrollTextLeftToRight+0x10c>
		__ticks = 1;
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	9e 83       	std	Y+6, r25	; 0x06
    12e0:	8d 83       	std	Y+5, r24	; 0x05
    12e2:	3f c0       	rjmp	.+126    	; 0x1362 <CLCD_voidScrollTextLeftToRight+0x18a>
	else if (__tmp > 65535)
    12e4:	6f 81       	ldd	r22, Y+7	; 0x07
    12e6:	78 85       	ldd	r23, Y+8	; 0x08
    12e8:	89 85       	ldd	r24, Y+9	; 0x09
    12ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	3f ef       	ldi	r19, 0xFF	; 255
    12f0:	4f e7       	ldi	r20, 0x7F	; 127
    12f2:	57 e4       	ldi	r21, 0x47	; 71
    12f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12f8:	18 16       	cp	r1, r24
    12fa:	4c f5       	brge	.+82     	; 0x134e <CLCD_voidScrollTextLeftToRight+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    12fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1300:	8d 85       	ldd	r24, Y+13	; 0x0d
    1302:	9e 85       	ldd	r25, Y+14	; 0x0e
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	40 e2       	ldi	r20, 0x20	; 32
    130a:	51 e4       	ldi	r21, 0x41	; 65
    130c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	bc 01       	movw	r22, r24
    1316:	cd 01       	movw	r24, r26
    1318:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	9e 83       	std	Y+6, r25	; 0x06
    1322:	8d 83       	std	Y+5, r24	; 0x05
    1324:	0f c0       	rjmp	.+30     	; 0x1344 <CLCD_voidScrollTextLeftToRight+0x16c>
    1326:	88 ec       	ldi	r24, 0xC8	; 200
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	9c 83       	std	Y+4, r25	; 0x04
    132c:	8b 83       	std	Y+3, r24	; 0x03
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	9c 81       	ldd	r25, Y+4	; 0x04
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	f1 f7       	brne	.-4      	; 0x1332 <CLCD_voidScrollTextLeftToRight+0x15a>
    1336:	9c 83       	std	Y+4, r25	; 0x04
    1338:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133a:	8d 81       	ldd	r24, Y+5	; 0x05
    133c:	9e 81       	ldd	r25, Y+6	; 0x06
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	9e 83       	std	Y+6, r25	; 0x06
    1342:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1344:	8d 81       	ldd	r24, Y+5	; 0x05
    1346:	9e 81       	ldd	r25, Y+6	; 0x06
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	69 f7       	brne	.-38     	; 0x1326 <CLCD_voidScrollTextLeftToRight+0x14e>
    134c:	14 c0       	rjmp	.+40     	; 0x1376 <CLCD_voidScrollTextLeftToRight+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    134e:	6f 81       	ldd	r22, Y+7	; 0x07
    1350:	78 85       	ldd	r23, Y+8	; 0x08
    1352:	89 85       	ldd	r24, Y+9	; 0x09
    1354:	9a 85       	ldd	r25, Y+10	; 0x0a
    1356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	9e 83       	std	Y+6, r25	; 0x06
    1360:	8d 83       	std	Y+5, r24	; 0x05
    1362:	8d 81       	ldd	r24, Y+5	; 0x05
    1364:	9e 81       	ldd	r25, Y+6	; 0x06
    1366:	9a 83       	std	Y+2, r25	; 0x02
    1368:	89 83       	std	Y+1, r24	; 0x01
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	9a 81       	ldd	r25, Y+2	; 0x02
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	f1 f7       	brne	.-4      	; 0x136e <CLCD_voidScrollTextLeftToRight+0x196>
    1372:	9a 83       	std	Y+2, r25	; 0x02
    1374:	89 83       	std	Y+1, r24	; 0x01
	while(Copy_u8Text[STR_u8Lenght] != '\0')
	{
		STR_u8Lenght++;
	}

	for(s8 position = -STR_u8Lenght ; position<=16 ; position++)
    1376:	88 89       	ldd	r24, Y+16	; 0x10
    1378:	8f 5f       	subi	r24, 0xFF	; 255
    137a:	88 8b       	std	Y+16, r24	; 0x10
    137c:	88 89       	ldd	r24, Y+16	; 0x10
    137e:	81 31       	cpi	r24, 0x11	; 17
    1380:	0c f4       	brge	.+2      	; 0x1384 <CLCD_voidScrollTextLeftToRight+0x1ac>
    1382:	4a cf       	rjmp	.-364    	; 0x1218 <CLCD_voidScrollTextLeftToRight+0x40>
				CLCD_voidSendData(Copy_u8Text[i]);
			}
		}
		_delay_ms(300);
	}
}
    1384:	63 96       	adiw	r28, 0x13	; 19
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	08 95       	ret

00001396 <CLCD_voidScrollTextRightToLeft>:


void CLCD_voidScrollTextRightToLeft(char *Copy_u8Text)
{
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	63 97       	sbiw	r28, 0x13	; 19
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	cd bf       	out	0x3d, r28	; 61
    13aa:	9b 8b       	std	Y+19, r25	; 0x13
    13ac:	8a 8b       	std	Y+18, r24	; 0x12
    u8 STR_u8Length = 0;
    13ae:	19 8a       	std	Y+17, r1	; 0x11
    13b0:	03 c0       	rjmp	.+6      	; 0x13b8 <CLCD_voidScrollTextRightToLeft+0x22>

    while(Copy_u8Text[STR_u8Length] != '\0')
    {
        STR_u8Length++;
    13b2:	89 89       	ldd	r24, Y+17	; 0x11
    13b4:	8f 5f       	subi	r24, 0xFF	; 255
    13b6:	89 8b       	std	Y+17, r24	; 0x11

void CLCD_voidScrollTextRightToLeft(char *Copy_u8Text)
{
    u8 STR_u8Length = 0;

    while(Copy_u8Text[STR_u8Length] != '\0')
    13b8:	89 89       	ldd	r24, Y+17	; 0x11
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	8a 89       	ldd	r24, Y+18	; 0x12
    13c0:	9b 89       	ldd	r25, Y+19	; 0x13
    13c2:	fc 01       	movw	r30, r24
    13c4:	e2 0f       	add	r30, r18
    13c6:	f3 1f       	adc	r31, r19
    13c8:	80 81       	ld	r24, Z
    13ca:	88 23       	and	r24, r24
    13cc:	91 f7       	brne	.-28     	; 0x13b2 <CLCD_voidScrollTextRightToLeft+0x1c>
    {
        STR_u8Length++;
    }

    for(s8 position = 16; position >= -STR_u8Length; position--)
    13ce:	80 e1       	ldi	r24, 0x10	; 16
    13d0:	88 8b       	std	Y+16, r24	; 0x10
    13d2:	af c0       	rjmp	.+350    	; 0x1532 <CLCD_voidScrollTextRightToLeft+0x19c>
    {
        CLCD_voidSendCommand(0x01);  //Clear display
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	0e 94 ee 06 	call	0xddc	; 0xddc <CLCD_voidSendCommand>

        if(position >= 0)
    13da:	88 89       	ldd	r24, Y+16	; 0x10
    13dc:	88 23       	and	r24, r24
    13de:	2c f0       	brlt	.+10     	; 0x13ea <CLCD_voidScrollTextRightToLeft+0x54>
        {
            CLCD_voidSetXYPosition(position, 0);
    13e0:	88 89       	ldd	r24, Y+16	; 0x10
    13e2:	60 e0       	ldi	r22, 0x00	; 0
    13e4:	0e 94 cc 08 	call	0x1198	; 0x1198 <CLCD_voidSetXYPosition>
    13e8:	04 c0       	rjmp	.+8      	; 0x13f2 <CLCD_voidScrollTextRightToLeft+0x5c>
        }
        else
        {
            CLCD_voidSetXYPosition(0, 0);
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	60 e0       	ldi	r22, 0x00	; 0
    13ee:	0e 94 cc 08 	call	0x1198	; 0x1198 <CLCD_voidSetXYPosition>
        }

        for (u8 i = 0; i < STR_u8Length; i++)
    13f2:	1f 86       	std	Y+15, r1	; 0x0f
    13f4:	25 c0       	rjmp	.+74     	; 0x1440 <CLCD_voidScrollTextRightToLeft+0xaa>
        {
            if (i + position >= 0 && i + position < 16)
    13f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	88 89       	ldd	r24, Y+16	; 0x10
    13fe:	99 27       	eor	r25, r25
    1400:	87 fd       	sbrc	r24, 7
    1402:	90 95       	com	r25
    1404:	82 0f       	add	r24, r18
    1406:	93 1f       	adc	r25, r19
    1408:	99 23       	and	r25, r25
    140a:	bc f0       	brlt	.+46     	; 0x143a <CLCD_voidScrollTextRightToLeft+0xa4>
    140c:	8f 85       	ldd	r24, Y+15	; 0x0f
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	88 89       	ldd	r24, Y+16	; 0x10
    1414:	99 27       	eor	r25, r25
    1416:	87 fd       	sbrc	r24, 7
    1418:	90 95       	com	r25
    141a:	82 0f       	add	r24, r18
    141c:	93 1f       	adc	r25, r19
    141e:	80 31       	cpi	r24, 0x10	; 16
    1420:	91 05       	cpc	r25, r1
    1422:	5c f4       	brge	.+22     	; 0x143a <CLCD_voidScrollTextRightToLeft+0xa4>
            {
                CLCD_voidSendData(Copy_u8Text[i]);
    1424:	8f 85       	ldd	r24, Y+15	; 0x0f
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	8a 89       	ldd	r24, Y+18	; 0x12
    142c:	9b 89       	ldd	r25, Y+19	; 0x13
    142e:	fc 01       	movw	r30, r24
    1430:	e2 0f       	add	r30, r18
    1432:	f3 1f       	adc	r31, r19
    1434:	80 81       	ld	r24, Z
    1436:	0e 94 50 06 	call	0xca0	; 0xca0 <CLCD_voidSendData>
        else
        {
            CLCD_voidSetXYPosition(0, 0);
        }

        for (u8 i = 0; i < STR_u8Length; i++)
    143a:	8f 85       	ldd	r24, Y+15	; 0x0f
    143c:	8f 5f       	subi	r24, 0xFF	; 255
    143e:	8f 87       	std	Y+15, r24	; 0x0f
    1440:	9f 85       	ldd	r25, Y+15	; 0x0f
    1442:	89 89       	ldd	r24, Y+17	; 0x11
    1444:	98 17       	cp	r25, r24
    1446:	b8 f2       	brcs	.-82     	; 0x13f6 <CLCD_voidScrollTextRightToLeft+0x60>
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	a6 e9       	ldi	r26, 0x96	; 150
    144e:	b3 e4       	ldi	r27, 0x43	; 67
    1450:	8b 87       	std	Y+11, r24	; 0x0b
    1452:	9c 87       	std	Y+12, r25	; 0x0c
    1454:	ad 87       	std	Y+13, r26	; 0x0d
    1456:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1458:	6b 85       	ldd	r22, Y+11	; 0x0b
    145a:	7c 85       	ldd	r23, Y+12	; 0x0c
    145c:	8d 85       	ldd	r24, Y+13	; 0x0d
    145e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	4a ef       	ldi	r20, 0xFA	; 250
    1466:	54 e4       	ldi	r21, 0x44	; 68
    1468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	8f 83       	std	Y+7, r24	; 0x07
    1472:	98 87       	std	Y+8, r25	; 0x08
    1474:	a9 87       	std	Y+9, r26	; 0x09
    1476:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1478:	6f 81       	ldd	r22, Y+7	; 0x07
    147a:	78 85       	ldd	r23, Y+8	; 0x08
    147c:	89 85       	ldd	r24, Y+9	; 0x09
    147e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	40 e8       	ldi	r20, 0x80	; 128
    1486:	5f e3       	ldi	r21, 0x3F	; 63
    1488:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    148c:	88 23       	and	r24, r24
    148e:	2c f4       	brge	.+10     	; 0x149a <CLCD_voidScrollTextRightToLeft+0x104>
		__ticks = 1;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	9e 83       	std	Y+6, r25	; 0x06
    1496:	8d 83       	std	Y+5, r24	; 0x05
    1498:	3f c0       	rjmp	.+126    	; 0x1518 <CLCD_voidScrollTextRightToLeft+0x182>
	else if (__tmp > 65535)
    149a:	6f 81       	ldd	r22, Y+7	; 0x07
    149c:	78 85       	ldd	r23, Y+8	; 0x08
    149e:	89 85       	ldd	r24, Y+9	; 0x09
    14a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	3f ef       	ldi	r19, 0xFF	; 255
    14a6:	4f e7       	ldi	r20, 0x7F	; 127
    14a8:	57 e4       	ldi	r21, 0x47	; 71
    14aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14ae:	18 16       	cp	r1, r24
    14b0:	4c f5       	brge	.+82     	; 0x1504 <CLCD_voidScrollTextRightToLeft+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	40 e2       	ldi	r20, 0x20	; 32
    14c0:	51 e4       	ldi	r21, 0x41	; 65
    14c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	bc 01       	movw	r22, r24
    14cc:	cd 01       	movw	r24, r26
    14ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	9e 83       	std	Y+6, r25	; 0x06
    14d8:	8d 83       	std	Y+5, r24	; 0x05
    14da:	0f c0       	rjmp	.+30     	; 0x14fa <CLCD_voidScrollTextRightToLeft+0x164>
    14dc:	88 ec       	ldi	r24, 0xC8	; 200
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	9c 83       	std	Y+4, r25	; 0x04
    14e2:	8b 83       	std	Y+3, r24	; 0x03
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	9c 81       	ldd	r25, Y+4	; 0x04
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	f1 f7       	brne	.-4      	; 0x14e8 <CLCD_voidScrollTextRightToLeft+0x152>
    14ec:	9c 83       	std	Y+4, r25	; 0x04
    14ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f0:	8d 81       	ldd	r24, Y+5	; 0x05
    14f2:	9e 81       	ldd	r25, Y+6	; 0x06
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	9e 83       	std	Y+6, r25	; 0x06
    14f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14fa:	8d 81       	ldd	r24, Y+5	; 0x05
    14fc:	9e 81       	ldd	r25, Y+6	; 0x06
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	69 f7       	brne	.-38     	; 0x14dc <CLCD_voidScrollTextRightToLeft+0x146>
    1502:	14 c0       	rjmp	.+40     	; 0x152c <CLCD_voidScrollTextRightToLeft+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1504:	6f 81       	ldd	r22, Y+7	; 0x07
    1506:	78 85       	ldd	r23, Y+8	; 0x08
    1508:	89 85       	ldd	r24, Y+9	; 0x09
    150a:	9a 85       	ldd	r25, Y+10	; 0x0a
    150c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	9e 83       	std	Y+6, r25	; 0x06
    1516:	8d 83       	std	Y+5, r24	; 0x05
    1518:	8d 81       	ldd	r24, Y+5	; 0x05
    151a:	9e 81       	ldd	r25, Y+6	; 0x06
    151c:	9a 83       	std	Y+2, r25	; 0x02
    151e:	89 83       	std	Y+1, r24	; 0x01
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	9a 81       	ldd	r25, Y+2	; 0x02
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	f1 f7       	brne	.-4      	; 0x1524 <CLCD_voidScrollTextRightToLeft+0x18e>
    1528:	9a 83       	std	Y+2, r25	; 0x02
    152a:	89 83       	std	Y+1, r24	; 0x01
    while(Copy_u8Text[STR_u8Length] != '\0')
    {
        STR_u8Length++;
    }

    for(s8 position = 16; position >= -STR_u8Length; position--)
    152c:	88 89       	ldd	r24, Y+16	; 0x10
    152e:	81 50       	subi	r24, 0x01	; 1
    1530:	88 8b       	std	Y+16, r24	; 0x10
    1532:	88 89       	ldd	r24, Y+16	; 0x10
    1534:	28 2f       	mov	r18, r24
    1536:	33 27       	eor	r19, r19
    1538:	27 fd       	sbrc	r18, 7
    153a:	30 95       	com	r19
    153c:	89 89       	ldd	r24, Y+17	; 0x11
    153e:	88 2f       	mov	r24, r24
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	90 95       	com	r25
    1544:	81 95       	neg	r24
    1546:	9f 4f       	sbci	r25, 0xFF	; 255
    1548:	28 17       	cp	r18, r24
    154a:	39 07       	cpc	r19, r25
    154c:	0c f0       	brlt	.+2      	; 0x1550 <CLCD_voidScrollTextRightToLeft+0x1ba>
    154e:	42 cf       	rjmp	.-380    	; 0x13d4 <CLCD_voidScrollTextRightToLeft+0x3e>
            }
        }

        _delay_ms(300);
    }
}
    1550:	63 96       	adiw	r28, 0x13	; 19
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	f8 94       	cli
    1556:	de bf       	out	0x3e, r29	; 62
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	cd bf       	out	0x3d, r28	; 61
    155c:	cf 91       	pop	r28
    155e:	df 91       	pop	r29
    1560:	08 95       	ret

00001562 <CLCD_voidScrollTextSinsoidalwave>:


void CLCD_voidScrollTextSinsoidalwave(char *Copy_u8Text)
{
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	65 97       	sbiw	r28, 0x15	; 21
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	de bf       	out	0x3e, r29	; 62
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	cd bf       	out	0x3d, r28	; 61
    1576:	9b 8b       	std	Y+19, r25	; 0x13
    1578:	8a 8b       	std	Y+18, r24	; 0x12
	u8 STR_u8Lenght=0;
    157a:	19 8a       	std	Y+17, r1	; 0x11
    157c:	03 c0       	rjmp	.+6      	; 0x1584 <CLCD_voidScrollTextSinsoidalwave+0x22>
	while(Copy_u8Text[STR_u8Lenght] != '\0')
	{
		STR_u8Lenght++;
    157e:	89 89       	ldd	r24, Y+17	; 0x11
    1580:	8f 5f       	subi	r24, 0xFF	; 255
    1582:	89 8b       	std	Y+17, r24	; 0x11


void CLCD_voidScrollTextSinsoidalwave(char *Copy_u8Text)
{
	u8 STR_u8Lenght=0;
	while(Copy_u8Text[STR_u8Lenght] != '\0')
    1584:	89 89       	ldd	r24, Y+17	; 0x11
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	8a 89       	ldd	r24, Y+18	; 0x12
    158c:	9b 89       	ldd	r25, Y+19	; 0x13
    158e:	fc 01       	movw	r30, r24
    1590:	e2 0f       	add	r30, r18
    1592:	f3 1f       	adc	r31, r19
    1594:	80 81       	ld	r24, Z
    1596:	88 23       	and	r24, r24
    1598:	91 f7       	brne	.-28     	; 0x157e <CLCD_voidScrollTextSinsoidalwave+0x1c>
	{
		STR_u8Lenght++;
	}

	for(s8 position = -STR_u8Lenght ; position<=16 ; position++)
    159a:	89 89       	ldd	r24, Y+17	; 0x11
    159c:	81 95       	neg	r24
    159e:	88 8b       	std	Y+16, r24	; 0x10
    15a0:	c6 c0       	rjmp	.+396    	; 0x172e <CLCD_voidScrollTextSinsoidalwave+0x1cc>
	{
		CLCD_voidSendCommand(0x01);    //Clear Display
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	0e 94 ee 06 	call	0xddc	; 0xddc <CLCD_voidSendCommand>
		if(position >= 0) CLCD_voidSetXYPosition(position , (position%2));
    15a8:	88 89       	ldd	r24, Y+16	; 0x10
    15aa:	88 23       	and	r24, r24
    15ac:	cc f0       	brlt	.+50     	; 0x15e0 <CLCD_voidScrollTextSinsoidalwave+0x7e>
    15ae:	88 89       	ldd	r24, Y+16	; 0x10
    15b0:	8c 8b       	std	Y+20, r24	; 0x14
    15b2:	88 89       	ldd	r24, Y+16	; 0x10
    15b4:	98 2f       	mov	r25, r24
    15b6:	91 78       	andi	r25, 0x81	; 129
    15b8:	9d 8b       	std	Y+21, r25	; 0x15
    15ba:	8d 89       	ldd	r24, Y+21	; 0x15
    15bc:	88 23       	and	r24, r24
    15be:	4c f4       	brge	.+18     	; 0x15d2 <CLCD_voidScrollTextSinsoidalwave+0x70>
    15c0:	9d 89       	ldd	r25, Y+21	; 0x15
    15c2:	91 50       	subi	r25, 0x01	; 1
    15c4:	9d 8b       	std	Y+21, r25	; 0x15
    15c6:	8d 89       	ldd	r24, Y+21	; 0x15
    15c8:	8e 6f       	ori	r24, 0xFE	; 254
    15ca:	8d 8b       	std	Y+21, r24	; 0x15
    15cc:	9d 89       	ldd	r25, Y+21	; 0x15
    15ce:	9f 5f       	subi	r25, 0xFF	; 255
    15d0:	9d 8b       	std	Y+21, r25	; 0x15
    15d2:	8d 89       	ldd	r24, Y+21	; 0x15
    15d4:	98 2f       	mov	r25, r24
    15d6:	8c 89       	ldd	r24, Y+20	; 0x14
    15d8:	69 2f       	mov	r22, r25
    15da:	0e 94 cc 08 	call	0x1198	; 0x1198 <CLCD_voidSetXYPosition>
    15de:	07 c0       	rjmp	.+14     	; 0x15ee <CLCD_voidScrollTextSinsoidalwave+0x8c>
		else if(position < 0) CLCD_voidSetXYPosition(0 , 0);
    15e0:	88 89       	ldd	r24, Y+16	; 0x10
    15e2:	88 23       	and	r24, r24
    15e4:	24 f4       	brge	.+8      	; 0x15ee <CLCD_voidScrollTextSinsoidalwave+0x8c>
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	0e 94 cc 08 	call	0x1198	; 0x1198 <CLCD_voidSetXYPosition>

		for(u8 i=0 ; i<STR_u8Lenght ; i++)
    15ee:	1f 86       	std	Y+15, r1	; 0x0f
    15f0:	25 c0       	rjmp	.+74     	; 0x163c <CLCD_voidScrollTextSinsoidalwave+0xda>
		{
			if(i + position >= 0 && i + position < 16 )
    15f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	88 89       	ldd	r24, Y+16	; 0x10
    15fa:	99 27       	eor	r25, r25
    15fc:	87 fd       	sbrc	r24, 7
    15fe:	90 95       	com	r25
    1600:	82 0f       	add	r24, r18
    1602:	93 1f       	adc	r25, r19
    1604:	99 23       	and	r25, r25
    1606:	bc f0       	brlt	.+46     	; 0x1636 <CLCD_voidScrollTextSinsoidalwave+0xd4>
    1608:	8f 85       	ldd	r24, Y+15	; 0x0f
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	88 89       	ldd	r24, Y+16	; 0x10
    1610:	99 27       	eor	r25, r25
    1612:	87 fd       	sbrc	r24, 7
    1614:	90 95       	com	r25
    1616:	82 0f       	add	r24, r18
    1618:	93 1f       	adc	r25, r19
    161a:	80 31       	cpi	r24, 0x10	; 16
    161c:	91 05       	cpc	r25, r1
    161e:	5c f4       	brge	.+22     	; 0x1636 <CLCD_voidScrollTextSinsoidalwave+0xd4>
			{
				CLCD_voidSendData(Copy_u8Text[i]);
    1620:	8f 85       	ldd	r24, Y+15	; 0x0f
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	8a 89       	ldd	r24, Y+18	; 0x12
    1628:	9b 89       	ldd	r25, Y+19	; 0x13
    162a:	fc 01       	movw	r30, r24
    162c:	e2 0f       	add	r30, r18
    162e:	f3 1f       	adc	r31, r19
    1630:	80 81       	ld	r24, Z
    1632:	0e 94 50 06 	call	0xca0	; 0xca0 <CLCD_voidSendData>
	{
		CLCD_voidSendCommand(0x01);    //Clear Display
		if(position >= 0) CLCD_voidSetXYPosition(position , (position%2));
		else if(position < 0) CLCD_voidSetXYPosition(0 , 0);

		for(u8 i=0 ; i<STR_u8Lenght ; i++)
    1636:	8f 85       	ldd	r24, Y+15	; 0x0f
    1638:	8f 5f       	subi	r24, 0xFF	; 255
    163a:	8f 87       	std	Y+15, r24	; 0x0f
    163c:	9f 85       	ldd	r25, Y+15	; 0x0f
    163e:	89 89       	ldd	r24, Y+17	; 0x11
    1640:	98 17       	cp	r25, r24
    1642:	b8 f2       	brcs	.-82     	; 0x15f2 <CLCD_voidScrollTextSinsoidalwave+0x90>
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	a6 e9       	ldi	r26, 0x96	; 150
    164a:	b3 e4       	ldi	r27, 0x43	; 67
    164c:	8b 87       	std	Y+11, r24	; 0x0b
    164e:	9c 87       	std	Y+12, r25	; 0x0c
    1650:	ad 87       	std	Y+13, r26	; 0x0d
    1652:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1654:	6b 85       	ldd	r22, Y+11	; 0x0b
    1656:	7c 85       	ldd	r23, Y+12	; 0x0c
    1658:	8d 85       	ldd	r24, Y+13	; 0x0d
    165a:	9e 85       	ldd	r25, Y+14	; 0x0e
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	4a ef       	ldi	r20, 0xFA	; 250
    1662:	54 e4       	ldi	r21, 0x44	; 68
    1664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	8f 83       	std	Y+7, r24	; 0x07
    166e:	98 87       	std	Y+8, r25	; 0x08
    1670:	a9 87       	std	Y+9, r26	; 0x09
    1672:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1674:	6f 81       	ldd	r22, Y+7	; 0x07
    1676:	78 85       	ldd	r23, Y+8	; 0x08
    1678:	89 85       	ldd	r24, Y+9	; 0x09
    167a:	9a 85       	ldd	r25, Y+10	; 0x0a
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	40 e8       	ldi	r20, 0x80	; 128
    1682:	5f e3       	ldi	r21, 0x3F	; 63
    1684:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1688:	88 23       	and	r24, r24
    168a:	2c f4       	brge	.+10     	; 0x1696 <CLCD_voidScrollTextSinsoidalwave+0x134>
		__ticks = 1;
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	9e 83       	std	Y+6, r25	; 0x06
    1692:	8d 83       	std	Y+5, r24	; 0x05
    1694:	3f c0       	rjmp	.+126    	; 0x1714 <CLCD_voidScrollTextSinsoidalwave+0x1b2>
	else if (__tmp > 65535)
    1696:	6f 81       	ldd	r22, Y+7	; 0x07
    1698:	78 85       	ldd	r23, Y+8	; 0x08
    169a:	89 85       	ldd	r24, Y+9	; 0x09
    169c:	9a 85       	ldd	r25, Y+10	; 0x0a
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	3f ef       	ldi	r19, 0xFF	; 255
    16a2:	4f e7       	ldi	r20, 0x7F	; 127
    16a4:	57 e4       	ldi	r21, 0x47	; 71
    16a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16aa:	18 16       	cp	r1, r24
    16ac:	4c f5       	brge	.+82     	; 0x1700 <CLCD_voidScrollTextSinsoidalwave+0x19e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    16b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	40 e2       	ldi	r20, 0x20	; 32
    16bc:	51 e4       	ldi	r21, 0x41	; 65
    16be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	bc 01       	movw	r22, r24
    16c8:	cd 01       	movw	r24, r26
    16ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	9e 83       	std	Y+6, r25	; 0x06
    16d4:	8d 83       	std	Y+5, r24	; 0x05
    16d6:	0f c0       	rjmp	.+30     	; 0x16f6 <CLCD_voidScrollTextSinsoidalwave+0x194>
    16d8:	88 ec       	ldi	r24, 0xC8	; 200
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	9c 83       	std	Y+4, r25	; 0x04
    16de:	8b 83       	std	Y+3, r24	; 0x03
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	9c 81       	ldd	r25, Y+4	; 0x04
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	f1 f7       	brne	.-4      	; 0x16e4 <CLCD_voidScrollTextSinsoidalwave+0x182>
    16e8:	9c 83       	std	Y+4, r25	; 0x04
    16ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ec:	8d 81       	ldd	r24, Y+5	; 0x05
    16ee:	9e 81       	ldd	r25, Y+6	; 0x06
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	9e 83       	std	Y+6, r25	; 0x06
    16f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f6:	8d 81       	ldd	r24, Y+5	; 0x05
    16f8:	9e 81       	ldd	r25, Y+6	; 0x06
    16fa:	00 97       	sbiw	r24, 0x00	; 0
    16fc:	69 f7       	brne	.-38     	; 0x16d8 <CLCD_voidScrollTextSinsoidalwave+0x176>
    16fe:	14 c0       	rjmp	.+40     	; 0x1728 <CLCD_voidScrollTextSinsoidalwave+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1700:	6f 81       	ldd	r22, Y+7	; 0x07
    1702:	78 85       	ldd	r23, Y+8	; 0x08
    1704:	89 85       	ldd	r24, Y+9	; 0x09
    1706:	9a 85       	ldd	r25, Y+10	; 0x0a
    1708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	9e 83       	std	Y+6, r25	; 0x06
    1712:	8d 83       	std	Y+5, r24	; 0x05
    1714:	8d 81       	ldd	r24, Y+5	; 0x05
    1716:	9e 81       	ldd	r25, Y+6	; 0x06
    1718:	9a 83       	std	Y+2, r25	; 0x02
    171a:	89 83       	std	Y+1, r24	; 0x01
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	9a 81       	ldd	r25, Y+2	; 0x02
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	f1 f7       	brne	.-4      	; 0x1720 <CLCD_voidScrollTextSinsoidalwave+0x1be>
    1724:	9a 83       	std	Y+2, r25	; 0x02
    1726:	89 83       	std	Y+1, r24	; 0x01
	while(Copy_u8Text[STR_u8Lenght] != '\0')
	{
		STR_u8Lenght++;
	}

	for(s8 position = -STR_u8Lenght ; position<=16 ; position++)
    1728:	88 89       	ldd	r24, Y+16	; 0x10
    172a:	8f 5f       	subi	r24, 0xFF	; 255
    172c:	88 8b       	std	Y+16, r24	; 0x10
    172e:	88 89       	ldd	r24, Y+16	; 0x10
    1730:	81 31       	cpi	r24, 0x11	; 17
    1732:	0c f4       	brge	.+2      	; 0x1736 <CLCD_voidScrollTextSinsoidalwave+0x1d4>
    1734:	36 cf       	rjmp	.-404    	; 0x15a2 <CLCD_voidScrollTextSinsoidalwave+0x40>
				CLCD_voidSendData(Copy_u8Text[i]);
			}
		}
		_delay_ms(300);
	}
}
    1736:	65 96       	adiw	r28, 0x15	; 21
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	f8 94       	cli
    173c:	de bf       	out	0x3e, r29	; 62
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	cd bf       	out	0x3d, r28	; 61
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <CLCD_voidClearDisplay>:


void CLCD_voidClearDisplay(void)
{
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    1750:	2e 97       	sbiw	r28, 0x0e	; 14
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	de bf       	out	0x3e, r29	; 62
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand(0x01);
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	0e 94 ee 06 	call	0xddc	; 0xddc <CLCD_voidSendCommand>
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	a0 e0       	ldi	r26, 0x00	; 0
    1768:	b0 e4       	ldi	r27, 0x40	; 64
    176a:	8b 87       	std	Y+11, r24	; 0x0b
    176c:	9c 87       	std	Y+12, r25	; 0x0c
    176e:	ad 87       	std	Y+13, r26	; 0x0d
    1770:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1772:	6b 85       	ldd	r22, Y+11	; 0x0b
    1774:	7c 85       	ldd	r23, Y+12	; 0x0c
    1776:	8d 85       	ldd	r24, Y+13	; 0x0d
    1778:	9e 85       	ldd	r25, Y+14	; 0x0e
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	4a ef       	ldi	r20, 0xFA	; 250
    1780:	54 e4       	ldi	r21, 0x44	; 68
    1782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	8f 83       	std	Y+7, r24	; 0x07
    178c:	98 87       	std	Y+8, r25	; 0x08
    178e:	a9 87       	std	Y+9, r26	; 0x09
    1790:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1792:	6f 81       	ldd	r22, Y+7	; 0x07
    1794:	78 85       	ldd	r23, Y+8	; 0x08
    1796:	89 85       	ldd	r24, Y+9	; 0x09
    1798:	9a 85       	ldd	r25, Y+10	; 0x0a
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	40 e8       	ldi	r20, 0x80	; 128
    17a0:	5f e3       	ldi	r21, 0x3F	; 63
    17a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17a6:	88 23       	and	r24, r24
    17a8:	2c f4       	brge	.+10     	; 0x17b4 <CLCD_voidClearDisplay+0x6c>
		__ticks = 1;
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	9e 83       	std	Y+6, r25	; 0x06
    17b0:	8d 83       	std	Y+5, r24	; 0x05
    17b2:	3f c0       	rjmp	.+126    	; 0x1832 <CLCD_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    17b4:	6f 81       	ldd	r22, Y+7	; 0x07
    17b6:	78 85       	ldd	r23, Y+8	; 0x08
    17b8:	89 85       	ldd	r24, Y+9	; 0x09
    17ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	3f ef       	ldi	r19, 0xFF	; 255
    17c0:	4f e7       	ldi	r20, 0x7F	; 127
    17c2:	57 e4       	ldi	r21, 0x47	; 71
    17c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17c8:	18 16       	cp	r1, r24
    17ca:	4c f5       	brge	.+82     	; 0x181e <CLCD_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	40 e2       	ldi	r20, 0x20	; 32
    17da:	51 e4       	ldi	r21, 0x41	; 65
    17dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	bc 01       	movw	r22, r24
    17e6:	cd 01       	movw	r24, r26
    17e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	9e 83       	std	Y+6, r25	; 0x06
    17f2:	8d 83       	std	Y+5, r24	; 0x05
    17f4:	0f c0       	rjmp	.+30     	; 0x1814 <CLCD_voidClearDisplay+0xcc>
    17f6:	88 ec       	ldi	r24, 0xC8	; 200
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	9c 83       	std	Y+4, r25	; 0x04
    17fc:	8b 83       	std	Y+3, r24	; 0x03
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	9c 81       	ldd	r25, Y+4	; 0x04
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	f1 f7       	brne	.-4      	; 0x1802 <CLCD_voidClearDisplay+0xba>
    1806:	9c 83       	std	Y+4, r25	; 0x04
    1808:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180a:	8d 81       	ldd	r24, Y+5	; 0x05
    180c:	9e 81       	ldd	r25, Y+6	; 0x06
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	9e 83       	std	Y+6, r25	; 0x06
    1812:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1814:	8d 81       	ldd	r24, Y+5	; 0x05
    1816:	9e 81       	ldd	r25, Y+6	; 0x06
    1818:	00 97       	sbiw	r24, 0x00	; 0
    181a:	69 f7       	brne	.-38     	; 0x17f6 <CLCD_voidClearDisplay+0xae>
    181c:	14 c0       	rjmp	.+40     	; 0x1846 <CLCD_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181e:	6f 81       	ldd	r22, Y+7	; 0x07
    1820:	78 85       	ldd	r23, Y+8	; 0x08
    1822:	89 85       	ldd	r24, Y+9	; 0x09
    1824:	9a 85       	ldd	r25, Y+10	; 0x0a
    1826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	9e 83       	std	Y+6, r25	; 0x06
    1830:	8d 83       	std	Y+5, r24	; 0x05
    1832:	8d 81       	ldd	r24, Y+5	; 0x05
    1834:	9e 81       	ldd	r25, Y+6	; 0x06
    1836:	9a 83       	std	Y+2, r25	; 0x02
    1838:	89 83       	std	Y+1, r24	; 0x01
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	9a 81       	ldd	r25, Y+2	; 0x02
    183e:	01 97       	sbiw	r24, 0x01	; 1
    1840:	f1 f7       	brne	.-4      	; 0x183e <CLCD_voidClearDisplay+0xf6>
    1842:	9a 83       	std	Y+2, r25	; 0x02
    1844:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1846:	2e 96       	adiw	r28, 0x0e	; 14
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	cd bf       	out	0x3d, r28	; 61
    1852:	cf 91       	pop	r28
    1854:	df 91       	pop	r29
    1856:	08 95       	ret

00001858 <CLCD_voidShift>:

void CLCD_voidShift(CLCD_SHIFT Copy_enuShiftDirection)
{
    1858:	df 93       	push	r29
    185a:	cf 93       	push	r28
    185c:	0f 92       	push	r0
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_enuShiftDirection == CLCD_SHIFT_RIGHT)||(Copy_enuShiftDirection == CLCD_SHIFT_LEFT))
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	8c 31       	cpi	r24, 0x1C	; 28
    1868:	19 f0       	breq	.+6      	; 0x1870 <CLCD_voidShift+0x18>
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	88 31       	cpi	r24, 0x18	; 24
    186e:	19 f4       	brne	.+6      	; 0x1876 <CLCD_voidShift+0x1e>
	{
		CLCD_voidSendCommand(Copy_enuShiftDirection);
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	0e 94 ee 06 	call	0xddc	; 0xddc <CLCD_voidSendCommand>
	}
}
    1876:	0f 90       	pop	r0
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <CLCD_voidCreateShape>:


void CLCD_voidCreateShape(u8 Copy_u8Location,u8 *Copy_pu8Shape)
{
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	00 d0       	rcall	.+0      	; 0x1884 <CLCD_voidCreateShape+0x6>
    1884:	00 d0       	rcall	.+0      	; 0x1886 <CLCD_voidCreateShape+0x8>
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	8a 83       	std	Y+2, r24	; 0x02
    188c:	7c 83       	std	Y+4, r23	; 0x04
    188e:	6b 83       	std	Y+3, r22	; 0x03
	if((Copy_u8Location <= 7) && (Copy_u8Location >= 0))
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	88 30       	cpi	r24, 0x08	; 8
    1894:	f8 f4       	brcc	.+62     	; 0x18d4 <CLCD_voidCreateShape+0x56>
	{
		CLCD_voidSendCommand( 0x40 | (Copy_u8Location *8));
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	88 2f       	mov	r24, r24
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	88 0f       	add	r24, r24
    18a2:	99 1f       	adc	r25, r25
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	80 64       	ori	r24, 0x40	; 64
    18aa:	0e 94 ee 06 	call	0xddc	; 0xddc <CLCD_voidSendCommand>
		for(u8 i = 0 ; i<8 ; i++ )
    18ae:	19 82       	std	Y+1, r1	; 0x01
    18b0:	0e c0       	rjmp	.+28     	; 0x18ce <CLCD_voidCreateShape+0x50>
		{
			CLCD_voidSendData(Copy_pu8Shape[i]);
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9c 81       	ldd	r25, Y+4	; 0x04
    18bc:	fc 01       	movw	r30, r24
    18be:	e2 0f       	add	r30, r18
    18c0:	f3 1f       	adc	r31, r19
    18c2:	80 81       	ld	r24, Z
    18c4:	0e 94 50 06 	call	0xca0	; 0xca0 <CLCD_voidSendData>
void CLCD_voidCreateShape(u8 Copy_u8Location,u8 *Copy_pu8Shape)
{
	if((Copy_u8Location <= 7) && (Copy_u8Location >= 0))
	{
		CLCD_voidSendCommand( 0x40 | (Copy_u8Location *8));
		for(u8 i = 0 ; i<8 ; i++ )
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	8f 5f       	subi	r24, 0xFF	; 255
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	88 30       	cpi	r24, 0x08	; 8
    18d2:	78 f3       	brcs	.-34     	; 0x18b2 <CLCD_voidCreateShape+0x34>
		{
			CLCD_voidSendData(Copy_pu8Shape[i]);
		}
	}
}
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <CLCD_voidDrawShape>:


void CLCD_voidDrawShape(u8 Copy_u8Location)
{
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	0f 92       	push	r0
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendData(Copy_u8Location);
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	0e 94 50 06 	call	0xca0	; 0xca0 <CLCD_voidSendData>
}
    18f4:	0f 90       	pop	r0
    18f6:	cf 91       	pop	r28
    18f8:	df 91       	pop	r29
    18fa:	08 95       	ret

000018fc <CLCD_voidSendFloat>:

void CLCD_voidSendFloat(f64 Copy_s32float)
{
    18fc:	df 93       	push	r29
    18fe:	cf 93       	push	r28
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	6c 97       	sbiw	r28, 0x1c	; 28
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	f8 94       	cli
    190a:	de bf       	out	0x3e, r29	; 62
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	cd bf       	out	0x3d, r28	; 61
    1910:	69 8f       	std	Y+25, r22	; 0x19
    1912:	7a 8f       	std	Y+26, r23	; 0x1a
    1914:	8b 8f       	std	Y+27, r24	; 0x1b
    1916:	9c 8f       	std	Y+28, r25	; 0x1c
	int integer_part = (int)Copy_s32float;          // Extract the integer part
    1918:	69 8d       	ldd	r22, Y+25	; 0x19
    191a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    191c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    191e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1920:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	9c 83       	std	Y+4, r25	; 0x04
    192a:	8b 83       	std	Y+3, r24	; 0x03
	int decimal_part = (int)((Copy_s32float - integer_part) * 100);  // Extract the decimal part (2 decimal places)
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	9c 81       	ldd	r25, Y+4	; 0x04
    1930:	aa 27       	eor	r26, r26
    1932:	97 fd       	sbrc	r25, 7
    1934:	a0 95       	com	r26
    1936:	ba 2f       	mov	r27, r26
    1938:	bc 01       	movw	r22, r24
    193a:	cd 01       	movw	r24, r26
    193c:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    1940:	9b 01       	movw	r18, r22
    1942:	ac 01       	movw	r20, r24
    1944:	69 8d       	ldd	r22, Y+25	; 0x19
    1946:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1948:	8b 8d       	ldd	r24, Y+27	; 0x1b
    194a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    194c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1950:	dc 01       	movw	r26, r24
    1952:	cb 01       	movw	r24, r22
    1954:	bc 01       	movw	r22, r24
    1956:	cd 01       	movw	r24, r26
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	48 ec       	ldi	r20, 0xC8	; 200
    195e:	52 e4       	ldi	r21, 0x42	; 66
    1960:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	bc 01       	movw	r22, r24
    196a:	cd 01       	movw	r24, r26
    196c:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	9a 83       	std	Y+2, r25	; 0x02
    1976:	89 83       	std	Y+1, r24	; 0x01

	char buffer[20];  // Buffer to hold the converted string

	// Format and print the integer and decimal parts separately
	sprintf(buffer, "%d.%02d", integer_part, decimal_part);
    1978:	8d b7       	in	r24, 0x3d	; 61
    197a:	9e b7       	in	r25, 0x3e	; 62
    197c:	08 97       	sbiw	r24, 0x08	; 8
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	9e bf       	out	0x3e, r25	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	8d bf       	out	0x3d, r24	; 61
    1988:	ed b7       	in	r30, 0x3d	; 61
    198a:	fe b7       	in	r31, 0x3e	; 62
    198c:	31 96       	adiw	r30, 0x01	; 1
    198e:	ce 01       	movw	r24, r28
    1990:	05 96       	adiw	r24, 0x05	; 5
    1992:	91 83       	std	Z+1, r25	; 0x01
    1994:	80 83       	st	Z, r24
    1996:	80 e6       	ldi	r24, 0x60	; 96
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	93 83       	std	Z+3, r25	; 0x03
    199c:	82 83       	std	Z+2, r24	; 0x02
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	9c 81       	ldd	r25, Y+4	; 0x04
    19a2:	95 83       	std	Z+5, r25	; 0x05
    19a4:	84 83       	std	Z+4, r24	; 0x04
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	9a 81       	ldd	r25, Y+2	; 0x02
    19aa:	97 83       	std	Z+7, r25	; 0x07
    19ac:	86 83       	std	Z+6, r24	; 0x06
    19ae:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <sprintf>
    19b2:	8d b7       	in	r24, 0x3d	; 61
    19b4:	9e b7       	in	r25, 0x3e	; 62
    19b6:	08 96       	adiw	r24, 0x08	; 8
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	9e bf       	out	0x3e, r25	; 62
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	8d bf       	out	0x3d, r24	; 61

	CLCD_voidSendString(buffer);
    19c2:	ce 01       	movw	r24, r28
    19c4:	05 96       	adiw	r24, 0x05	; 5
    19c6:	0e 94 2d 08 	call	0x105a	; 0x105a <CLCD_voidSendString>
}
    19ca:	6c 96       	adiw	r28, 0x1c	; 28
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	f8 94       	cli
    19d0:	de bf       	out	0x3e, r29	; 62
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	cd bf       	out	0x3d, r28	; 61
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <DIO_voidSetPinDirection>:

#include "DIO_interface.h"
#include "DIO_register.h"

void DIO_voidSetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	27 97       	sbiw	r28, 0x07	; 7
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
    19f0:	89 83       	std	Y+1, r24	; 0x01
    19f2:	6a 83       	std	Y+2, r22	; 0x02
    19f4:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Direction == DIO_u8INPUT)
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
    19f8:	88 23       	and	r24, r24
    19fa:	09 f0       	breq	.+2      	; 0x19fe <DIO_voidSetPinDirection+0x22>
    19fc:	74 c0       	rjmp	.+232    	; 0x1ae6 <DIO_voidSetPinDirection+0x10a>
	{
		switch(Copy_u8Port)
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	3f 83       	std	Y+7, r19	; 0x07
    1a06:	2e 83       	std	Y+6, r18	; 0x06
    1a08:	8e 81       	ldd	r24, Y+6	; 0x06
    1a0a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a0c:	81 30       	cpi	r24, 0x01	; 1
    1a0e:	91 05       	cpc	r25, r1
    1a10:	59 f1       	breq	.+86     	; 0x1a68 <DIO_voidSetPinDirection+0x8c>
    1a12:	2e 81       	ldd	r18, Y+6	; 0x06
    1a14:	3f 81       	ldd	r19, Y+7	; 0x07
    1a16:	22 30       	cpi	r18, 0x02	; 2
    1a18:	31 05       	cpc	r19, r1
    1a1a:	2c f4       	brge	.+10     	; 0x1a26 <DIO_voidSetPinDirection+0x4a>
    1a1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a1e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a20:	00 97       	sbiw	r24, 0x00	; 0
    1a22:	69 f0       	breq	.+26     	; 0x1a3e <DIO_voidSetPinDirection+0x62>
    1a24:	d2 c0       	rjmp	.+420    	; 0x1bca <DIO_voidSetPinDirection+0x1ee>
    1a26:	2e 81       	ldd	r18, Y+6	; 0x06
    1a28:	3f 81       	ldd	r19, Y+7	; 0x07
    1a2a:	22 30       	cpi	r18, 0x02	; 2
    1a2c:	31 05       	cpc	r19, r1
    1a2e:	89 f1       	breq	.+98     	; 0x1a92 <DIO_voidSetPinDirection+0xb6>
    1a30:	8e 81       	ldd	r24, Y+6	; 0x06
    1a32:	9f 81       	ldd	r25, Y+7	; 0x07
    1a34:	83 30       	cpi	r24, 0x03	; 3
    1a36:	91 05       	cpc	r25, r1
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <DIO_voidSetPinDirection+0x60>
    1a3a:	40 c0       	rjmp	.+128    	; 0x1abc <DIO_voidSetPinDirection+0xe0>
    1a3c:	c6 c0       	rjmp	.+396    	; 0x1bca <DIO_voidSetPinDirection+0x1ee>
		{
		case DIO_u8PORTA : CLR_BIT(DDRA , Copy_u8Pin); break; 
    1a3e:	aa e3       	ldi	r26, 0x3A	; 58
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	ea e3       	ldi	r30, 0x3A	; 58
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	48 2f       	mov	r20, r24
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	02 2e       	mov	r0, r18
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <DIO_voidSetPinDirection+0x80>
    1a58:	88 0f       	add	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	0a 94       	dec	r0
    1a5e:	e2 f7       	brpl	.-8      	; 0x1a58 <DIO_voidSetPinDirection+0x7c>
    1a60:	80 95       	com	r24
    1a62:	84 23       	and	r24, r20
    1a64:	8c 93       	st	X, r24
    1a66:	b1 c0       	rjmp	.+354    	; 0x1bca <DIO_voidSetPinDirection+0x1ee>
		case DIO_u8PORTB : CLR_BIT(DDRB , Copy_u8Pin); break;
    1a68:	a7 e3       	ldi	r26, 0x37	; 55
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e7 e3       	ldi	r30, 0x37	; 55
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	48 2f       	mov	r20, r24
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	02 2e       	mov	r0, r18
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <DIO_voidSetPinDirection+0xaa>
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	0a 94       	dec	r0
    1a88:	e2 f7       	brpl	.-8      	; 0x1a82 <DIO_voidSetPinDirection+0xa6>
    1a8a:	80 95       	com	r24
    1a8c:	84 23       	and	r24, r20
    1a8e:	8c 93       	st	X, r24
    1a90:	9c c0       	rjmp	.+312    	; 0x1bca <DIO_voidSetPinDirection+0x1ee>
		case DIO_u8PORTC : CLR_BIT(DDRC , Copy_u8Pin); break;
    1a92:	a4 e3       	ldi	r26, 0x34	; 52
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	e4 e3       	ldi	r30, 0x34	; 52
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	48 2f       	mov	r20, r24
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	02 2e       	mov	r0, r18
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <DIO_voidSetPinDirection+0xd4>
    1aac:	88 0f       	add	r24, r24
    1aae:	99 1f       	adc	r25, r25
    1ab0:	0a 94       	dec	r0
    1ab2:	e2 f7       	brpl	.-8      	; 0x1aac <DIO_voidSetPinDirection+0xd0>
    1ab4:	80 95       	com	r24
    1ab6:	84 23       	and	r24, r20
    1ab8:	8c 93       	st	X, r24
    1aba:	87 c0       	rjmp	.+270    	; 0x1bca <DIO_voidSetPinDirection+0x1ee>
		case DIO_u8PORTD : CLR_BIT(DDRD , Copy_u8Pin); break;
    1abc:	a1 e3       	ldi	r26, 0x31	; 49
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	e1 e3       	ldi	r30, 0x31	; 49
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	48 2f       	mov	r20, r24
    1ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aca:	28 2f       	mov	r18, r24
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	02 2e       	mov	r0, r18
    1ad4:	02 c0       	rjmp	.+4      	; 0x1ada <DIO_voidSetPinDirection+0xfe>
    1ad6:	88 0f       	add	r24, r24
    1ad8:	99 1f       	adc	r25, r25
    1ada:	0a 94       	dec	r0
    1adc:	e2 f7       	brpl	.-8      	; 0x1ad6 <DIO_voidSetPinDirection+0xfa>
    1ade:	80 95       	com	r24
    1ae0:	84 23       	and	r24, r20
    1ae2:	8c 93       	st	X, r24
    1ae4:	72 c0       	rjmp	.+228    	; 0x1bca <DIO_voidSetPinDirection+0x1ee>
		}
	}
	else if(Copy_u8Direction == DIO_u8OUTPUT)
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	81 30       	cpi	r24, 0x01	; 1
    1aea:	09 f0       	breq	.+2      	; 0x1aee <DIO_voidSetPinDirection+0x112>
    1aec:	6e c0       	rjmp	.+220    	; 0x1bca <DIO_voidSetPinDirection+0x1ee>
	{
		switch(Copy_u8Port)
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	28 2f       	mov	r18, r24
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	3d 83       	std	Y+5, r19	; 0x05
    1af6:	2c 83       	std	Y+4, r18	; 0x04
    1af8:	8c 81       	ldd	r24, Y+4	; 0x04
    1afa:	9d 81       	ldd	r25, Y+5	; 0x05
    1afc:	81 30       	cpi	r24, 0x01	; 1
    1afe:	91 05       	cpc	r25, r1
    1b00:	49 f1       	breq	.+82     	; 0x1b54 <DIO_voidSetPinDirection+0x178>
    1b02:	2c 81       	ldd	r18, Y+4	; 0x04
    1b04:	3d 81       	ldd	r19, Y+5	; 0x05
    1b06:	22 30       	cpi	r18, 0x02	; 2
    1b08:	31 05       	cpc	r19, r1
    1b0a:	2c f4       	brge	.+10     	; 0x1b16 <DIO_voidSetPinDirection+0x13a>
    1b0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	61 f0       	breq	.+24     	; 0x1b2c <DIO_voidSetPinDirection+0x150>
    1b14:	5a c0       	rjmp	.+180    	; 0x1bca <DIO_voidSetPinDirection+0x1ee>
    1b16:	2c 81       	ldd	r18, Y+4	; 0x04
    1b18:	3d 81       	ldd	r19, Y+5	; 0x05
    1b1a:	22 30       	cpi	r18, 0x02	; 2
    1b1c:	31 05       	cpc	r19, r1
    1b1e:	71 f1       	breq	.+92     	; 0x1b7c <DIO_voidSetPinDirection+0x1a0>
    1b20:	8c 81       	ldd	r24, Y+4	; 0x04
    1b22:	9d 81       	ldd	r25, Y+5	; 0x05
    1b24:	83 30       	cpi	r24, 0x03	; 3
    1b26:	91 05       	cpc	r25, r1
    1b28:	e9 f1       	breq	.+122    	; 0x1ba4 <DIO_voidSetPinDirection+0x1c8>
    1b2a:	4f c0       	rjmp	.+158    	; 0x1bca <DIO_voidSetPinDirection+0x1ee>
		{
		case DIO_u8PORTA : SET_BIT(DDRA , Copy_u8Pin); break;
    1b2c:	aa e3       	ldi	r26, 0x3A	; 58
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	ea e3       	ldi	r30, 0x3A	; 58
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	48 2f       	mov	r20, r24
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	02 2e       	mov	r0, r18
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <DIO_voidSetPinDirection+0x16e>
    1b46:	88 0f       	add	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	0a 94       	dec	r0
    1b4c:	e2 f7       	brpl	.-8      	; 0x1b46 <DIO_voidSetPinDirection+0x16a>
    1b4e:	84 2b       	or	r24, r20
    1b50:	8c 93       	st	X, r24
    1b52:	3b c0       	rjmp	.+118    	; 0x1bca <DIO_voidSetPinDirection+0x1ee>
		case DIO_u8PORTB : SET_BIT(DDRB , Copy_u8Pin); break;
    1b54:	a7 e3       	ldi	r26, 0x37	; 55
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e7 e3       	ldi	r30, 0x37	; 55
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	48 2f       	mov	r20, r24
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	02 2e       	mov	r0, r18
    1b6c:	02 c0       	rjmp	.+4      	; 0x1b72 <DIO_voidSetPinDirection+0x196>
    1b6e:	88 0f       	add	r24, r24
    1b70:	99 1f       	adc	r25, r25
    1b72:	0a 94       	dec	r0
    1b74:	e2 f7       	brpl	.-8      	; 0x1b6e <DIO_voidSetPinDirection+0x192>
    1b76:	84 2b       	or	r24, r20
    1b78:	8c 93       	st	X, r24
    1b7a:	27 c0       	rjmp	.+78     	; 0x1bca <DIO_voidSetPinDirection+0x1ee>
		case DIO_u8PORTC : SET_BIT(DDRC , Copy_u8Pin); break;
    1b7c:	a4 e3       	ldi	r26, 0x34	; 52
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e4 e3       	ldi	r30, 0x34	; 52
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	48 2f       	mov	r20, r24
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	28 2f       	mov	r18, r24
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	02 2e       	mov	r0, r18
    1b94:	02 c0       	rjmp	.+4      	; 0x1b9a <DIO_voidSetPinDirection+0x1be>
    1b96:	88 0f       	add	r24, r24
    1b98:	99 1f       	adc	r25, r25
    1b9a:	0a 94       	dec	r0
    1b9c:	e2 f7       	brpl	.-8      	; 0x1b96 <DIO_voidSetPinDirection+0x1ba>
    1b9e:	84 2b       	or	r24, r20
    1ba0:	8c 93       	st	X, r24
    1ba2:	13 c0       	rjmp	.+38     	; 0x1bca <DIO_voidSetPinDirection+0x1ee>
		case DIO_u8PORTD : SET_BIT(DDRD , Copy_u8Pin); break;
    1ba4:	a1 e3       	ldi	r26, 0x31	; 49
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e1 e3       	ldi	r30, 0x31	; 49
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	48 2f       	mov	r20, r24
    1bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb2:	28 2f       	mov	r18, r24
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	02 2e       	mov	r0, r18
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <DIO_voidSetPinDirection+0x1e6>
    1bbe:	88 0f       	add	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	0a 94       	dec	r0
    1bc4:	e2 f7       	brpl	.-8      	; 0x1bbe <DIO_voidSetPinDirection+0x1e2>
    1bc6:	84 2b       	or	r24, r20
    1bc8:	8c 93       	st	X, r24
		}
	}
}
    1bca:	27 96       	adiw	r28, 0x07	; 7
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	cd bf       	out	0x3d, r28	; 61
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	27 97       	sbiw	r28, 0x07	; 7
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	f8 94       	cli
    1bea:	de bf       	out	0x3e, r29	; 62
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	cd bf       	out	0x3d, r28	; 61
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    1bf2:	6a 83       	std	Y+2, r22	; 0x02
    1bf4:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8Value == DIO_u8LOW)
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	88 23       	and	r24, r24
    1bfa:	09 f0       	breq	.+2      	; 0x1bfe <DIO_voidSetPinValue+0x22>
    1bfc:	74 c0       	rjmp	.+232    	; 0x1ce6 <DIO_voidSetPinValue+0x10a>
	{
		switch (Copy_u8Port)
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	28 2f       	mov	r18, r24
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	3f 83       	std	Y+7, r19	; 0x07
    1c06:	2e 83       	std	Y+6, r18	; 0x06
    1c08:	8e 81       	ldd	r24, Y+6	; 0x06
    1c0a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c0c:	81 30       	cpi	r24, 0x01	; 1
    1c0e:	91 05       	cpc	r25, r1
    1c10:	59 f1       	breq	.+86     	; 0x1c68 <DIO_voidSetPinValue+0x8c>
    1c12:	2e 81       	ldd	r18, Y+6	; 0x06
    1c14:	3f 81       	ldd	r19, Y+7	; 0x07
    1c16:	22 30       	cpi	r18, 0x02	; 2
    1c18:	31 05       	cpc	r19, r1
    1c1a:	2c f4       	brge	.+10     	; 0x1c26 <DIO_voidSetPinValue+0x4a>
    1c1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c1e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	69 f0       	breq	.+26     	; 0x1c3e <DIO_voidSetPinValue+0x62>
    1c24:	d2 c0       	rjmp	.+420    	; 0x1dca <DIO_voidSetPinValue+0x1ee>
    1c26:	2e 81       	ldd	r18, Y+6	; 0x06
    1c28:	3f 81       	ldd	r19, Y+7	; 0x07
    1c2a:	22 30       	cpi	r18, 0x02	; 2
    1c2c:	31 05       	cpc	r19, r1
    1c2e:	89 f1       	breq	.+98     	; 0x1c92 <DIO_voidSetPinValue+0xb6>
    1c30:	8e 81       	ldd	r24, Y+6	; 0x06
    1c32:	9f 81       	ldd	r25, Y+7	; 0x07
    1c34:	83 30       	cpi	r24, 0x03	; 3
    1c36:	91 05       	cpc	r25, r1
    1c38:	09 f4       	brne	.+2      	; 0x1c3c <DIO_voidSetPinValue+0x60>
    1c3a:	40 c0       	rjmp	.+128    	; 0x1cbc <DIO_voidSetPinValue+0xe0>
    1c3c:	c6 c0       	rjmp	.+396    	; 0x1dca <DIO_voidSetPinValue+0x1ee>
		{
		case DIO_u8PORTA : CLR_BIT(PORTA , Copy_u8Pin); break; 
    1c3e:	ab e3       	ldi	r26, 0x3B	; 59
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	eb e3       	ldi	r30, 0x3B	; 59
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	48 2f       	mov	r20, r24
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	28 2f       	mov	r18, r24
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	02 2e       	mov	r0, r18
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <DIO_voidSetPinValue+0x80>
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	0a 94       	dec	r0
    1c5e:	e2 f7       	brpl	.-8      	; 0x1c58 <DIO_voidSetPinValue+0x7c>
    1c60:	80 95       	com	r24
    1c62:	84 23       	and	r24, r20
    1c64:	8c 93       	st	X, r24
    1c66:	b1 c0       	rjmp	.+354    	; 0x1dca <DIO_voidSetPinValue+0x1ee>
		case DIO_u8PORTB : CLR_BIT(PORTB , Copy_u8Pin); break;
    1c68:	a8 e3       	ldi	r26, 0x38	; 56
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	e8 e3       	ldi	r30, 0x38	; 56
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	48 2f       	mov	r20, r24
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	02 2e       	mov	r0, r18
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <DIO_voidSetPinValue+0xaa>
    1c82:	88 0f       	add	r24, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	0a 94       	dec	r0
    1c88:	e2 f7       	brpl	.-8      	; 0x1c82 <DIO_voidSetPinValue+0xa6>
    1c8a:	80 95       	com	r24
    1c8c:	84 23       	and	r24, r20
    1c8e:	8c 93       	st	X, r24
    1c90:	9c c0       	rjmp	.+312    	; 0x1dca <DIO_voidSetPinValue+0x1ee>
		case DIO_u8PORTC : CLR_BIT(PORTC , Copy_u8Pin); break;
    1c92:	a5 e3       	ldi	r26, 0x35	; 53
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e5 e3       	ldi	r30, 0x35	; 53
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	48 2f       	mov	r20, r24
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	28 2f       	mov	r18, r24
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	02 2e       	mov	r0, r18
    1caa:	02 c0       	rjmp	.+4      	; 0x1cb0 <DIO_voidSetPinValue+0xd4>
    1cac:	88 0f       	add	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	0a 94       	dec	r0
    1cb2:	e2 f7       	brpl	.-8      	; 0x1cac <DIO_voidSetPinValue+0xd0>
    1cb4:	80 95       	com	r24
    1cb6:	84 23       	and	r24, r20
    1cb8:	8c 93       	st	X, r24
    1cba:	87 c0       	rjmp	.+270    	; 0x1dca <DIO_voidSetPinValue+0x1ee>
		case DIO_u8PORTD : CLR_BIT(PORTD , Copy_u8Pin); break;
    1cbc:	a2 e3       	ldi	r26, 0x32	; 50
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	e2 e3       	ldi	r30, 0x32	; 50
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	48 2f       	mov	r20, r24
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	02 2e       	mov	r0, r18
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <DIO_voidSetPinValue+0xfe>
    1cd6:	88 0f       	add	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	0a 94       	dec	r0
    1cdc:	e2 f7       	brpl	.-8      	; 0x1cd6 <DIO_voidSetPinValue+0xfa>
    1cde:	80 95       	com	r24
    1ce0:	84 23       	and	r24, r20
    1ce2:	8c 93       	st	X, r24
    1ce4:	72 c0       	rjmp	.+228    	; 0x1dca <DIO_voidSetPinValue+0x1ee>
		}
	}
	else if (Copy_u8Value == DIO_u8HIGH)
    1ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce8:	81 30       	cpi	r24, 0x01	; 1
    1cea:	09 f0       	breq	.+2      	; 0x1cee <DIO_voidSetPinValue+0x112>
    1cec:	6e c0       	rjmp	.+220    	; 0x1dca <DIO_voidSetPinValue+0x1ee>
	{				
		switch (Copy_u8Port)
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	28 2f       	mov	r18, r24
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	3d 83       	std	Y+5, r19	; 0x05
    1cf6:	2c 83       	std	Y+4, r18	; 0x04
    1cf8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfa:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfc:	81 30       	cpi	r24, 0x01	; 1
    1cfe:	91 05       	cpc	r25, r1
    1d00:	49 f1       	breq	.+82     	; 0x1d54 <DIO_voidSetPinValue+0x178>
    1d02:	2c 81       	ldd	r18, Y+4	; 0x04
    1d04:	3d 81       	ldd	r19, Y+5	; 0x05
    1d06:	22 30       	cpi	r18, 0x02	; 2
    1d08:	31 05       	cpc	r19, r1
    1d0a:	2c f4       	brge	.+10     	; 0x1d16 <DIO_voidSetPinValue+0x13a>
    1d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d10:	00 97       	sbiw	r24, 0x00	; 0
    1d12:	61 f0       	breq	.+24     	; 0x1d2c <DIO_voidSetPinValue+0x150>
    1d14:	5a c0       	rjmp	.+180    	; 0x1dca <DIO_voidSetPinValue+0x1ee>
    1d16:	2c 81       	ldd	r18, Y+4	; 0x04
    1d18:	3d 81       	ldd	r19, Y+5	; 0x05
    1d1a:	22 30       	cpi	r18, 0x02	; 2
    1d1c:	31 05       	cpc	r19, r1
    1d1e:	71 f1       	breq	.+92     	; 0x1d7c <DIO_voidSetPinValue+0x1a0>
    1d20:	8c 81       	ldd	r24, Y+4	; 0x04
    1d22:	9d 81       	ldd	r25, Y+5	; 0x05
    1d24:	83 30       	cpi	r24, 0x03	; 3
    1d26:	91 05       	cpc	r25, r1
    1d28:	e9 f1       	breq	.+122    	; 0x1da4 <DIO_voidSetPinValue+0x1c8>
    1d2a:	4f c0       	rjmp	.+158    	; 0x1dca <DIO_voidSetPinValue+0x1ee>
		{
		case DIO_u8PORTA : SET_BIT(PORTA , Copy_u8Pin); break; 
    1d2c:	ab e3       	ldi	r26, 0x3B	; 59
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	eb e3       	ldi	r30, 0x3B	; 59
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	48 2f       	mov	r20, r24
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	28 2f       	mov	r18, r24
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	02 2e       	mov	r0, r18
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <DIO_voidSetPinValue+0x16e>
    1d46:	88 0f       	add	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	0a 94       	dec	r0
    1d4c:	e2 f7       	brpl	.-8      	; 0x1d46 <DIO_voidSetPinValue+0x16a>
    1d4e:	84 2b       	or	r24, r20
    1d50:	8c 93       	st	X, r24
    1d52:	3b c0       	rjmp	.+118    	; 0x1dca <DIO_voidSetPinValue+0x1ee>
		case DIO_u8PORTB : SET_BIT(PORTB , Copy_u8Pin); break;
    1d54:	a8 e3       	ldi	r26, 0x38	; 56
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e8 e3       	ldi	r30, 0x38	; 56
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	48 2f       	mov	r20, r24
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	02 2e       	mov	r0, r18
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <DIO_voidSetPinValue+0x196>
    1d6e:	88 0f       	add	r24, r24
    1d70:	99 1f       	adc	r25, r25
    1d72:	0a 94       	dec	r0
    1d74:	e2 f7       	brpl	.-8      	; 0x1d6e <DIO_voidSetPinValue+0x192>
    1d76:	84 2b       	or	r24, r20
    1d78:	8c 93       	st	X, r24
    1d7a:	27 c0       	rjmp	.+78     	; 0x1dca <DIO_voidSetPinValue+0x1ee>
		case DIO_u8PORTC : SET_BIT(PORTC , Copy_u8Pin); break;
    1d7c:	a5 e3       	ldi	r26, 0x35	; 53
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	e5 e3       	ldi	r30, 0x35	; 53
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	48 2f       	mov	r20, r24
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	02 2e       	mov	r0, r18
    1d94:	02 c0       	rjmp	.+4      	; 0x1d9a <DIO_voidSetPinValue+0x1be>
    1d96:	88 0f       	add	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	0a 94       	dec	r0
    1d9c:	e2 f7       	brpl	.-8      	; 0x1d96 <DIO_voidSetPinValue+0x1ba>
    1d9e:	84 2b       	or	r24, r20
    1da0:	8c 93       	st	X, r24
    1da2:	13 c0       	rjmp	.+38     	; 0x1dca <DIO_voidSetPinValue+0x1ee>
		case DIO_u8PORTD : SET_BIT(PORTD , Copy_u8Pin); break;
    1da4:	a2 e3       	ldi	r26, 0x32	; 50
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e2 e3       	ldi	r30, 0x32	; 50
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	48 2f       	mov	r20, r24
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	02 2e       	mov	r0, r18
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <DIO_voidSetPinValue+0x1e6>
    1dbe:	88 0f       	add	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	0a 94       	dec	r0
    1dc4:	e2 f7       	brpl	.-8      	; 0x1dbe <DIO_voidSetPinValue+0x1e2>
    1dc6:	84 2b       	or	r24, r20
    1dc8:	8c 93       	st	X, r24
		}
	}	
}
    1dca:	27 96       	adiw	r28, 0x07	; 7
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	f8 94       	cli
    1dd0:	de bf       	out	0x3e, r29	; 62
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	cd bf       	out	0x3d, r28	; 61
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <DIO_u8GetPinValue>:

u8 	 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	00 d0       	rcall	.+0      	; 0x1de2 <DIO_u8GetPinValue+0x6>
    1de2:	00 d0       	rcall	.+0      	; 0x1de4 <DIO_u8GetPinValue+0x8>
    1de4:	0f 92       	push	r0
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
    1dea:	8a 83       	std	Y+2, r24	; 0x02
    1dec:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value=0;
    1dee:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
    1df0:	8a 81       	ldd	r24, Y+2	; 0x02
    1df2:	28 2f       	mov	r18, r24
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	3d 83       	std	Y+5, r19	; 0x05
    1df8:	2c 83       	std	Y+4, r18	; 0x04
    1dfa:	4c 81       	ldd	r20, Y+4	; 0x04
    1dfc:	5d 81       	ldd	r21, Y+5	; 0x05
    1dfe:	41 30       	cpi	r20, 0x01	; 1
    1e00:	51 05       	cpc	r21, r1
    1e02:	41 f1       	breq	.+80     	; 0x1e54 <DIO_u8GetPinValue+0x78>
    1e04:	8c 81       	ldd	r24, Y+4	; 0x04
    1e06:	9d 81       	ldd	r25, Y+5	; 0x05
    1e08:	82 30       	cpi	r24, 0x02	; 2
    1e0a:	91 05       	cpc	r25, r1
    1e0c:	34 f4       	brge	.+12     	; 0x1e1a <DIO_u8GetPinValue+0x3e>
    1e0e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e10:	3d 81       	ldd	r19, Y+5	; 0x05
    1e12:	21 15       	cp	r18, r1
    1e14:	31 05       	cpc	r19, r1
    1e16:	61 f0       	breq	.+24     	; 0x1e30 <DIO_u8GetPinValue+0x54>
    1e18:	52 c0       	rjmp	.+164    	; 0x1ebe <DIO_u8GetPinValue+0xe2>
    1e1a:	4c 81       	ldd	r20, Y+4	; 0x04
    1e1c:	5d 81       	ldd	r21, Y+5	; 0x05
    1e1e:	42 30       	cpi	r20, 0x02	; 2
    1e20:	51 05       	cpc	r21, r1
    1e22:	51 f1       	breq	.+84     	; 0x1e78 <DIO_u8GetPinValue+0x9c>
    1e24:	8c 81       	ldd	r24, Y+4	; 0x04
    1e26:	9d 81       	ldd	r25, Y+5	; 0x05
    1e28:	83 30       	cpi	r24, 0x03	; 3
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	b9 f1       	breq	.+110    	; 0x1e9c <DIO_u8GetPinValue+0xc0>
    1e2e:	47 c0       	rjmp	.+142    	; 0x1ebe <DIO_u8GetPinValue+0xe2>
	{
	case DIO_u8PORTA : pin_value = GET_BIT(PINA , Copy_u8Pin); break;
    1e30:	e9 e3       	ldi	r30, 0x39	; 57
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	88 2f       	mov	r24, r24
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	a9 01       	movw	r20, r18
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <DIO_u8GetPinValue+0x6c>
    1e44:	55 95       	asr	r21
    1e46:	47 95       	ror	r20
    1e48:	8a 95       	dec	r24
    1e4a:	e2 f7       	brpl	.-8      	; 0x1e44 <DIO_u8GetPinValue+0x68>
    1e4c:	ca 01       	movw	r24, r20
    1e4e:	81 70       	andi	r24, 0x01	; 1
    1e50:	89 83       	std	Y+1, r24	; 0x01
    1e52:	35 c0       	rjmp	.+106    	; 0x1ebe <DIO_u8GetPinValue+0xe2>
	case DIO_u8PORTB : pin_value = GET_BIT(PINB , Copy_u8Pin); break;
    1e54:	e6 e3       	ldi	r30, 0x36	; 54
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	88 2f       	mov	r24, r24
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	a9 01       	movw	r20, r18
    1e66:	02 c0       	rjmp	.+4      	; 0x1e6c <DIO_u8GetPinValue+0x90>
    1e68:	55 95       	asr	r21
    1e6a:	47 95       	ror	r20
    1e6c:	8a 95       	dec	r24
    1e6e:	e2 f7       	brpl	.-8      	; 0x1e68 <DIO_u8GetPinValue+0x8c>
    1e70:	ca 01       	movw	r24, r20
    1e72:	81 70       	andi	r24, 0x01	; 1
    1e74:	89 83       	std	Y+1, r24	; 0x01
    1e76:	23 c0       	rjmp	.+70     	; 0x1ebe <DIO_u8GetPinValue+0xe2>
	case DIO_u8PORTC : pin_value = GET_BIT(PINC , Copy_u8Pin); break;
    1e78:	e3 e3       	ldi	r30, 0x33	; 51
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	28 2f       	mov	r18, r24
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	88 2f       	mov	r24, r24
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	a9 01       	movw	r20, r18
    1e8a:	02 c0       	rjmp	.+4      	; 0x1e90 <DIO_u8GetPinValue+0xb4>
    1e8c:	55 95       	asr	r21
    1e8e:	47 95       	ror	r20
    1e90:	8a 95       	dec	r24
    1e92:	e2 f7       	brpl	.-8      	; 0x1e8c <DIO_u8GetPinValue+0xb0>
    1e94:	ca 01       	movw	r24, r20
    1e96:	81 70       	andi	r24, 0x01	; 1
    1e98:	89 83       	std	Y+1, r24	; 0x01
    1e9a:	11 c0       	rjmp	.+34     	; 0x1ebe <DIO_u8GetPinValue+0xe2>
	case DIO_u8PORTD : pin_value = GET_BIT(PIND , Copy_u8Pin); break;
    1e9c:	e0 e3       	ldi	r30, 0x30	; 48
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	28 2f       	mov	r18, r24
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	88 2f       	mov	r24, r24
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	a9 01       	movw	r20, r18
    1eae:	02 c0       	rjmp	.+4      	; 0x1eb4 <DIO_u8GetPinValue+0xd8>
    1eb0:	55 95       	asr	r21
    1eb2:	47 95       	ror	r20
    1eb4:	8a 95       	dec	r24
    1eb6:	e2 f7       	brpl	.-8      	; 0x1eb0 <DIO_u8GetPinValue+0xd4>
    1eb8:	ca 01       	movw	r24, r20
    1eba:	81 70       	andi	r24, 0x01	; 1
    1ebc:	89 83       	std	Y+1, r24	; 0x01
	}
	return pin_value;
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret

00001ed0 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	00 d0       	rcall	.+0      	; 0x1ed6 <DIO_voidSetPortDirection+0x6>
    1ed6:	00 d0       	rcall	.+0      	; 0x1ed8 <DIO_voidSetPortDirection+0x8>
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	89 83       	std	Y+1, r24	; 0x01
    1ede:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	28 2f       	mov	r18, r24
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	3c 83       	std	Y+4, r19	; 0x04
    1ee8:	2b 83       	std	Y+3, r18	; 0x03
    1eea:	8b 81       	ldd	r24, Y+3	; 0x03
    1eec:	9c 81       	ldd	r25, Y+4	; 0x04
    1eee:	81 30       	cpi	r24, 0x01	; 1
    1ef0:	91 05       	cpc	r25, r1
    1ef2:	d1 f0       	breq	.+52     	; 0x1f28 <DIO_voidSetPortDirection+0x58>
    1ef4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ef6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ef8:	22 30       	cpi	r18, 0x02	; 2
    1efa:	31 05       	cpc	r19, r1
    1efc:	2c f4       	brge	.+10     	; 0x1f08 <DIO_voidSetPortDirection+0x38>
    1efe:	8b 81       	ldd	r24, Y+3	; 0x03
    1f00:	9c 81       	ldd	r25, Y+4	; 0x04
    1f02:	00 97       	sbiw	r24, 0x00	; 0
    1f04:	61 f0       	breq	.+24     	; 0x1f1e <DIO_voidSetPortDirection+0x4e>
    1f06:	1e c0       	rjmp	.+60     	; 0x1f44 <DIO_voidSetPortDirection+0x74>
    1f08:	2b 81       	ldd	r18, Y+3	; 0x03
    1f0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f0c:	22 30       	cpi	r18, 0x02	; 2
    1f0e:	31 05       	cpc	r19, r1
    1f10:	81 f0       	breq	.+32     	; 0x1f32 <DIO_voidSetPortDirection+0x62>
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	9c 81       	ldd	r25, Y+4	; 0x04
    1f16:	83 30       	cpi	r24, 0x03	; 3
    1f18:	91 05       	cpc	r25, r1
    1f1a:	81 f0       	breq	.+32     	; 0x1f3c <DIO_voidSetPortDirection+0x6c>
    1f1c:	13 c0       	rjmp	.+38     	; 0x1f44 <DIO_voidSetPortDirection+0x74>
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
    1f1e:	ea e3       	ldi	r30, 0x3A	; 58
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	80 83       	st	Z, r24
    1f26:	0e c0       	rjmp	.+28     	; 0x1f44 <DIO_voidSetPortDirection+0x74>
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
    1f28:	e7 e3       	ldi	r30, 0x37	; 55
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2e:	80 83       	st	Z, r24
    1f30:	09 c0       	rjmp	.+18     	; 0x1f44 <DIO_voidSetPortDirection+0x74>
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
    1f32:	e4 e3       	ldi	r30, 0x34	; 52
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	80 83       	st	Z, r24
    1f3a:	04 c0       	rjmp	.+8      	; 0x1f44 <DIO_voidSetPortDirection+0x74>
	case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
    1f3c:	e1 e3       	ldi	r30, 0x31	; 49
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	8a 81       	ldd	r24, Y+2	; 0x02
    1f42:	80 83       	st	Z, r24
	}
}
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	cf 91       	pop	r28
    1f4e:	df 91       	pop	r29
    1f50:	08 95       	ret

00001f52 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	00 d0       	rcall	.+0      	; 0x1f58 <DIO_voidSetPortValue+0x6>
    1f58:	00 d0       	rcall	.+0      	; 0x1f5a <DIO_voidSetPortValue+0x8>
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    1f60:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	28 2f       	mov	r18, r24
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	3c 83       	std	Y+4, r19	; 0x04
    1f6a:	2b 83       	std	Y+3, r18	; 0x03
    1f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f70:	81 30       	cpi	r24, 0x01	; 1
    1f72:	91 05       	cpc	r25, r1
    1f74:	d1 f0       	breq	.+52     	; 0x1faa <DIO_voidSetPortValue+0x58>
    1f76:	2b 81       	ldd	r18, Y+3	; 0x03
    1f78:	3c 81       	ldd	r19, Y+4	; 0x04
    1f7a:	22 30       	cpi	r18, 0x02	; 2
    1f7c:	31 05       	cpc	r19, r1
    1f7e:	2c f4       	brge	.+10     	; 0x1f8a <DIO_voidSetPortValue+0x38>
    1f80:	8b 81       	ldd	r24, Y+3	; 0x03
    1f82:	9c 81       	ldd	r25, Y+4	; 0x04
    1f84:	00 97       	sbiw	r24, 0x00	; 0
    1f86:	61 f0       	breq	.+24     	; 0x1fa0 <DIO_voidSetPortValue+0x4e>
    1f88:	1e c0       	rjmp	.+60     	; 0x1fc6 <DIO_voidSetPortValue+0x74>
    1f8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f8e:	22 30       	cpi	r18, 0x02	; 2
    1f90:	31 05       	cpc	r19, r1
    1f92:	81 f0       	breq	.+32     	; 0x1fb4 <DIO_voidSetPortValue+0x62>
    1f94:	8b 81       	ldd	r24, Y+3	; 0x03
    1f96:	9c 81       	ldd	r25, Y+4	; 0x04
    1f98:	83 30       	cpi	r24, 0x03	; 3
    1f9a:	91 05       	cpc	r25, r1
    1f9c:	81 f0       	breq	.+32     	; 0x1fbe <DIO_voidSetPortValue+0x6c>
    1f9e:	13 c0       	rjmp	.+38     	; 0x1fc6 <DIO_voidSetPortValue+0x74>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
    1fa0:	eb e3       	ldi	r30, 0x3B	; 59
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa6:	80 83       	st	Z, r24
    1fa8:	0e c0       	rjmp	.+28     	; 0x1fc6 <DIO_voidSetPortValue+0x74>
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
    1faa:	e8 e3       	ldi	r30, 0x38	; 56
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb0:	80 83       	st	Z, r24
    1fb2:	09 c0       	rjmp	.+18     	; 0x1fc6 <DIO_voidSetPortValue+0x74>
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
    1fb4:	e5 e3       	ldi	r30, 0x35	; 53
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	80 83       	st	Z, r24
    1fbc:	04 c0       	rjmp	.+8      	; 0x1fc6 <DIO_voidSetPortValue+0x74>
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
    1fbe:	e2 e3       	ldi	r30, 0x32	; 50
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	80 83       	st	Z, r24
	}
}
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	cf 91       	pop	r28
    1fd0:	df 91       	pop	r29
    1fd2:	08 95       	ret

00001fd4 <DIO_u8GetPortValue>:

u8 	 DIO_u8GetPortValue(u8 Copy_u8Port)
{
    1fd4:	df 93       	push	r29
    1fd6:	cf 93       	push	r28
    1fd8:	00 d0       	rcall	.+0      	; 0x1fda <DIO_u8GetPortValue+0x6>
    1fda:	00 d0       	rcall	.+0      	; 0x1fdc <DIO_u8GetPortValue+0x8>
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
    1fe0:	8a 83       	std	Y+2, r24	; 0x02
	u8 port_value;
	switch(Copy_u8Port)
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	3c 83       	std	Y+4, r19	; 0x04
    1fea:	2b 83       	std	Y+3, r18	; 0x03
    1fec:	8b 81       	ldd	r24, Y+3	; 0x03
    1fee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff0:	81 30       	cpi	r24, 0x01	; 1
    1ff2:	91 05       	cpc	r25, r1
    1ff4:	d1 f0       	breq	.+52     	; 0x202a <DIO_u8GetPortValue+0x56>
    1ff6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ff8:	3c 81       	ldd	r19, Y+4	; 0x04
    1ffa:	22 30       	cpi	r18, 0x02	; 2
    1ffc:	31 05       	cpc	r19, r1
    1ffe:	2c f4       	brge	.+10     	; 0x200a <DIO_u8GetPortValue+0x36>
    2000:	8b 81       	ldd	r24, Y+3	; 0x03
    2002:	9c 81       	ldd	r25, Y+4	; 0x04
    2004:	00 97       	sbiw	r24, 0x00	; 0
    2006:	61 f0       	breq	.+24     	; 0x2020 <DIO_u8GetPortValue+0x4c>
    2008:	1e c0       	rjmp	.+60     	; 0x2046 <DIO_u8GetPortValue+0x72>
    200a:	2b 81       	ldd	r18, Y+3	; 0x03
    200c:	3c 81       	ldd	r19, Y+4	; 0x04
    200e:	22 30       	cpi	r18, 0x02	; 2
    2010:	31 05       	cpc	r19, r1
    2012:	81 f0       	breq	.+32     	; 0x2034 <DIO_u8GetPortValue+0x60>
    2014:	8b 81       	ldd	r24, Y+3	; 0x03
    2016:	9c 81       	ldd	r25, Y+4	; 0x04
    2018:	83 30       	cpi	r24, 0x03	; 3
    201a:	91 05       	cpc	r25, r1
    201c:	81 f0       	breq	.+32     	; 0x203e <DIO_u8GetPortValue+0x6a>
    201e:	13 c0       	rjmp	.+38     	; 0x2046 <DIO_u8GetPortValue+0x72>
	{
	case DIO_u8PORTA : port_value = PORTA; break;
    2020:	eb e3       	ldi	r30, 0x3B	; 59
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	89 83       	std	Y+1, r24	; 0x01
    2028:	0e c0       	rjmp	.+28     	; 0x2046 <DIO_u8GetPortValue+0x72>
	case DIO_u8PORTB : port_value = PORTB; break;
    202a:	e8 e3       	ldi	r30, 0x38	; 56
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	89 83       	std	Y+1, r24	; 0x01
    2032:	09 c0       	rjmp	.+18     	; 0x2046 <DIO_u8GetPortValue+0x72>
	case DIO_u8PORTC : port_value = PORTC; break;
    2034:	e5 e3       	ldi	r30, 0x35	; 53
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	89 83       	std	Y+1, r24	; 0x01
    203c:	04 c0       	rjmp	.+8      	; 0x2046 <DIO_u8GetPortValue+0x72>
	case DIO_u8PORTD : port_value = PORTD; break;
    203e:	e2 e3       	ldi	r30, 0x32	; 50
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	89 83       	std	Y+1, r24	; 0x01
	}
	return port_value;
    2046:	89 81       	ldd	r24, Y+1	; 0x01
}
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	08 95       	ret

00002056 <GIE_voidEnable>:
#include "GIE_interface.h"
#include "GIE_register.h"



void GIE_voidEnable(void) {
    2056:	df 93       	push	r29
    2058:	cf 93       	push	r28
    205a:	cd b7       	in	r28, 0x3d	; 61
    205c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, 7);
    205e:	af e5       	ldi	r26, 0x5F	; 95
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	ef e5       	ldi	r30, 0x5F	; 95
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	80 68       	ori	r24, 0x80	; 128
    206a:	8c 93       	st	X, r24
}
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	08 95       	ret

00002072 <GIE_voidDisable>:


void GIE_voidDisable(void) {
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, 7);
    207a:	af e5       	ldi	r26, 0x5F	; 95
    207c:	b0 e0       	ldi	r27, 0x00	; 0
    207e:	ef e5       	ldi	r30, 0x5F	; 95
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	80 81       	ld	r24, Z
    2084:	8f 77       	andi	r24, 0x7F	; 127
    2086:	8c 93       	st	X, r24
}
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <TIMER0_voidInit>:
#include "TIMER0_register.h"

void (*TIMER0_CallBackFn)(void);

void TIMER0_voidInit(void)
{
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0 , 6);
#elif (TIMER0_MODE == CTC_MODE)
	SET_BIT(TCCR0 , 3);
	CLR_BIT(TCCR0 , 6);
#elif (TIMER0_MODE == FAST_MODE)
	SET_BIT(TCCR0 , 3);
    2096:	a3 e5       	ldi	r26, 0x53	; 83
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	e3 e5       	ldi	r30, 0x53	; 83
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	88 60       	ori	r24, 0x08	; 8
    20a2:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , 6);
    20a4:	a3 e5       	ldi	r26, 0x53	; 83
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	e3 e5       	ldi	r30, 0x53	; 83
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	80 64       	ori	r24, 0x40	; 64
    20b0:	8c 93       	st	X, r24
	{
		TCCR0 &= 0b11001111;
	}
#elif(COM0_MODE == Clear_On_COM)
	{
		TCCR0 &= 0b11001111;
    20b2:	a3 e5       	ldi	r26, 0x53	; 83
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	e3 e5       	ldi	r30, 0x53	; 83
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	8f 7c       	andi	r24, 0xCF	; 207
    20be:	8c 93       	st	X, r24
		TCCR0 |= Clear_COM0_Bits;
    20c0:	a3 e5       	ldi	r26, 0x53	; 83
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e3 e5       	ldi	r30, 0x53	; 83
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	80 62       	ori	r24, 0x20	; 32
    20cc:	8c 93       	st	X, r24
		TCCR0 &= 0b11001111;
		TCCR0 |= Set_COM1A_Bits;
	}
#endif
	//Select the prescaler
	TCCR0 &=0b11111000;
    20ce:	a3 e5       	ldi	r26, 0x53	; 83
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e3 e5       	ldi	r30, 0x53	; 83
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	88 7f       	andi	r24, 0xF8	; 248
    20da:	8c 93       	st	X, r24
	TCCR0 |= PRESCALER;
    20dc:	a3 e5       	ldi	r26, 0x53	; 83
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e3 e5       	ldi	r30, 0x53	; 83
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	82 60       	ori	r24, 0x02	; 2
    20e8:	8c 93       	st	X, r24
	SET_BIT(TIMSK , 0);
#elif (TIMER0_MODE == CTC_MODE)
	SET_BIT(TIMSK , 1);
#endif

}
    20ea:	cf 91       	pop	r28
    20ec:	df 91       	pop	r29
    20ee:	08 95       	ret

000020f0 <TIMER0_voidSetCompareValue>:


void TIMER0_voidSetCompareValue(u8 Copy_u8CompareValue)
{
    20f0:	df 93       	push	r29
    20f2:	cf 93       	push	r28
    20f4:	0f 92       	push	r0
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
    20fa:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CompareValue;
    20fc:	ec e5       	ldi	r30, 0x5C	; 92
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	80 83       	st	Z, r24
}
    2104:	0f 90       	pop	r0
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	08 95       	ret

0000210c <TIMER0_voidSetCallBack>:

void TIMER0_voidSetCallBack(void (*Copy_pvCallBackFn)(void))
{
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	00 d0       	rcall	.+0      	; 0x2112 <TIMER0_voidSetCallBack+0x6>
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
    2116:	9a 83       	std	Y+2, r25	; 0x02
    2118:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBackFn = Copy_pvCallBackFn;
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	9a 81       	ldd	r25, Y+2	; 0x02
    211e:	90 93 90 01 	sts	0x0190, r25
    2122:	80 93 8f 01 	sts	0x018F, r24
}
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	cf 91       	pop	r28
    212c:	df 91       	pop	r29
    212e:	08 95       	ret

00002130 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    2130:	1f 92       	push	r1
    2132:	0f 92       	push	r0
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	0f 92       	push	r0
    2138:	11 24       	eor	r1, r1
    213a:	2f 93       	push	r18
    213c:	3f 93       	push	r19
    213e:	4f 93       	push	r20
    2140:	5f 93       	push	r21
    2142:	6f 93       	push	r22
    2144:	7f 93       	push	r23
    2146:	8f 93       	push	r24
    2148:	9f 93       	push	r25
    214a:	af 93       	push	r26
    214c:	bf 93       	push	r27
    214e:	ef 93       	push	r30
    2150:	ff 93       	push	r31
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBackFn();
    215a:	e0 91 8f 01 	lds	r30, 0x018F
    215e:	f0 91 90 01 	lds	r31, 0x0190
    2162:	09 95       	icall
}
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	ff 91       	pop	r31
    216a:	ef 91       	pop	r30
    216c:	bf 91       	pop	r27
    216e:	af 91       	pop	r26
    2170:	9f 91       	pop	r25
    2172:	8f 91       	pop	r24
    2174:	7f 91       	pop	r23
    2176:	6f 91       	pop	r22
    2178:	5f 91       	pop	r21
    217a:	4f 91       	pop	r20
    217c:	3f 91       	pop	r19
    217e:	2f 91       	pop	r18
    2180:	0f 90       	pop	r0
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	0f 90       	pop	r0
    2186:	1f 90       	pop	r1
    2188:	18 95       	reti

0000218a <TIMER1_voidInit>:
#include "TIMER1_register.h"

void (*PWM_CallBackFun)(void);

void TIMER1_voidInit(void)
{
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	cd b7       	in	r28, 0x3d	; 61
    2190:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(TCCR1B , 3);
		SET_BIT(TCCR1B , 4);
	}
#elif(MODE == Normal_Mode)
	{
		CLR_BIT(TCCR1A , 0);
    2192:	af e4       	ldi	r26, 0x4F	; 79
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	ef e4       	ldi	r30, 0x4F	; 79
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	8e 7f       	andi	r24, 0xFE	; 254
    219e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A , 1);
    21a0:	af e4       	ldi	r26, 0x4F	; 79
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	ef e4       	ldi	r30, 0x4F	; 79
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	8d 7f       	andi	r24, 0xFD	; 253
    21ac:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B , 3);
    21ae:	ae e4       	ldi	r26, 0x4E	; 78
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	ee e4       	ldi	r30, 0x4E	; 78
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	87 7f       	andi	r24, 0xF7	; 247
    21ba:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B , 4);
    21bc:	ae e4       	ldi	r26, 0x4E	; 78
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	ee e4       	ldi	r30, 0x4E	; 78
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	80 81       	ld	r24, Z
    21c6:	8f 7e       	andi	r24, 0xEF	; 239
    21c8:	8c 93       	st	X, r24
		TCNT1 = 0;
    21ca:	ec e4       	ldi	r30, 0x4C	; 76
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	11 82       	std	Z+1, r1	; 0x01
    21d0:	10 82       	st	Z, r1
#endif

	//set Compare output mode "1A"
#if(COM1A_MODE == Disconnected)
	{
		TCCR1A &= 0b00111111;
    21d2:	af e4       	ldi	r26, 0x4F	; 79
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	ef e4       	ldi	r30, 0x4F	; 79
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	8f 73       	andi	r24, 0x3F	; 63
    21de:	8c 93       	st	X, r24
#endif

	//set Compare output mode "1B"
#if(COM1B_MODE == Disconnected)
	{
		TCCR1A &= 0b11001111;
    21e0:	af e4       	ldi	r26, 0x4F	; 79
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	ef e4       	ldi	r30, 0x4F	; 79
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	8f 7c       	andi	r24, 0xCF	; 207
    21ec:	8c 93       	st	X, r24
		TCCR1A |= Set_COM1B_Bits;
	}
#endif

	//Set Prescaler
	TCCR1B &= 0b11111000;
    21ee:	ae e4       	ldi	r26, 0x4E	; 78
    21f0:	b0 e0       	ldi	r27, 0x00	; 0
    21f2:	ee e4       	ldi	r30, 0x4E	; 78
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	88 7f       	andi	r24, 0xF8	; 248
    21fa:	8c 93       	st	X, r24
	TCCR1B |= PRESCALER;
    21fc:	ae e4       	ldi	r26, 0x4E	; 78
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	ee e4       	ldi	r30, 0x4E	; 78
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	82 60       	ori	r24, 0x02	; 2
    2208:	8c 93       	st	X, r24

	//select edge trigre
#if(ICU_EDGE_TRIGRE == TIMER1_RISING_EDGE)
	{
		SET_BIT(TCCR1B , 6);
    220a:	ae e4       	ldi	r26, 0x4E	; 78
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	ee e4       	ldi	r30, 0x4E	; 78
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	80 64       	ori	r24, 0x40	; 64
    2216:	8c 93       	st	X, r24
		SET_BIT(TCCR1B , 7);
    2218:	ae e4       	ldi	r26, 0x4E	; 78
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	ee e4       	ldi	r30, 0x4E	; 78
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	80 68       	ori	r24, 0x80	; 128
    2224:	8c 93       	st	X, r24
#elif(ICU_EDGE_TRIGRE == TIMER1_FALLING_EDGE)
	{
		CLR_BIT(TCCR1B , 6);
	}
#endif
}
    2226:	cf 91       	pop	r28
    2228:	df 91       	pop	r29
    222a:	08 95       	ret

0000222c <TIMER1_voidSetTopValue>:


void TIMER1_voidSetTopValue(u16 Copy_u16TopValue)
{
    222c:	df 93       	push	r29
    222e:	cf 93       	push	r28
    2230:	00 d0       	rcall	.+0      	; 0x2232 <TIMER1_voidSetTopValue+0x6>
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
    2236:	9a 83       	std	Y+2, r25	; 0x02
    2238:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16TopValue;
    223a:	e6 e4       	ldi	r30, 0x46	; 70
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	89 81       	ldd	r24, Y+1	; 0x01
    2240:	9a 81       	ldd	r25, Y+2	; 0x02
    2242:	91 83       	std	Z+1, r25	; 0x01
    2244:	80 83       	st	Z, r24
}
    2246:	0f 90       	pop	r0
    2248:	0f 90       	pop	r0
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	08 95       	ret

00002250 <TIMER1_voidSetCompareValue>:


void TIMER1_voidSetCompareValue(u16 Copy_u16COM1A_Value , u16 Copy_u16COM1B_Value)
{
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	00 d0       	rcall	.+0      	; 0x2256 <TIMER1_voidSetCompareValue+0x6>
    2256:	00 d0       	rcall	.+0      	; 0x2258 <TIMER1_voidSetCompareValue+0x8>
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    225c:	9a 83       	std	Y+2, r25	; 0x02
    225e:	89 83       	std	Y+1, r24	; 0x01
    2260:	7c 83       	std	Y+4, r23	; 0x04
    2262:	6b 83       	std	Y+3, r22	; 0x03
		}
	if(COM1A_MODE != Disconnected)
		{
		OCR1A = Copy_u16COM1A_Value;
		}
}
    2264:	0f 90       	pop	r0
    2266:	0f 90       	pop	r0
    2268:	0f 90       	pop	r0
    226a:	0f 90       	pop	r0
    226c:	cf 91       	pop	r28
    226e:	df 91       	pop	r29
    2270:	08 95       	ret

00002272 <TIMER1_voidCallBackFunction>:

void TIMER1_voidCallBackFunction(void (*Copy_pvCallBackFn)(void))
{
    2272:	df 93       	push	r29
    2274:	cf 93       	push	r28
    2276:	00 d0       	rcall	.+0      	; 0x2278 <TIMER1_voidCallBackFunction+0x6>
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
    227c:	9a 83       	std	Y+2, r25	; 0x02
    227e:	89 83       	std	Y+1, r24	; 0x01
	PWM_CallBackFun = Copy_pvCallBackFn;
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	9a 81       	ldd	r25, Y+2	; 0x02
    2284:	90 93 92 01 	sts	0x0192, r25
    2288:	80 93 91 01 	sts	0x0191, r24
}
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	cf 91       	pop	r28
    2292:	df 91       	pop	r29
    2294:	08 95       	ret

00002296 <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
    2296:	1f 92       	push	r1
    2298:	0f 92       	push	r0
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	0f 92       	push	r0
    229e:	11 24       	eor	r1, r1
    22a0:	2f 93       	push	r18
    22a2:	3f 93       	push	r19
    22a4:	4f 93       	push	r20
    22a6:	5f 93       	push	r21
    22a8:	6f 93       	push	r22
    22aa:	7f 93       	push	r23
    22ac:	8f 93       	push	r24
    22ae:	9f 93       	push	r25
    22b0:	af 93       	push	r26
    22b2:	bf 93       	push	r27
    22b4:	ef 93       	push	r30
    22b6:	ff 93       	push	r31
    22b8:	df 93       	push	r29
    22ba:	cf 93       	push	r28
    22bc:	cd b7       	in	r28, 0x3d	; 61
    22be:	de b7       	in	r29, 0x3e	; 62
	PWM_CallBackFun();
    22c0:	e0 91 91 01 	lds	r30, 0x0191
    22c4:	f0 91 92 01 	lds	r31, 0x0192
    22c8:	09 95       	icall
}
    22ca:	cf 91       	pop	r28
    22cc:	df 91       	pop	r29
    22ce:	ff 91       	pop	r31
    22d0:	ef 91       	pop	r30
    22d2:	bf 91       	pop	r27
    22d4:	af 91       	pop	r26
    22d6:	9f 91       	pop	r25
    22d8:	8f 91       	pop	r24
    22da:	7f 91       	pop	r23
    22dc:	6f 91       	pop	r22
    22de:	5f 91       	pop	r21
    22e0:	4f 91       	pop	r20
    22e2:	3f 91       	pop	r19
    22e4:	2f 91       	pop	r18
    22e6:	0f 90       	pop	r0
    22e8:	0f be       	out	0x3f, r0	; 63
    22ea:	0f 90       	pop	r0
    22ec:	1f 90       	pop	r1
    22ee:	18 95       	reti

000022f0 <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
    22f0:	1f 92       	push	r1
    22f2:	0f 92       	push	r0
    22f4:	0f b6       	in	r0, 0x3f	; 63
    22f6:	0f 92       	push	r0
    22f8:	11 24       	eor	r1, r1
    22fa:	2f 93       	push	r18
    22fc:	3f 93       	push	r19
    22fe:	4f 93       	push	r20
    2300:	5f 93       	push	r21
    2302:	6f 93       	push	r22
    2304:	7f 93       	push	r23
    2306:	8f 93       	push	r24
    2308:	9f 93       	push	r25
    230a:	af 93       	push	r26
    230c:	bf 93       	push	r27
    230e:	ef 93       	push	r30
    2310:	ff 93       	push	r31
    2312:	df 93       	push	r29
    2314:	cf 93       	push	r28
    2316:	cd b7       	in	r28, 0x3d	; 61
    2318:	de b7       	in	r29, 0x3e	; 62
	PWM_CallBackFun();
    231a:	e0 91 91 01 	lds	r30, 0x0191
    231e:	f0 91 92 01 	lds	r31, 0x0192
    2322:	09 95       	icall
}
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	ff 91       	pop	r31
    232a:	ef 91       	pop	r30
    232c:	bf 91       	pop	r27
    232e:	af 91       	pop	r26
    2330:	9f 91       	pop	r25
    2332:	8f 91       	pop	r24
    2334:	7f 91       	pop	r23
    2336:	6f 91       	pop	r22
    2338:	5f 91       	pop	r21
    233a:	4f 91       	pop	r20
    233c:	3f 91       	pop	r19
    233e:	2f 91       	pop	r18
    2340:	0f 90       	pop	r0
    2342:	0f be       	out	0x3f, r0	; 63
    2344:	0f 90       	pop	r0
    2346:	1f 90       	pop	r1
    2348:	18 95       	reti

0000234a <TIMER1_voidDelaySecond>:


void TIMER1_voidDelaySecond(u16 Copy_u16Sec)
{
    234a:	df 93       	push	r29
    234c:	cf 93       	push	r28
    234e:	00 d0       	rcall	.+0      	; 0x2350 <TIMER1_voidDelaySecond+0x6>
    2350:	00 d0       	rcall	.+0      	; 0x2352 <TIMER1_voidDelaySecond+0x8>
    2352:	00 d0       	rcall	.+0      	; 0x2354 <TIMER1_voidDelaySecond+0xa>
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	9e 83       	std	Y+6, r25	; 0x06
    235a:	8d 83       	std	Y+5, r24	; 0x05
	u16 Count_Per_Sec = 7813;
    235c:	85 e8       	ldi	r24, 0x85	; 133
    235e:	9e e1       	ldi	r25, 0x1E	; 30
    2360:	9c 83       	std	Y+4, r25	; 0x04
    2362:	8b 83       	std	Y+3, r24	; 0x03
	u16 overflow_counter = 0;
    2364:	1a 82       	std	Y+2, r1	; 0x02
    2366:	19 82       	std	Y+1, r1	; 0x01
    2368:	1e c0       	rjmp	.+60     	; 0x23a6 <TIMER1_voidDelaySecond+0x5c>

	while(Copy_u16Sec > 0)
	{
		TCNT1 = 0;
    236a:	ec e4       	ldi	r30, 0x4C	; 76
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	11 82       	std	Z+1, r1	; 0x01
    2370:	10 82       	st	Z, r1

		while (TCNT1 < Count_Per_Sec);
    2372:	ec e4       	ldi	r30, 0x4C	; 76
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	20 81       	ld	r18, Z
    2378:	31 81       	ldd	r19, Z+1	; 0x01
    237a:	8b 81       	ldd	r24, Y+3	; 0x03
    237c:	9c 81       	ldd	r25, Y+4	; 0x04
    237e:	28 17       	cp	r18, r24
    2380:	39 07       	cpc	r19, r25
    2382:	b8 f3       	brcs	.-18     	; 0x2372 <TIMER1_voidDelaySecond+0x28>

		 overflow_counter++;  // Count how many times we waited
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	9a 81       	ldd	r25, Y+2	; 0x02
    2388:	01 96       	adiw	r24, 0x01	; 1
    238a:	9a 83       	std	Y+2, r25	; 0x02
    238c:	89 83       	std	Y+1, r24	; 0x01

		if (overflow_counter == 1)  // 1 second passed
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	9a 81       	ldd	r25, Y+2	; 0x02
    2392:	81 30       	cpi	r24, 0x01	; 1
    2394:	91 05       	cpc	r25, r1
    2396:	39 f4       	brne	.+14     	; 0x23a6 <TIMER1_voidDelaySecond+0x5c>
		{
			Copy_u16Sec--;  // Decrement the seconds remaining
    2398:	8d 81       	ldd	r24, Y+5	; 0x05
    239a:	9e 81       	ldd	r25, Y+6	; 0x06
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	9e 83       	std	Y+6, r25	; 0x06
    23a0:	8d 83       	std	Y+5, r24	; 0x05
			overflow_counter = 0;  // Reset overflow counter for the next second
    23a2:	1a 82       	std	Y+2, r1	; 0x02
    23a4:	19 82       	std	Y+1, r1	; 0x01
void TIMER1_voidDelaySecond(u16 Copy_u16Sec)
{
	u16 Count_Per_Sec = 7813;
	u16 overflow_counter = 0;

	while(Copy_u16Sec > 0)
    23a6:	8d 81       	ldd	r24, Y+5	; 0x05
    23a8:	9e 81       	ldd	r25, Y+6	; 0x06
    23aa:	00 97       	sbiw	r24, 0x00	; 0
    23ac:	f1 f6       	brne	.-68     	; 0x236a <TIMER1_voidDelaySecond+0x20>
			Copy_u16Sec--;  // Decrement the seconds remaining
			overflow_counter = 0;  // Reset overflow counter for the next second
		}

	}
}
    23ae:	26 96       	adiw	r28, 0x06	; 6
    23b0:	0f b6       	in	r0, 0x3f	; 63
    23b2:	f8 94       	cli
    23b4:	de bf       	out	0x3e, r29	; 62
    23b6:	0f be       	out	0x3f, r0	; 63
    23b8:	cd bf       	out	0x3d, r28	; 61
    23ba:	cf 91       	pop	r28
    23bc:	df 91       	pop	r29
    23be:	08 95       	ret

000023c0 <__vector_6>:


void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    23c0:	1f 92       	push	r1
    23c2:	0f 92       	push	r0
    23c4:	0f b6       	in	r0, 0x3f	; 63
    23c6:	0f 92       	push	r0
    23c8:	11 24       	eor	r1, r1
    23ca:	2f 93       	push	r18
    23cc:	3f 93       	push	r19
    23ce:	4f 93       	push	r20
    23d0:	5f 93       	push	r21
    23d2:	6f 93       	push	r22
    23d4:	7f 93       	push	r23
    23d6:	8f 93       	push	r24
    23d8:	9f 93       	push	r25
    23da:	af 93       	push	r26
    23dc:	bf 93       	push	r27
    23de:	ef 93       	push	r30
    23e0:	ff 93       	push	r31
    23e2:	df 93       	push	r29
    23e4:	cf 93       	push	r28
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
	PWM_CallBackFun();
    23ea:	e0 91 91 01 	lds	r30, 0x0191
    23ee:	f0 91 92 01 	lds	r31, 0x0192
    23f2:	09 95       	icall
}
    23f4:	cf 91       	pop	r28
    23f6:	df 91       	pop	r29
    23f8:	ff 91       	pop	r31
    23fa:	ef 91       	pop	r30
    23fc:	bf 91       	pop	r27
    23fe:	af 91       	pop	r26
    2400:	9f 91       	pop	r25
    2402:	8f 91       	pop	r24
    2404:	7f 91       	pop	r23
    2406:	6f 91       	pop	r22
    2408:	5f 91       	pop	r21
    240a:	4f 91       	pop	r20
    240c:	3f 91       	pop	r19
    240e:	2f 91       	pop	r18
    2410:	0f 90       	pop	r0
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	0f 90       	pop	r0
    2416:	1f 90       	pop	r1
    2418:	18 95       	reti

0000241a <TIMER1_u16ReadCaptureValue>:


u16 TIMER1_u16ReadCaptureValue(void)
{
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	00 d0       	rcall	.+0      	; 0x2420 <TIMER1_u16ReadCaptureValue+0x6>
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
	u16 Reading=0;
    2424:	1a 82       	std	Y+2, r1	; 0x02
    2426:	19 82       	std	Y+1, r1	; 0x01
	Reading = ICR1;
    2428:	e6 e4       	ldi	r30, 0x46	; 70
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	80 81       	ld	r24, Z
    242e:	91 81       	ldd	r25, Z+1	; 0x01
    2430:	9a 83       	std	Y+2, r25	; 0x02
    2432:	89 83       	std	Y+1, r24	; 0x01
	return Reading;
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2438:	0f 90       	pop	r0
    243a:	0f 90       	pop	r0
    243c:	cf 91       	pop	r28
    243e:	df 91       	pop	r29
    2440:	08 95       	ret

00002442 <TIMER1_voidSetICUEdgeTrigre>:


void TIMER1_voidSetICUEdgeTrigre(u8 Copy_u8Edge)			//there is edition here!!!
{
    2442:	df 93       	push	r29
    2444:	cf 93       	push	r28
    2446:	0f 92       	push	r0
    2448:	cd b7       	in	r28, 0x3d	; 61
    244a:	de b7       	in	r29, 0x3e	; 62
    244c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Edge == TIMER1_RISING_EDGE)
    244e:	89 81       	ldd	r24, Y+1	; 0x01
    2450:	81 30       	cpi	r24, 0x01	; 1
    2452:	41 f4       	brne	.+16     	; 0x2464 <TIMER1_voidSetICUEdgeTrigre+0x22>
	{
		SET_BIT(TCCR1B , 6);
    2454:	ae e4       	ldi	r26, 0x4E	; 78
    2456:	b0 e0       	ldi	r27, 0x00	; 0
    2458:	ee e4       	ldi	r30, 0x4E	; 78
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
    245e:	80 64       	ori	r24, 0x40	; 64
    2460:	8c 93       	st	X, r24
    2462:	0a c0       	rjmp	.+20     	; 0x2478 <TIMER1_voidSetICUEdgeTrigre+0x36>
	}
	else if(Copy_u8Edge == TIMER1_FALLING_EDGE)
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	88 23       	and	r24, r24
    2468:	39 f4       	brne	.+14     	; 0x2478 <TIMER1_voidSetICUEdgeTrigre+0x36>
	{
		CLR_BIT(TCCR1B , 6);
    246a:	ae e4       	ldi	r26, 0x4E	; 78
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	ee e4       	ldi	r30, 0x4E	; 78
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
    2474:	8f 7b       	andi	r24, 0xBF	; 191
    2476:	8c 93       	st	X, r24
	}
}
    2478:	0f 90       	pop	r0
    247a:	cf 91       	pop	r28
    247c:	df 91       	pop	r29
    247e:	08 95       	ret

00002480 <TIMER1_voidICUInterruptEnable>:

void TIMER1_voidICUInterruptEnable(void)
{
    2480:	df 93       	push	r29
    2482:	cf 93       	push	r28
    2484:	cd b7       	in	r28, 0x3d	; 61
    2486:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , 5);
    2488:	a9 e5       	ldi	r26, 0x59	; 89
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	e9 e5       	ldi	r30, 0x59	; 89
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	80 62       	ori	r24, 0x20	; 32
    2494:	8c 93       	st	X, r24
}
    2496:	cf 91       	pop	r28
    2498:	df 91       	pop	r29
    249a:	08 95       	ret

0000249c <TIMER1_voidICUInterruptDisable>:

void TIMER1_voidICUInterruptDisable(void)
{
    249c:	df 93       	push	r29
    249e:	cf 93       	push	r28
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK , 5);
    24a4:	a9 e5       	ldi	r26, 0x59	; 89
    24a6:	b0 e0       	ldi	r27, 0x00	; 0
    24a8:	e9 e5       	ldi	r30, 0x59	; 89
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	80 81       	ld	r24, Z
    24ae:	8f 7d       	andi	r24, 0xDF	; 223
    24b0:	8c 93       	st	X, r24
}
    24b2:	cf 91       	pop	r28
    24b4:	df 91       	pop	r29
    24b6:	08 95       	ret

000024b8 <main>:
u16 Falling_Edge_Time=0;
u8 flag=0;
u8 switchState = 0;

int main(void)
{
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
    24c0:	af 97       	sbiw	r28, 0x2f	; 47
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	f8 94       	cli
    24c6:	de bf       	out	0x3e, r29	; 62
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	cd bf       	out	0x3d, r28	; 61
	GIE_voidEnable();
    24cc:	0e 94 2b 10 	call	0x2056	; 0x2056 <GIE_voidEnable>
	DIO_voidSetPinDirection(DIO_u8PORTB , DIO_u8PIN7 , DIO_u8INPUT);			//for switch
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	67 e0       	ldi	r22, 0x07	; 7
    24d4:	40 e0       	ldi	r20, 0x00	; 0
    24d6:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(DIO_u8PORTB , DIO_u8PIN7 , DIO_u8HIGH);					//activate pull up resisrance
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	67 e0       	ldi	r22, 0x07	; 7
    24de:	41 e0       	ldi	r20, 0x01	; 1
    24e0:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <DIO_voidSetPinValue>

	CLCD_voidInit();
    24e4:	0e 94 8c 07 	call	0xf18	; 0xf18 <CLCD_voidInit>
	CLCD_voidSendData('t');
    24e8:	84 e7       	ldi	r24, 0x74	; 116
    24ea:	0e 94 50 06 	call	0xca0	; 0xca0 <CLCD_voidSendData>
	DIO_voidSetPinDirection(DIO_u8PORTB , DIO_u8PIN3 , DIO_u8OUTPUT);
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	63 e0       	ldi	r22, 0x03	; 3
    24f2:	41 e0       	ldi	r20, 0x01	; 1
    24f4:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_voidSetPinDirection>
	TIMER0_voidInit();
    24f8:	0e 94 47 10 	call	0x208e	; 0x208e <TIMER0_voidInit>
	TIMER0_voidSetCompareValue(128);
    24fc:	80 e8       	ldi	r24, 0x80	; 128
    24fe:	0e 94 78 10 	call	0x20f0	; 0x20f0 <TIMER0_voidSetCompareValue>

	DIO_voidSetPinDirection(DIO_u8PORTD , DIO_u8PIN6 , DIO_u8INPUT);
    2502:	83 e0       	ldi	r24, 0x03	; 3
    2504:	66 e0       	ldi	r22, 0x06	; 6
    2506:	40 e0       	ldi	r20, 0x00	; 0
    2508:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_voidSetPinDirection>

	TIMER1_voidInit();
    250c:	0e 94 c5 10 	call	0x218a	; 0x218a <TIMER1_voidInit>

	TIMER1_voidCallBackFunction(CapturedValues);
    2510:	8e e4       	ldi	r24, 0x4E	; 78
    2512:	94 e1       	ldi	r25, 0x14	; 20
    2514:	0e 94 39 11 	call	0x2272	; 0x2272 <TIMER1_voidCallBackFunction>

	TIMER1_voidICUInterruptEnable();
    2518:	0e 94 40 12 	call	0x2480	; 0x2480 <TIMER1_voidICUInterruptEnable>
	while(1)
	{
		u16 total_time = Rising_Edge2_Time - Rising_Edge1_Time;
    251c:	20 91 88 01 	lds	r18, 0x0188
    2520:	30 91 89 01 	lds	r19, 0x0189
    2524:	80 91 86 01 	lds	r24, 0x0186
    2528:	90 91 87 01 	lds	r25, 0x0187
    252c:	a9 01       	movw	r20, r18
    252e:	48 1b       	sub	r20, r24
    2530:	59 0b       	sbc	r21, r25
    2532:	ca 01       	movw	r24, r20
    2534:	9f a7       	std	Y+47, r25	; 0x2f
    2536:	8e a7       	std	Y+46, r24	; 0x2e
		u16 on_time = Falling_Edge_Time - Rising_Edge1_Time;
    2538:	20 91 8a 01 	lds	r18, 0x018A
    253c:	30 91 8b 01 	lds	r19, 0x018B
    2540:	80 91 86 01 	lds	r24, 0x0186
    2544:	90 91 87 01 	lds	r25, 0x0187
    2548:	a9 01       	movw	r20, r18
    254a:	48 1b       	sub	r20, r24
    254c:	59 0b       	sbc	r21, r25
    254e:	ca 01       	movw	r24, r20
    2550:	9d a7       	std	Y+45, r25	; 0x2d
    2552:	8c a7       	std	Y+44, r24	; 0x2c

        u8 currentSwitchState = DIO_u8GetPinValue(DIO_u8PORTB, DIO_u8PIN7);
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	67 e0       	ldi	r22, 0x07	; 7
    2558:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <DIO_u8GetPinValue>
    255c:	8b a7       	std	Y+43, r24	; 0x2b

        // Check if DIP switch is toggled (0 for pressed/ON state)
        if (currentSwitchState == 0 && switchState == 1)
    255e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2560:	88 23       	and	r24, r24
    2562:	09 f0       	breq	.+2      	; 0x2566 <main+0xae>
    2564:	81 c0       	rjmp	.+258    	; 0x2668 <main+0x1b0>
    2566:	80 91 8d 01 	lds	r24, 0x018D
    256a:	81 30       	cpi	r24, 0x01	; 1
    256c:	09 f0       	breq	.+2      	; 0x2570 <main+0xb8>
    256e:	7c c0       	rjmp	.+248    	; 0x2668 <main+0x1b0>
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	a8 e4       	ldi	r26, 0x48	; 72
    2576:	b2 e4       	ldi	r27, 0x42	; 66
    2578:	8f a3       	std	Y+39, r24	; 0x27
    257a:	98 a7       	std	Y+40, r25	; 0x28
    257c:	a9 a7       	std	Y+41, r26	; 0x29
    257e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2580:	6f a1       	ldd	r22, Y+39	; 0x27
    2582:	78 a5       	ldd	r23, Y+40	; 0x28
    2584:	89 a5       	ldd	r24, Y+41	; 0x29
    2586:	9a a5       	ldd	r25, Y+42	; 0x2a
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	4a ef       	ldi	r20, 0xFA	; 250
    258e:	54 e4       	ldi	r21, 0x44	; 68
    2590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	8b a3       	std	Y+35, r24	; 0x23
    259a:	9c a3       	std	Y+36, r25	; 0x24
    259c:	ad a3       	std	Y+37, r26	; 0x25
    259e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25a0:	6b a1       	ldd	r22, Y+35	; 0x23
    25a2:	7c a1       	ldd	r23, Y+36	; 0x24
    25a4:	8d a1       	ldd	r24, Y+37	; 0x25
    25a6:	9e a1       	ldd	r25, Y+38	; 0x26
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	40 e8       	ldi	r20, 0x80	; 128
    25ae:	5f e3       	ldi	r21, 0x3F	; 63
    25b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25b4:	88 23       	and	r24, r24
    25b6:	2c f4       	brge	.+10     	; 0x25c2 <main+0x10a>
		__ticks = 1;
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	9a a3       	std	Y+34, r25	; 0x22
    25be:	89 a3       	std	Y+33, r24	; 0x21
    25c0:	3f c0       	rjmp	.+126    	; 0x2640 <main+0x188>
	else if (__tmp > 65535)
    25c2:	6b a1       	ldd	r22, Y+35	; 0x23
    25c4:	7c a1       	ldd	r23, Y+36	; 0x24
    25c6:	8d a1       	ldd	r24, Y+37	; 0x25
    25c8:	9e a1       	ldd	r25, Y+38	; 0x26
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	3f ef       	ldi	r19, 0xFF	; 255
    25ce:	4f e7       	ldi	r20, 0x7F	; 127
    25d0:	57 e4       	ldi	r21, 0x47	; 71
    25d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25d6:	18 16       	cp	r1, r24
    25d8:	4c f5       	brge	.+82     	; 0x262c <main+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25da:	6f a1       	ldd	r22, Y+39	; 0x27
    25dc:	78 a5       	ldd	r23, Y+40	; 0x28
    25de:	89 a5       	ldd	r24, Y+41	; 0x29
    25e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	40 e2       	ldi	r20, 0x20	; 32
    25e8:	51 e4       	ldi	r21, 0x41	; 65
    25ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	bc 01       	movw	r22, r24
    25f4:	cd 01       	movw	r24, r26
    25f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	9a a3       	std	Y+34, r25	; 0x22
    2600:	89 a3       	std	Y+33, r24	; 0x21
    2602:	0f c0       	rjmp	.+30     	; 0x2622 <main+0x16a>
    2604:	88 ec       	ldi	r24, 0xC8	; 200
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	98 a3       	std	Y+32, r25	; 0x20
    260a:	8f 8f       	std	Y+31, r24	; 0x1f
    260c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    260e:	98 a1       	ldd	r25, Y+32	; 0x20
    2610:	01 97       	sbiw	r24, 0x01	; 1
    2612:	f1 f7       	brne	.-4      	; 0x2610 <main+0x158>
    2614:	98 a3       	std	Y+32, r25	; 0x20
    2616:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2618:	89 a1       	ldd	r24, Y+33	; 0x21
    261a:	9a a1       	ldd	r25, Y+34	; 0x22
    261c:	01 97       	sbiw	r24, 0x01	; 1
    261e:	9a a3       	std	Y+34, r25	; 0x22
    2620:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2622:	89 a1       	ldd	r24, Y+33	; 0x21
    2624:	9a a1       	ldd	r25, Y+34	; 0x22
    2626:	00 97       	sbiw	r24, 0x00	; 0
    2628:	69 f7       	brne	.-38     	; 0x2604 <main+0x14c>
    262a:	14 c0       	rjmp	.+40     	; 0x2654 <main+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    262c:	6b a1       	ldd	r22, Y+35	; 0x23
    262e:	7c a1       	ldd	r23, Y+36	; 0x24
    2630:	8d a1       	ldd	r24, Y+37	; 0x25
    2632:	9e a1       	ldd	r25, Y+38	; 0x26
    2634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	9a a3       	std	Y+34, r25	; 0x22
    263e:	89 a3       	std	Y+33, r24	; 0x21
    2640:	89 a1       	ldd	r24, Y+33	; 0x21
    2642:	9a a1       	ldd	r25, Y+34	; 0x22
    2644:	9e 8f       	std	Y+30, r25	; 0x1e
    2646:	8d 8f       	std	Y+29, r24	; 0x1d
    2648:	8d 8d       	ldd	r24, Y+29	; 0x1d
    264a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    264c:	01 97       	sbiw	r24, 0x01	; 1
    264e:	f1 f7       	brne	.-4      	; 0x264c <main+0x194>
    2650:	9e 8f       	std	Y+30, r25	; 0x1e
    2652:	8d 8f       	std	Y+29, r24	; 0x1d
        {
            _delay_ms(50);  // Debounce delay to avoid multiple triggers
            if (DIO_u8GetPinValue(DIO_u8PORTB, DIO_u8PIN7) == 0)  // Confirm state change
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	67 e0       	ldi	r22, 0x07	; 7
    2658:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <DIO_u8GetPinValue>
    265c:	88 23       	and	r24, r24
    265e:	21 f4       	brne	.+8      	; 0x2668 <main+0x1b0>
            {
                switchState = 0;  // Update switch state
    2660:	10 92 8d 01 	sts	0x018D, r1
                TIMER1_voidICUInterruptEnable();  // Enable the input capture interrupt
    2664:	0e 94 40 12 	call	0x2480	; 0x2480 <TIMER1_voidICUInterruptEnable>
            }
        }

        // Reset switch state when toggled back to OFF
        if (currentSwitchState == 1 && switchState == 0)
    2668:	8b a5       	ldd	r24, Y+43	; 0x2b
    266a:	81 30       	cpi	r24, 0x01	; 1
    266c:	09 f0       	breq	.+2      	; 0x2670 <main+0x1b8>
    266e:	7a c0       	rjmp	.+244    	; 0x2764 <main+0x2ac>
    2670:	80 91 8d 01 	lds	r24, 0x018D
    2674:	88 23       	and	r24, r24
    2676:	09 f0       	breq	.+2      	; 0x267a <main+0x1c2>
    2678:	75 c0       	rjmp	.+234    	; 0x2764 <main+0x2ac>
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	a8 e4       	ldi	r26, 0x48	; 72
    2680:	b2 e4       	ldi	r27, 0x42	; 66
    2682:	89 8f       	std	Y+25, r24	; 0x19
    2684:	9a 8f       	std	Y+26, r25	; 0x1a
    2686:	ab 8f       	std	Y+27, r26	; 0x1b
    2688:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    268a:	69 8d       	ldd	r22, Y+25	; 0x19
    268c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    268e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2690:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	4a ef       	ldi	r20, 0xFA	; 250
    2698:	54 e4       	ldi	r21, 0x44	; 68
    269a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	8d 8b       	std	Y+21, r24	; 0x15
    26a4:	9e 8b       	std	Y+22, r25	; 0x16
    26a6:	af 8b       	std	Y+23, r26	; 0x17
    26a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26aa:	6d 89       	ldd	r22, Y+21	; 0x15
    26ac:	7e 89       	ldd	r23, Y+22	; 0x16
    26ae:	8f 89       	ldd	r24, Y+23	; 0x17
    26b0:	98 8d       	ldd	r25, Y+24	; 0x18
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	40 e8       	ldi	r20, 0x80	; 128
    26b8:	5f e3       	ldi	r21, 0x3F	; 63
    26ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26be:	88 23       	and	r24, r24
    26c0:	2c f4       	brge	.+10     	; 0x26cc <main+0x214>
		__ticks = 1;
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	9c 8b       	std	Y+20, r25	; 0x14
    26c8:	8b 8b       	std	Y+19, r24	; 0x13
    26ca:	3f c0       	rjmp	.+126    	; 0x274a <main+0x292>
	else if (__tmp > 65535)
    26cc:	6d 89       	ldd	r22, Y+21	; 0x15
    26ce:	7e 89       	ldd	r23, Y+22	; 0x16
    26d0:	8f 89       	ldd	r24, Y+23	; 0x17
    26d2:	98 8d       	ldd	r25, Y+24	; 0x18
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	3f ef       	ldi	r19, 0xFF	; 255
    26d8:	4f e7       	ldi	r20, 0x7F	; 127
    26da:	57 e4       	ldi	r21, 0x47	; 71
    26dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26e0:	18 16       	cp	r1, r24
    26e2:	4c f5       	brge	.+82     	; 0x2736 <main+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e4:	69 8d       	ldd	r22, Y+25	; 0x19
    26e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	40 e2       	ldi	r20, 0x20	; 32
    26f2:	51 e4       	ldi	r21, 0x41	; 65
    26f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	bc 01       	movw	r22, r24
    26fe:	cd 01       	movw	r24, r26
    2700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	9c 8b       	std	Y+20, r25	; 0x14
    270a:	8b 8b       	std	Y+19, r24	; 0x13
    270c:	0f c0       	rjmp	.+30     	; 0x272c <main+0x274>
    270e:	88 ec       	ldi	r24, 0xC8	; 200
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	9a 8b       	std	Y+18, r25	; 0x12
    2714:	89 8b       	std	Y+17, r24	; 0x11
    2716:	89 89       	ldd	r24, Y+17	; 0x11
    2718:	9a 89       	ldd	r25, Y+18	; 0x12
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	f1 f7       	brne	.-4      	; 0x271a <main+0x262>
    271e:	9a 8b       	std	Y+18, r25	; 0x12
    2720:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2722:	8b 89       	ldd	r24, Y+19	; 0x13
    2724:	9c 89       	ldd	r25, Y+20	; 0x14
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	9c 8b       	std	Y+20, r25	; 0x14
    272a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    272c:	8b 89       	ldd	r24, Y+19	; 0x13
    272e:	9c 89       	ldd	r25, Y+20	; 0x14
    2730:	00 97       	sbiw	r24, 0x00	; 0
    2732:	69 f7       	brne	.-38     	; 0x270e <main+0x256>
    2734:	14 c0       	rjmp	.+40     	; 0x275e <main+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2736:	6d 89       	ldd	r22, Y+21	; 0x15
    2738:	7e 89       	ldd	r23, Y+22	; 0x16
    273a:	8f 89       	ldd	r24, Y+23	; 0x17
    273c:	98 8d       	ldd	r25, Y+24	; 0x18
    273e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2742:	dc 01       	movw	r26, r24
    2744:	cb 01       	movw	r24, r22
    2746:	9c 8b       	std	Y+20, r25	; 0x14
    2748:	8b 8b       	std	Y+19, r24	; 0x13
    274a:	8b 89       	ldd	r24, Y+19	; 0x13
    274c:	9c 89       	ldd	r25, Y+20	; 0x14
    274e:	98 8b       	std	Y+16, r25	; 0x10
    2750:	8f 87       	std	Y+15, r24	; 0x0f
    2752:	8f 85       	ldd	r24, Y+15	; 0x0f
    2754:	98 89       	ldd	r25, Y+16	; 0x10
    2756:	01 97       	sbiw	r24, 0x01	; 1
    2758:	f1 f7       	brne	.-4      	; 0x2756 <main+0x29e>
    275a:	98 8b       	std	Y+16, r25	; 0x10
    275c:	8f 87       	std	Y+15, r24	; 0x0f
        {
            _delay_ms(50);  // Debounce delay
            switchState = 1;  // Update to allow new capture
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	80 93 8d 01 	sts	0x018D, r24
        }

		if(flag == 1)
    2764:	80 91 8c 01 	lds	r24, 0x018C
    2768:	81 30       	cpi	r24, 0x01	; 1
    276a:	09 f0       	breq	.+2      	; 0x276e <main+0x2b6>
    276c:	d7 ce       	rjmp	.-594    	; 0x251c <main+0x64>
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	aa e7       	ldi	r26, 0x7A	; 122
    2774:	b4 e4       	ldi	r27, 0x44	; 68
    2776:	8b 87       	std	Y+11, r24	; 0x0b
    2778:	9c 87       	std	Y+12, r25	; 0x0c
    277a:	ad 87       	std	Y+13, r26	; 0x0d
    277c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    277e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2780:	7c 85       	ldd	r23, Y+12	; 0x0c
    2782:	8d 85       	ldd	r24, Y+13	; 0x0d
    2784:	9e 85       	ldd	r25, Y+14	; 0x0e
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	4a ef       	ldi	r20, 0xFA	; 250
    278c:	54 e4       	ldi	r21, 0x44	; 68
    278e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	8f 83       	std	Y+7, r24	; 0x07
    2798:	98 87       	std	Y+8, r25	; 0x08
    279a:	a9 87       	std	Y+9, r26	; 0x09
    279c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    279e:	6f 81       	ldd	r22, Y+7	; 0x07
    27a0:	78 85       	ldd	r23, Y+8	; 0x08
    27a2:	89 85       	ldd	r24, Y+9	; 0x09
    27a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	40 e8       	ldi	r20, 0x80	; 128
    27ac:	5f e3       	ldi	r21, 0x3F	; 63
    27ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27b2:	88 23       	and	r24, r24
    27b4:	2c f4       	brge	.+10     	; 0x27c0 <main+0x308>
		__ticks = 1;
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	9e 83       	std	Y+6, r25	; 0x06
    27bc:	8d 83       	std	Y+5, r24	; 0x05
    27be:	3f c0       	rjmp	.+126    	; 0x283e <main+0x386>
	else if (__tmp > 65535)
    27c0:	6f 81       	ldd	r22, Y+7	; 0x07
    27c2:	78 85       	ldd	r23, Y+8	; 0x08
    27c4:	89 85       	ldd	r24, Y+9	; 0x09
    27c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	3f ef       	ldi	r19, 0xFF	; 255
    27cc:	4f e7       	ldi	r20, 0x7F	; 127
    27ce:	57 e4       	ldi	r21, 0x47	; 71
    27d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27d4:	18 16       	cp	r1, r24
    27d6:	4c f5       	brge	.+82     	; 0x282a <main+0x372>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    27da:	7c 85       	ldd	r23, Y+12	; 0x0c
    27dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    27de:	9e 85       	ldd	r25, Y+14	; 0x0e
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	40 e2       	ldi	r20, 0x20	; 32
    27e6:	51 e4       	ldi	r21, 0x41	; 65
    27e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	bc 01       	movw	r22, r24
    27f2:	cd 01       	movw	r24, r26
    27f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	9e 83       	std	Y+6, r25	; 0x06
    27fe:	8d 83       	std	Y+5, r24	; 0x05
    2800:	0f c0       	rjmp	.+30     	; 0x2820 <main+0x368>
    2802:	88 ec       	ldi	r24, 0xC8	; 200
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	9c 83       	std	Y+4, r25	; 0x04
    2808:	8b 83       	std	Y+3, r24	; 0x03
    280a:	8b 81       	ldd	r24, Y+3	; 0x03
    280c:	9c 81       	ldd	r25, Y+4	; 0x04
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	f1 f7       	brne	.-4      	; 0x280e <main+0x356>
    2812:	9c 83       	std	Y+4, r25	; 0x04
    2814:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2816:	8d 81       	ldd	r24, Y+5	; 0x05
    2818:	9e 81       	ldd	r25, Y+6	; 0x06
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	9e 83       	std	Y+6, r25	; 0x06
    281e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2820:	8d 81       	ldd	r24, Y+5	; 0x05
    2822:	9e 81       	ldd	r25, Y+6	; 0x06
    2824:	00 97       	sbiw	r24, 0x00	; 0
    2826:	69 f7       	brne	.-38     	; 0x2802 <main+0x34a>
    2828:	14 c0       	rjmp	.+40     	; 0x2852 <main+0x39a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    282a:	6f 81       	ldd	r22, Y+7	; 0x07
    282c:	78 85       	ldd	r23, Y+8	; 0x08
    282e:	89 85       	ldd	r24, Y+9	; 0x09
    2830:	9a 85       	ldd	r25, Y+10	; 0x0a
    2832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	9e 83       	std	Y+6, r25	; 0x06
    283c:	8d 83       	std	Y+5, r24	; 0x05
    283e:	8d 81       	ldd	r24, Y+5	; 0x05
    2840:	9e 81       	ldd	r25, Y+6	; 0x06
    2842:	9a 83       	std	Y+2, r25	; 0x02
    2844:	89 83       	std	Y+1, r24	; 0x01
    2846:	89 81       	ldd	r24, Y+1	; 0x01
    2848:	9a 81       	ldd	r25, Y+2	; 0x02
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	f1 f7       	brne	.-4      	; 0x284a <main+0x392>
    284e:	9a 83       	std	Y+2, r25	; 0x02
    2850:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(1000);
			CLCD_voidSetXYPosition(0,0);
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	60 e0       	ldi	r22, 0x00	; 0
    2856:	0e 94 cc 08 	call	0x1198	; 0x1198 <CLCD_voidSetXYPosition>
			CLCD_voidSendString("Total Time:");
    285a:	88 e6       	ldi	r24, 0x68	; 104
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	0e 94 2d 08 	call	0x105a	; 0x105a <CLCD_voidSendString>
			CLCD_voidSendInteger(total_time);
    2862:	8e a5       	ldd	r24, Y+46	; 0x2e
    2864:	9f a5       	ldd	r25, Y+47	; 0x2f
    2866:	cc 01       	movw	r24, r24
    2868:	a0 e0       	ldi	r26, 0x00	; 0
    286a:	b0 e0       	ldi	r27, 0x00	; 0
    286c:	bc 01       	movw	r22, r24
    286e:	cd 01       	movw	r24, r26
    2870:	0e 94 56 08 	call	0x10ac	; 0x10ac <CLCD_voidSendInteger>

			CLCD_voidSetXYPosition(0,1);
    2874:	80 e0       	ldi	r24, 0x00	; 0
    2876:	61 e0       	ldi	r22, 0x01	; 1
    2878:	0e 94 cc 08 	call	0x1198	; 0x1198 <CLCD_voidSetXYPosition>
			CLCD_voidSendString("On Time:");
    287c:	84 e7       	ldi	r24, 0x74	; 116
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	0e 94 2d 08 	call	0x105a	; 0x105a <CLCD_voidSendString>
			CLCD_voidSendInteger(on_time);
    2884:	8c a5       	ldd	r24, Y+44	; 0x2c
    2886:	9d a5       	ldd	r25, Y+45	; 0x2d
    2888:	cc 01       	movw	r24, r24
    288a:	a0 e0       	ldi	r26, 0x00	; 0
    288c:	b0 e0       	ldi	r27, 0x00	; 0
    288e:	bc 01       	movw	r22, r24
    2890:	cd 01       	movw	r24, r26
    2892:	0e 94 56 08 	call	0x10ac	; 0x10ac <CLCD_voidSendInteger>

			flag=0;
    2896:	10 92 8c 01 	sts	0x018C, r1
    289a:	40 ce       	rjmp	.-896    	; 0x251c <main+0x64>

0000289c <CapturedValues>:
		}
	}
}

void CapturedValues(void)
{
    289c:	df 93       	push	r29
    289e:	cf 93       	push	r28
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
	static u8 Edge_count=0;

	if (Edge_count == 1)
    28a4:	80 91 8e 01 	lds	r24, 0x018E
    28a8:	81 30       	cpi	r24, 0x01	; 1
    28aa:	69 f4       	brne	.+26     	; 0x28c6 <CapturedValues+0x2a>
	{
		Rising_Edge1_Time = TIMER1_u16ReadCaptureValue();
    28ac:	0e 94 0d 12 	call	0x241a	; 0x241a <TIMER1_u16ReadCaptureValue>
    28b0:	90 93 87 01 	sts	0x0187, r25
    28b4:	80 93 86 01 	sts	0x0186, r24
		TIMER1_voidSetICUEdgeTrigre(0);
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	0e 94 21 12 	call	0x2442	; 0x2442 <TIMER1_voidSetICUEdgeTrigre>
		Edge_count=2;
    28be:	82 e0       	ldi	r24, 0x02	; 2
    28c0:	80 93 8e 01 	sts	0x018E, r24
    28c4:	22 c0       	rjmp	.+68     	; 0x290a <CapturedValues+0x6e>
	}
	else if (Edge_count == 2)
    28c6:	80 91 8e 01 	lds	r24, 0x018E
    28ca:	82 30       	cpi	r24, 0x02	; 2
    28cc:	69 f4       	brne	.+26     	; 0x28e8 <CapturedValues+0x4c>
	{
		Falling_Edge_Time = TIMER1_u16ReadCaptureValue();
    28ce:	0e 94 0d 12 	call	0x241a	; 0x241a <TIMER1_u16ReadCaptureValue>
    28d2:	90 93 8b 01 	sts	0x018B, r25
    28d6:	80 93 8a 01 	sts	0x018A, r24
		TIMER1_voidSetICUEdgeTrigre(1);
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	0e 94 21 12 	call	0x2442	; 0x2442 <TIMER1_voidSetICUEdgeTrigre>
		Edge_count=3;
    28e0:	83 e0       	ldi	r24, 0x03	; 3
    28e2:	80 93 8e 01 	sts	0x018E, r24
    28e6:	11 c0       	rjmp	.+34     	; 0x290a <CapturedValues+0x6e>
	}

	else if(Edge_count == 3)
    28e8:	80 91 8e 01 	lds	r24, 0x018E
    28ec:	83 30       	cpi	r24, 0x03	; 3
    28ee:	69 f4       	brne	.+26     	; 0x290a <CapturedValues+0x6e>
	{
		Rising_Edge2_Time = TIMER1_u16ReadCaptureValue();
    28f0:	0e 94 0d 12 	call	0x241a	; 0x241a <TIMER1_u16ReadCaptureValue>
    28f4:	90 93 89 01 	sts	0x0189, r25
    28f8:	80 93 88 01 	sts	0x0188, r24
		Edge_count=0;
    28fc:	10 92 8e 01 	sts	0x018E, r1
		TIMER1_voidICUInterruptDisable();
    2900:	0e 94 4e 12 	call	0x249c	; 0x249c <TIMER1_voidICUInterruptDisable>
		flag=1;
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	80 93 8c 01 	sts	0x018C, r24
	}
}
    290a:	cf 91       	pop	r28
    290c:	df 91       	pop	r29
    290e:	08 95       	ret

00002910 <__udivmodsi4>:
    2910:	a1 e2       	ldi	r26, 0x21	; 33
    2912:	1a 2e       	mov	r1, r26
    2914:	aa 1b       	sub	r26, r26
    2916:	bb 1b       	sub	r27, r27
    2918:	fd 01       	movw	r30, r26
    291a:	0d c0       	rjmp	.+26     	; 0x2936 <__udivmodsi4_ep>

0000291c <__udivmodsi4_loop>:
    291c:	aa 1f       	adc	r26, r26
    291e:	bb 1f       	adc	r27, r27
    2920:	ee 1f       	adc	r30, r30
    2922:	ff 1f       	adc	r31, r31
    2924:	a2 17       	cp	r26, r18
    2926:	b3 07       	cpc	r27, r19
    2928:	e4 07       	cpc	r30, r20
    292a:	f5 07       	cpc	r31, r21
    292c:	20 f0       	brcs	.+8      	; 0x2936 <__udivmodsi4_ep>
    292e:	a2 1b       	sub	r26, r18
    2930:	b3 0b       	sbc	r27, r19
    2932:	e4 0b       	sbc	r30, r20
    2934:	f5 0b       	sbc	r31, r21

00002936 <__udivmodsi4_ep>:
    2936:	66 1f       	adc	r22, r22
    2938:	77 1f       	adc	r23, r23
    293a:	88 1f       	adc	r24, r24
    293c:	99 1f       	adc	r25, r25
    293e:	1a 94       	dec	r1
    2940:	69 f7       	brne	.-38     	; 0x291c <__udivmodsi4_loop>
    2942:	60 95       	com	r22
    2944:	70 95       	com	r23
    2946:	80 95       	com	r24
    2948:	90 95       	com	r25
    294a:	9b 01       	movw	r18, r22
    294c:	ac 01       	movw	r20, r24
    294e:	bd 01       	movw	r22, r26
    2950:	cf 01       	movw	r24, r30
    2952:	08 95       	ret

00002954 <__prologue_saves__>:
    2954:	2f 92       	push	r2
    2956:	3f 92       	push	r3
    2958:	4f 92       	push	r4
    295a:	5f 92       	push	r5
    295c:	6f 92       	push	r6
    295e:	7f 92       	push	r7
    2960:	8f 92       	push	r8
    2962:	9f 92       	push	r9
    2964:	af 92       	push	r10
    2966:	bf 92       	push	r11
    2968:	cf 92       	push	r12
    296a:	df 92       	push	r13
    296c:	ef 92       	push	r14
    296e:	ff 92       	push	r15
    2970:	0f 93       	push	r16
    2972:	1f 93       	push	r17
    2974:	cf 93       	push	r28
    2976:	df 93       	push	r29
    2978:	cd b7       	in	r28, 0x3d	; 61
    297a:	de b7       	in	r29, 0x3e	; 62
    297c:	ca 1b       	sub	r28, r26
    297e:	db 0b       	sbc	r29, r27
    2980:	0f b6       	in	r0, 0x3f	; 63
    2982:	f8 94       	cli
    2984:	de bf       	out	0x3e, r29	; 62
    2986:	0f be       	out	0x3f, r0	; 63
    2988:	cd bf       	out	0x3d, r28	; 61
    298a:	09 94       	ijmp

0000298c <__epilogue_restores__>:
    298c:	2a 88       	ldd	r2, Y+18	; 0x12
    298e:	39 88       	ldd	r3, Y+17	; 0x11
    2990:	48 88       	ldd	r4, Y+16	; 0x10
    2992:	5f 84       	ldd	r5, Y+15	; 0x0f
    2994:	6e 84       	ldd	r6, Y+14	; 0x0e
    2996:	7d 84       	ldd	r7, Y+13	; 0x0d
    2998:	8c 84       	ldd	r8, Y+12	; 0x0c
    299a:	9b 84       	ldd	r9, Y+11	; 0x0b
    299c:	aa 84       	ldd	r10, Y+10	; 0x0a
    299e:	b9 84       	ldd	r11, Y+9	; 0x09
    29a0:	c8 84       	ldd	r12, Y+8	; 0x08
    29a2:	df 80       	ldd	r13, Y+7	; 0x07
    29a4:	ee 80       	ldd	r14, Y+6	; 0x06
    29a6:	fd 80       	ldd	r15, Y+5	; 0x05
    29a8:	0c 81       	ldd	r16, Y+4	; 0x04
    29aa:	1b 81       	ldd	r17, Y+3	; 0x03
    29ac:	aa 81       	ldd	r26, Y+2	; 0x02
    29ae:	b9 81       	ldd	r27, Y+1	; 0x01
    29b0:	ce 0f       	add	r28, r30
    29b2:	d1 1d       	adc	r29, r1
    29b4:	0f b6       	in	r0, 0x3f	; 63
    29b6:	f8 94       	cli
    29b8:	de bf       	out	0x3e, r29	; 62
    29ba:	0f be       	out	0x3f, r0	; 63
    29bc:	cd bf       	out	0x3d, r28	; 61
    29be:	ed 01       	movw	r28, r26
    29c0:	08 95       	ret

000029c2 <sprintf>:
    29c2:	ae e0       	ldi	r26, 0x0E	; 14
    29c4:	b0 e0       	ldi	r27, 0x00	; 0
    29c6:	e7 ee       	ldi	r30, 0xE7	; 231
    29c8:	f4 e1       	ldi	r31, 0x14	; 20
    29ca:	0c 94 b8 14 	jmp	0x2970	; 0x2970 <__prologue_saves__+0x1c>
    29ce:	0d 89       	ldd	r16, Y+21	; 0x15
    29d0:	1e 89       	ldd	r17, Y+22	; 0x16
    29d2:	86 e0       	ldi	r24, 0x06	; 6
    29d4:	8c 83       	std	Y+4, r24	; 0x04
    29d6:	1a 83       	std	Y+2, r17	; 0x02
    29d8:	09 83       	std	Y+1, r16	; 0x01
    29da:	8f ef       	ldi	r24, 0xFF	; 255
    29dc:	9f e7       	ldi	r25, 0x7F	; 127
    29de:	9e 83       	std	Y+6, r25	; 0x06
    29e0:	8d 83       	std	Y+5, r24	; 0x05
    29e2:	9e 01       	movw	r18, r28
    29e4:	27 5e       	subi	r18, 0xE7	; 231
    29e6:	3f 4f       	sbci	r19, 0xFF	; 255
    29e8:	ce 01       	movw	r24, r28
    29ea:	01 96       	adiw	r24, 0x01	; 1
    29ec:	6f 89       	ldd	r22, Y+23	; 0x17
    29ee:	78 8d       	ldd	r23, Y+24	; 0x18
    29f0:	a9 01       	movw	r20, r18
    29f2:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <vfprintf>
    29f6:	2f 81       	ldd	r18, Y+7	; 0x07
    29f8:	38 85       	ldd	r19, Y+8	; 0x08
    29fa:	02 0f       	add	r16, r18
    29fc:	13 1f       	adc	r17, r19
    29fe:	f8 01       	movw	r30, r16
    2a00:	10 82       	st	Z, r1
    2a02:	2e 96       	adiw	r28, 0x0e	; 14
    2a04:	e4 e0       	ldi	r30, 0x04	; 4
    2a06:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__epilogue_restores__+0x1c>

00002a0a <vfprintf>:
    2a0a:	ab e0       	ldi	r26, 0x0B	; 11
    2a0c:	b0 e0       	ldi	r27, 0x00	; 0
    2a0e:	eb e0       	ldi	r30, 0x0B	; 11
    2a10:	f5 e1       	ldi	r31, 0x15	; 21
    2a12:	0c 94 aa 14 	jmp	0x2954	; 0x2954 <__prologue_saves__>
    2a16:	3c 01       	movw	r6, r24
    2a18:	2b 01       	movw	r4, r22
    2a1a:	5a 01       	movw	r10, r20
    2a1c:	fc 01       	movw	r30, r24
    2a1e:	17 82       	std	Z+7, r1	; 0x07
    2a20:	16 82       	std	Z+6, r1	; 0x06
    2a22:	83 81       	ldd	r24, Z+3	; 0x03
    2a24:	81 fd       	sbrc	r24, 1
    2a26:	03 c0       	rjmp	.+6      	; 0x2a2e <vfprintf+0x24>
    2a28:	6f ef       	ldi	r22, 0xFF	; 255
    2a2a:	7f ef       	ldi	r23, 0xFF	; 255
    2a2c:	c6 c1       	rjmp	.+908    	; 0x2dba <vfprintf+0x3b0>
    2a2e:	9a e0       	ldi	r25, 0x0A	; 10
    2a30:	89 2e       	mov	r8, r25
    2a32:	1e 01       	movw	r2, r28
    2a34:	08 94       	sec
    2a36:	21 1c       	adc	r2, r1
    2a38:	31 1c       	adc	r3, r1
    2a3a:	f3 01       	movw	r30, r6
    2a3c:	23 81       	ldd	r18, Z+3	; 0x03
    2a3e:	f2 01       	movw	r30, r4
    2a40:	23 fd       	sbrc	r18, 3
    2a42:	85 91       	lpm	r24, Z+
    2a44:	23 ff       	sbrs	r18, 3
    2a46:	81 91       	ld	r24, Z+
    2a48:	2f 01       	movw	r4, r30
    2a4a:	88 23       	and	r24, r24
    2a4c:	09 f4       	brne	.+2      	; 0x2a50 <vfprintf+0x46>
    2a4e:	b2 c1       	rjmp	.+868    	; 0x2db4 <vfprintf+0x3aa>
    2a50:	85 32       	cpi	r24, 0x25	; 37
    2a52:	39 f4       	brne	.+14     	; 0x2a62 <vfprintf+0x58>
    2a54:	23 fd       	sbrc	r18, 3
    2a56:	85 91       	lpm	r24, Z+
    2a58:	23 ff       	sbrs	r18, 3
    2a5a:	81 91       	ld	r24, Z+
    2a5c:	2f 01       	movw	r4, r30
    2a5e:	85 32       	cpi	r24, 0x25	; 37
    2a60:	29 f4       	brne	.+10     	; 0x2a6c <vfprintf+0x62>
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	b3 01       	movw	r22, r6
    2a66:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <fputc>
    2a6a:	e7 cf       	rjmp	.-50     	; 0x2a3a <vfprintf+0x30>
    2a6c:	98 2f       	mov	r25, r24
    2a6e:	ff 24       	eor	r15, r15
    2a70:	ee 24       	eor	r14, r14
    2a72:	99 24       	eor	r9, r9
    2a74:	ff e1       	ldi	r31, 0x1F	; 31
    2a76:	ff 15       	cp	r31, r15
    2a78:	d0 f0       	brcs	.+52     	; 0x2aae <vfprintf+0xa4>
    2a7a:	9b 32       	cpi	r25, 0x2B	; 43
    2a7c:	69 f0       	breq	.+26     	; 0x2a98 <vfprintf+0x8e>
    2a7e:	9c 32       	cpi	r25, 0x2C	; 44
    2a80:	28 f4       	brcc	.+10     	; 0x2a8c <vfprintf+0x82>
    2a82:	90 32       	cpi	r25, 0x20	; 32
    2a84:	59 f0       	breq	.+22     	; 0x2a9c <vfprintf+0x92>
    2a86:	93 32       	cpi	r25, 0x23	; 35
    2a88:	91 f4       	brne	.+36     	; 0x2aae <vfprintf+0xa4>
    2a8a:	0e c0       	rjmp	.+28     	; 0x2aa8 <vfprintf+0x9e>
    2a8c:	9d 32       	cpi	r25, 0x2D	; 45
    2a8e:	49 f0       	breq	.+18     	; 0x2aa2 <vfprintf+0x98>
    2a90:	90 33       	cpi	r25, 0x30	; 48
    2a92:	69 f4       	brne	.+26     	; 0x2aae <vfprintf+0xa4>
    2a94:	41 e0       	ldi	r20, 0x01	; 1
    2a96:	24 c0       	rjmp	.+72     	; 0x2ae0 <vfprintf+0xd6>
    2a98:	52 e0       	ldi	r21, 0x02	; 2
    2a9a:	f5 2a       	or	r15, r21
    2a9c:	84 e0       	ldi	r24, 0x04	; 4
    2a9e:	f8 2a       	or	r15, r24
    2aa0:	28 c0       	rjmp	.+80     	; 0x2af2 <vfprintf+0xe8>
    2aa2:	98 e0       	ldi	r25, 0x08	; 8
    2aa4:	f9 2a       	or	r15, r25
    2aa6:	25 c0       	rjmp	.+74     	; 0x2af2 <vfprintf+0xe8>
    2aa8:	e0 e1       	ldi	r30, 0x10	; 16
    2aaa:	fe 2a       	or	r15, r30
    2aac:	22 c0       	rjmp	.+68     	; 0x2af2 <vfprintf+0xe8>
    2aae:	f7 fc       	sbrc	r15, 7
    2ab0:	29 c0       	rjmp	.+82     	; 0x2b04 <vfprintf+0xfa>
    2ab2:	89 2f       	mov	r24, r25
    2ab4:	80 53       	subi	r24, 0x30	; 48
    2ab6:	8a 30       	cpi	r24, 0x0A	; 10
    2ab8:	70 f4       	brcc	.+28     	; 0x2ad6 <vfprintf+0xcc>
    2aba:	f6 fe       	sbrs	r15, 6
    2abc:	05 c0       	rjmp	.+10     	; 0x2ac8 <vfprintf+0xbe>
    2abe:	98 9c       	mul	r9, r8
    2ac0:	90 2c       	mov	r9, r0
    2ac2:	11 24       	eor	r1, r1
    2ac4:	98 0e       	add	r9, r24
    2ac6:	15 c0       	rjmp	.+42     	; 0x2af2 <vfprintf+0xe8>
    2ac8:	e8 9c       	mul	r14, r8
    2aca:	e0 2c       	mov	r14, r0
    2acc:	11 24       	eor	r1, r1
    2ace:	e8 0e       	add	r14, r24
    2ad0:	f0 e2       	ldi	r31, 0x20	; 32
    2ad2:	ff 2a       	or	r15, r31
    2ad4:	0e c0       	rjmp	.+28     	; 0x2af2 <vfprintf+0xe8>
    2ad6:	9e 32       	cpi	r25, 0x2E	; 46
    2ad8:	29 f4       	brne	.+10     	; 0x2ae4 <vfprintf+0xda>
    2ada:	f6 fc       	sbrc	r15, 6
    2adc:	6b c1       	rjmp	.+726    	; 0x2db4 <vfprintf+0x3aa>
    2ade:	40 e4       	ldi	r20, 0x40	; 64
    2ae0:	f4 2a       	or	r15, r20
    2ae2:	07 c0       	rjmp	.+14     	; 0x2af2 <vfprintf+0xe8>
    2ae4:	9c 36       	cpi	r25, 0x6C	; 108
    2ae6:	19 f4       	brne	.+6      	; 0x2aee <vfprintf+0xe4>
    2ae8:	50 e8       	ldi	r21, 0x80	; 128
    2aea:	f5 2a       	or	r15, r21
    2aec:	02 c0       	rjmp	.+4      	; 0x2af2 <vfprintf+0xe8>
    2aee:	98 36       	cpi	r25, 0x68	; 104
    2af0:	49 f4       	brne	.+18     	; 0x2b04 <vfprintf+0xfa>
    2af2:	f2 01       	movw	r30, r4
    2af4:	23 fd       	sbrc	r18, 3
    2af6:	95 91       	lpm	r25, Z+
    2af8:	23 ff       	sbrs	r18, 3
    2afa:	91 91       	ld	r25, Z+
    2afc:	2f 01       	movw	r4, r30
    2afe:	99 23       	and	r25, r25
    2b00:	09 f0       	breq	.+2      	; 0x2b04 <vfprintf+0xfa>
    2b02:	b8 cf       	rjmp	.-144    	; 0x2a74 <vfprintf+0x6a>
    2b04:	89 2f       	mov	r24, r25
    2b06:	85 54       	subi	r24, 0x45	; 69
    2b08:	83 30       	cpi	r24, 0x03	; 3
    2b0a:	18 f0       	brcs	.+6      	; 0x2b12 <vfprintf+0x108>
    2b0c:	80 52       	subi	r24, 0x20	; 32
    2b0e:	83 30       	cpi	r24, 0x03	; 3
    2b10:	38 f4       	brcc	.+14     	; 0x2b20 <vfprintf+0x116>
    2b12:	44 e0       	ldi	r20, 0x04	; 4
    2b14:	50 e0       	ldi	r21, 0x00	; 0
    2b16:	a4 0e       	add	r10, r20
    2b18:	b5 1e       	adc	r11, r21
    2b1a:	5f e3       	ldi	r21, 0x3F	; 63
    2b1c:	59 83       	std	Y+1, r21	; 0x01
    2b1e:	0f c0       	rjmp	.+30     	; 0x2b3e <vfprintf+0x134>
    2b20:	93 36       	cpi	r25, 0x63	; 99
    2b22:	31 f0       	breq	.+12     	; 0x2b30 <vfprintf+0x126>
    2b24:	93 37       	cpi	r25, 0x73	; 115
    2b26:	79 f0       	breq	.+30     	; 0x2b46 <vfprintf+0x13c>
    2b28:	93 35       	cpi	r25, 0x53	; 83
    2b2a:	09 f0       	breq	.+2      	; 0x2b2e <vfprintf+0x124>
    2b2c:	56 c0       	rjmp	.+172    	; 0x2bda <vfprintf+0x1d0>
    2b2e:	20 c0       	rjmp	.+64     	; 0x2b70 <vfprintf+0x166>
    2b30:	f5 01       	movw	r30, r10
    2b32:	80 81       	ld	r24, Z
    2b34:	89 83       	std	Y+1, r24	; 0x01
    2b36:	42 e0       	ldi	r20, 0x02	; 2
    2b38:	50 e0       	ldi	r21, 0x00	; 0
    2b3a:	a4 0e       	add	r10, r20
    2b3c:	b5 1e       	adc	r11, r21
    2b3e:	61 01       	movw	r12, r2
    2b40:	01 e0       	ldi	r16, 0x01	; 1
    2b42:	10 e0       	ldi	r17, 0x00	; 0
    2b44:	12 c0       	rjmp	.+36     	; 0x2b6a <vfprintf+0x160>
    2b46:	f5 01       	movw	r30, r10
    2b48:	c0 80       	ld	r12, Z
    2b4a:	d1 80       	ldd	r13, Z+1	; 0x01
    2b4c:	f6 fc       	sbrc	r15, 6
    2b4e:	03 c0       	rjmp	.+6      	; 0x2b56 <vfprintf+0x14c>
    2b50:	6f ef       	ldi	r22, 0xFF	; 255
    2b52:	7f ef       	ldi	r23, 0xFF	; 255
    2b54:	02 c0       	rjmp	.+4      	; 0x2b5a <vfprintf+0x150>
    2b56:	69 2d       	mov	r22, r9
    2b58:	70 e0       	ldi	r23, 0x00	; 0
    2b5a:	42 e0       	ldi	r20, 0x02	; 2
    2b5c:	50 e0       	ldi	r21, 0x00	; 0
    2b5e:	a4 0e       	add	r10, r20
    2b60:	b5 1e       	adc	r11, r21
    2b62:	c6 01       	movw	r24, r12
    2b64:	0e 94 ed 16 	call	0x2dda	; 0x2dda <strnlen>
    2b68:	8c 01       	movw	r16, r24
    2b6a:	5f e7       	ldi	r21, 0x7F	; 127
    2b6c:	f5 22       	and	r15, r21
    2b6e:	14 c0       	rjmp	.+40     	; 0x2b98 <vfprintf+0x18e>
    2b70:	f5 01       	movw	r30, r10
    2b72:	c0 80       	ld	r12, Z
    2b74:	d1 80       	ldd	r13, Z+1	; 0x01
    2b76:	f6 fc       	sbrc	r15, 6
    2b78:	03 c0       	rjmp	.+6      	; 0x2b80 <vfprintf+0x176>
    2b7a:	6f ef       	ldi	r22, 0xFF	; 255
    2b7c:	7f ef       	ldi	r23, 0xFF	; 255
    2b7e:	02 c0       	rjmp	.+4      	; 0x2b84 <vfprintf+0x17a>
    2b80:	69 2d       	mov	r22, r9
    2b82:	70 e0       	ldi	r23, 0x00	; 0
    2b84:	42 e0       	ldi	r20, 0x02	; 2
    2b86:	50 e0       	ldi	r21, 0x00	; 0
    2b88:	a4 0e       	add	r10, r20
    2b8a:	b5 1e       	adc	r11, r21
    2b8c:	c6 01       	movw	r24, r12
    2b8e:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <strnlen_P>
    2b92:	8c 01       	movw	r16, r24
    2b94:	50 e8       	ldi	r21, 0x80	; 128
    2b96:	f5 2a       	or	r15, r21
    2b98:	f3 fe       	sbrs	r15, 3
    2b9a:	07 c0       	rjmp	.+14     	; 0x2baa <vfprintf+0x1a0>
    2b9c:	1a c0       	rjmp	.+52     	; 0x2bd2 <vfprintf+0x1c8>
    2b9e:	80 e2       	ldi	r24, 0x20	; 32
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	b3 01       	movw	r22, r6
    2ba4:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <fputc>
    2ba8:	ea 94       	dec	r14
    2baa:	8e 2d       	mov	r24, r14
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	08 17       	cp	r16, r24
    2bb0:	19 07       	cpc	r17, r25
    2bb2:	a8 f3       	brcs	.-22     	; 0x2b9e <vfprintf+0x194>
    2bb4:	0e c0       	rjmp	.+28     	; 0x2bd2 <vfprintf+0x1c8>
    2bb6:	f6 01       	movw	r30, r12
    2bb8:	f7 fc       	sbrc	r15, 7
    2bba:	85 91       	lpm	r24, Z+
    2bbc:	f7 fe       	sbrs	r15, 7
    2bbe:	81 91       	ld	r24, Z+
    2bc0:	6f 01       	movw	r12, r30
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	b3 01       	movw	r22, r6
    2bc6:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <fputc>
    2bca:	e1 10       	cpse	r14, r1
    2bcc:	ea 94       	dec	r14
    2bce:	01 50       	subi	r16, 0x01	; 1
    2bd0:	10 40       	sbci	r17, 0x00	; 0
    2bd2:	01 15       	cp	r16, r1
    2bd4:	11 05       	cpc	r17, r1
    2bd6:	79 f7       	brne	.-34     	; 0x2bb6 <vfprintf+0x1ac>
    2bd8:	ea c0       	rjmp	.+468    	; 0x2dae <vfprintf+0x3a4>
    2bda:	94 36       	cpi	r25, 0x64	; 100
    2bdc:	11 f0       	breq	.+4      	; 0x2be2 <vfprintf+0x1d8>
    2bde:	99 36       	cpi	r25, 0x69	; 105
    2be0:	69 f5       	brne	.+90     	; 0x2c3c <vfprintf+0x232>
    2be2:	f7 fe       	sbrs	r15, 7
    2be4:	08 c0       	rjmp	.+16     	; 0x2bf6 <vfprintf+0x1ec>
    2be6:	f5 01       	movw	r30, r10
    2be8:	20 81       	ld	r18, Z
    2bea:	31 81       	ldd	r19, Z+1	; 0x01
    2bec:	42 81       	ldd	r20, Z+2	; 0x02
    2bee:	53 81       	ldd	r21, Z+3	; 0x03
    2bf0:	84 e0       	ldi	r24, 0x04	; 4
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	0a c0       	rjmp	.+20     	; 0x2c0a <vfprintf+0x200>
    2bf6:	f5 01       	movw	r30, r10
    2bf8:	80 81       	ld	r24, Z
    2bfa:	91 81       	ldd	r25, Z+1	; 0x01
    2bfc:	9c 01       	movw	r18, r24
    2bfe:	44 27       	eor	r20, r20
    2c00:	37 fd       	sbrc	r19, 7
    2c02:	40 95       	com	r20
    2c04:	54 2f       	mov	r21, r20
    2c06:	82 e0       	ldi	r24, 0x02	; 2
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	a8 0e       	add	r10, r24
    2c0c:	b9 1e       	adc	r11, r25
    2c0e:	9f e6       	ldi	r25, 0x6F	; 111
    2c10:	f9 22       	and	r15, r25
    2c12:	57 ff       	sbrs	r21, 7
    2c14:	09 c0       	rjmp	.+18     	; 0x2c28 <vfprintf+0x21e>
    2c16:	50 95       	com	r21
    2c18:	40 95       	com	r20
    2c1a:	30 95       	com	r19
    2c1c:	21 95       	neg	r18
    2c1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c20:	4f 4f       	sbci	r20, 0xFF	; 255
    2c22:	5f 4f       	sbci	r21, 0xFF	; 255
    2c24:	e0 e8       	ldi	r30, 0x80	; 128
    2c26:	fe 2a       	or	r15, r30
    2c28:	ca 01       	movw	r24, r20
    2c2a:	b9 01       	movw	r22, r18
    2c2c:	a1 01       	movw	r20, r2
    2c2e:	2a e0       	ldi	r18, 0x0A	; 10
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	0e 94 24 17 	call	0x2e48	; 0x2e48 <__ultoa_invert>
    2c36:	d8 2e       	mov	r13, r24
    2c38:	d2 18       	sub	r13, r2
    2c3a:	40 c0       	rjmp	.+128    	; 0x2cbc <vfprintf+0x2b2>
    2c3c:	95 37       	cpi	r25, 0x75	; 117
    2c3e:	29 f4       	brne	.+10     	; 0x2c4a <vfprintf+0x240>
    2c40:	1f 2d       	mov	r17, r15
    2c42:	1f 7e       	andi	r17, 0xEF	; 239
    2c44:	2a e0       	ldi	r18, 0x0A	; 10
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	1d c0       	rjmp	.+58     	; 0x2c84 <vfprintf+0x27a>
    2c4a:	1f 2d       	mov	r17, r15
    2c4c:	19 7f       	andi	r17, 0xF9	; 249
    2c4e:	9f 36       	cpi	r25, 0x6F	; 111
    2c50:	61 f0       	breq	.+24     	; 0x2c6a <vfprintf+0x260>
    2c52:	90 37       	cpi	r25, 0x70	; 112
    2c54:	20 f4       	brcc	.+8      	; 0x2c5e <vfprintf+0x254>
    2c56:	98 35       	cpi	r25, 0x58	; 88
    2c58:	09 f0       	breq	.+2      	; 0x2c5c <vfprintf+0x252>
    2c5a:	ac c0       	rjmp	.+344    	; 0x2db4 <vfprintf+0x3aa>
    2c5c:	0f c0       	rjmp	.+30     	; 0x2c7c <vfprintf+0x272>
    2c5e:	90 37       	cpi	r25, 0x70	; 112
    2c60:	39 f0       	breq	.+14     	; 0x2c70 <vfprintf+0x266>
    2c62:	98 37       	cpi	r25, 0x78	; 120
    2c64:	09 f0       	breq	.+2      	; 0x2c68 <vfprintf+0x25e>
    2c66:	a6 c0       	rjmp	.+332    	; 0x2db4 <vfprintf+0x3aa>
    2c68:	04 c0       	rjmp	.+8      	; 0x2c72 <vfprintf+0x268>
    2c6a:	28 e0       	ldi	r18, 0x08	; 8
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	0a c0       	rjmp	.+20     	; 0x2c84 <vfprintf+0x27a>
    2c70:	10 61       	ori	r17, 0x10	; 16
    2c72:	14 fd       	sbrc	r17, 4
    2c74:	14 60       	ori	r17, 0x04	; 4
    2c76:	20 e1       	ldi	r18, 0x10	; 16
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	04 c0       	rjmp	.+8      	; 0x2c84 <vfprintf+0x27a>
    2c7c:	14 fd       	sbrc	r17, 4
    2c7e:	16 60       	ori	r17, 0x06	; 6
    2c80:	20 e1       	ldi	r18, 0x10	; 16
    2c82:	32 e0       	ldi	r19, 0x02	; 2
    2c84:	17 ff       	sbrs	r17, 7
    2c86:	08 c0       	rjmp	.+16     	; 0x2c98 <vfprintf+0x28e>
    2c88:	f5 01       	movw	r30, r10
    2c8a:	60 81       	ld	r22, Z
    2c8c:	71 81       	ldd	r23, Z+1	; 0x01
    2c8e:	82 81       	ldd	r24, Z+2	; 0x02
    2c90:	93 81       	ldd	r25, Z+3	; 0x03
    2c92:	44 e0       	ldi	r20, 0x04	; 4
    2c94:	50 e0       	ldi	r21, 0x00	; 0
    2c96:	08 c0       	rjmp	.+16     	; 0x2ca8 <vfprintf+0x29e>
    2c98:	f5 01       	movw	r30, r10
    2c9a:	80 81       	ld	r24, Z
    2c9c:	91 81       	ldd	r25, Z+1	; 0x01
    2c9e:	bc 01       	movw	r22, r24
    2ca0:	80 e0       	ldi	r24, 0x00	; 0
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	42 e0       	ldi	r20, 0x02	; 2
    2ca6:	50 e0       	ldi	r21, 0x00	; 0
    2ca8:	a4 0e       	add	r10, r20
    2caa:	b5 1e       	adc	r11, r21
    2cac:	a1 01       	movw	r20, r2
    2cae:	0e 94 24 17 	call	0x2e48	; 0x2e48 <__ultoa_invert>
    2cb2:	d8 2e       	mov	r13, r24
    2cb4:	d2 18       	sub	r13, r2
    2cb6:	8f e7       	ldi	r24, 0x7F	; 127
    2cb8:	f8 2e       	mov	r15, r24
    2cba:	f1 22       	and	r15, r17
    2cbc:	f6 fe       	sbrs	r15, 6
    2cbe:	0b c0       	rjmp	.+22     	; 0x2cd6 <vfprintf+0x2cc>
    2cc0:	5e ef       	ldi	r21, 0xFE	; 254
    2cc2:	f5 22       	and	r15, r21
    2cc4:	d9 14       	cp	r13, r9
    2cc6:	38 f4       	brcc	.+14     	; 0x2cd6 <vfprintf+0x2cc>
    2cc8:	f4 fe       	sbrs	r15, 4
    2cca:	07 c0       	rjmp	.+14     	; 0x2cda <vfprintf+0x2d0>
    2ccc:	f2 fc       	sbrc	r15, 2
    2cce:	05 c0       	rjmp	.+10     	; 0x2cda <vfprintf+0x2d0>
    2cd0:	8f ee       	ldi	r24, 0xEF	; 239
    2cd2:	f8 22       	and	r15, r24
    2cd4:	02 c0       	rjmp	.+4      	; 0x2cda <vfprintf+0x2d0>
    2cd6:	1d 2d       	mov	r17, r13
    2cd8:	01 c0       	rjmp	.+2      	; 0x2cdc <vfprintf+0x2d2>
    2cda:	19 2d       	mov	r17, r9
    2cdc:	f4 fe       	sbrs	r15, 4
    2cde:	0d c0       	rjmp	.+26     	; 0x2cfa <vfprintf+0x2f0>
    2ce0:	fe 01       	movw	r30, r28
    2ce2:	ed 0d       	add	r30, r13
    2ce4:	f1 1d       	adc	r31, r1
    2ce6:	80 81       	ld	r24, Z
    2ce8:	80 33       	cpi	r24, 0x30	; 48
    2cea:	19 f4       	brne	.+6      	; 0x2cf2 <vfprintf+0x2e8>
    2cec:	99 ee       	ldi	r25, 0xE9	; 233
    2cee:	f9 22       	and	r15, r25
    2cf0:	08 c0       	rjmp	.+16     	; 0x2d02 <vfprintf+0x2f8>
    2cf2:	1f 5f       	subi	r17, 0xFF	; 255
    2cf4:	f2 fe       	sbrs	r15, 2
    2cf6:	05 c0       	rjmp	.+10     	; 0x2d02 <vfprintf+0x2f8>
    2cf8:	03 c0       	rjmp	.+6      	; 0x2d00 <vfprintf+0x2f6>
    2cfa:	8f 2d       	mov	r24, r15
    2cfc:	86 78       	andi	r24, 0x86	; 134
    2cfe:	09 f0       	breq	.+2      	; 0x2d02 <vfprintf+0x2f8>
    2d00:	1f 5f       	subi	r17, 0xFF	; 255
    2d02:	0f 2d       	mov	r16, r15
    2d04:	f3 fc       	sbrc	r15, 3
    2d06:	14 c0       	rjmp	.+40     	; 0x2d30 <vfprintf+0x326>
    2d08:	f0 fe       	sbrs	r15, 0
    2d0a:	0f c0       	rjmp	.+30     	; 0x2d2a <vfprintf+0x320>
    2d0c:	1e 15       	cp	r17, r14
    2d0e:	10 f0       	brcs	.+4      	; 0x2d14 <vfprintf+0x30a>
    2d10:	9d 2c       	mov	r9, r13
    2d12:	0b c0       	rjmp	.+22     	; 0x2d2a <vfprintf+0x320>
    2d14:	9d 2c       	mov	r9, r13
    2d16:	9e 0c       	add	r9, r14
    2d18:	91 1a       	sub	r9, r17
    2d1a:	1e 2d       	mov	r17, r14
    2d1c:	06 c0       	rjmp	.+12     	; 0x2d2a <vfprintf+0x320>
    2d1e:	80 e2       	ldi	r24, 0x20	; 32
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	b3 01       	movw	r22, r6
    2d24:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <fputc>
    2d28:	1f 5f       	subi	r17, 0xFF	; 255
    2d2a:	1e 15       	cp	r17, r14
    2d2c:	c0 f3       	brcs	.-16     	; 0x2d1e <vfprintf+0x314>
    2d2e:	04 c0       	rjmp	.+8      	; 0x2d38 <vfprintf+0x32e>
    2d30:	1e 15       	cp	r17, r14
    2d32:	10 f4       	brcc	.+4      	; 0x2d38 <vfprintf+0x32e>
    2d34:	e1 1a       	sub	r14, r17
    2d36:	01 c0       	rjmp	.+2      	; 0x2d3a <vfprintf+0x330>
    2d38:	ee 24       	eor	r14, r14
    2d3a:	04 ff       	sbrs	r16, 4
    2d3c:	0f c0       	rjmp	.+30     	; 0x2d5c <vfprintf+0x352>
    2d3e:	80 e3       	ldi	r24, 0x30	; 48
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	b3 01       	movw	r22, r6
    2d44:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <fputc>
    2d48:	02 ff       	sbrs	r16, 2
    2d4a:	1d c0       	rjmp	.+58     	; 0x2d86 <vfprintf+0x37c>
    2d4c:	01 fd       	sbrc	r16, 1
    2d4e:	03 c0       	rjmp	.+6      	; 0x2d56 <vfprintf+0x34c>
    2d50:	88 e7       	ldi	r24, 0x78	; 120
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	0e c0       	rjmp	.+28     	; 0x2d72 <vfprintf+0x368>
    2d56:	88 e5       	ldi	r24, 0x58	; 88
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	0b c0       	rjmp	.+22     	; 0x2d72 <vfprintf+0x368>
    2d5c:	80 2f       	mov	r24, r16
    2d5e:	86 78       	andi	r24, 0x86	; 134
    2d60:	91 f0       	breq	.+36     	; 0x2d86 <vfprintf+0x37c>
    2d62:	01 ff       	sbrs	r16, 1
    2d64:	02 c0       	rjmp	.+4      	; 0x2d6a <vfprintf+0x360>
    2d66:	8b e2       	ldi	r24, 0x2B	; 43
    2d68:	01 c0       	rjmp	.+2      	; 0x2d6c <vfprintf+0x362>
    2d6a:	80 e2       	ldi	r24, 0x20	; 32
    2d6c:	f7 fc       	sbrc	r15, 7
    2d6e:	8d e2       	ldi	r24, 0x2D	; 45
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	b3 01       	movw	r22, r6
    2d74:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <fputc>
    2d78:	06 c0       	rjmp	.+12     	; 0x2d86 <vfprintf+0x37c>
    2d7a:	80 e3       	ldi	r24, 0x30	; 48
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	b3 01       	movw	r22, r6
    2d80:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <fputc>
    2d84:	9a 94       	dec	r9
    2d86:	d9 14       	cp	r13, r9
    2d88:	c0 f3       	brcs	.-16     	; 0x2d7a <vfprintf+0x370>
    2d8a:	da 94       	dec	r13
    2d8c:	f1 01       	movw	r30, r2
    2d8e:	ed 0d       	add	r30, r13
    2d90:	f1 1d       	adc	r31, r1
    2d92:	80 81       	ld	r24, Z
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	b3 01       	movw	r22, r6
    2d98:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <fputc>
    2d9c:	dd 20       	and	r13, r13
    2d9e:	a9 f7       	brne	.-22     	; 0x2d8a <vfprintf+0x380>
    2da0:	06 c0       	rjmp	.+12     	; 0x2dae <vfprintf+0x3a4>
    2da2:	80 e2       	ldi	r24, 0x20	; 32
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	b3 01       	movw	r22, r6
    2da8:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <fputc>
    2dac:	ea 94       	dec	r14
    2dae:	ee 20       	and	r14, r14
    2db0:	c1 f7       	brne	.-16     	; 0x2da2 <vfprintf+0x398>
    2db2:	43 ce       	rjmp	.-890    	; 0x2a3a <vfprintf+0x30>
    2db4:	f3 01       	movw	r30, r6
    2db6:	66 81       	ldd	r22, Z+6	; 0x06
    2db8:	77 81       	ldd	r23, Z+7	; 0x07
    2dba:	cb 01       	movw	r24, r22
    2dbc:	2b 96       	adiw	r28, 0x0b	; 11
    2dbe:	e2 e1       	ldi	r30, 0x12	; 18
    2dc0:	0c 94 c6 14 	jmp	0x298c	; 0x298c <__epilogue_restores__>

00002dc4 <strnlen_P>:
    2dc4:	fc 01       	movw	r30, r24
    2dc6:	05 90       	lpm	r0, Z+
    2dc8:	61 50       	subi	r22, 0x01	; 1
    2dca:	70 40       	sbci	r23, 0x00	; 0
    2dcc:	01 10       	cpse	r0, r1
    2dce:	d8 f7       	brcc	.-10     	; 0x2dc6 <strnlen_P+0x2>
    2dd0:	80 95       	com	r24
    2dd2:	90 95       	com	r25
    2dd4:	8e 0f       	add	r24, r30
    2dd6:	9f 1f       	adc	r25, r31
    2dd8:	08 95       	ret

00002dda <strnlen>:
    2dda:	fc 01       	movw	r30, r24
    2ddc:	61 50       	subi	r22, 0x01	; 1
    2dde:	70 40       	sbci	r23, 0x00	; 0
    2de0:	01 90       	ld	r0, Z+
    2de2:	01 10       	cpse	r0, r1
    2de4:	d8 f7       	brcc	.-10     	; 0x2ddc <strnlen+0x2>
    2de6:	80 95       	com	r24
    2de8:	90 95       	com	r25
    2dea:	8e 0f       	add	r24, r30
    2dec:	9f 1f       	adc	r25, r31
    2dee:	08 95       	ret

00002df0 <fputc>:
    2df0:	0f 93       	push	r16
    2df2:	1f 93       	push	r17
    2df4:	cf 93       	push	r28
    2df6:	df 93       	push	r29
    2df8:	8c 01       	movw	r16, r24
    2dfa:	eb 01       	movw	r28, r22
    2dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfe:	81 ff       	sbrs	r24, 1
    2e00:	1b c0       	rjmp	.+54     	; 0x2e38 <fputc+0x48>
    2e02:	82 ff       	sbrs	r24, 2
    2e04:	0d c0       	rjmp	.+26     	; 0x2e20 <fputc+0x30>
    2e06:	2e 81       	ldd	r18, Y+6	; 0x06
    2e08:	3f 81       	ldd	r19, Y+7	; 0x07
    2e0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e0c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e0e:	28 17       	cp	r18, r24
    2e10:	39 07       	cpc	r19, r25
    2e12:	64 f4       	brge	.+24     	; 0x2e2c <fputc+0x3c>
    2e14:	e8 81       	ld	r30, Y
    2e16:	f9 81       	ldd	r31, Y+1	; 0x01
    2e18:	01 93       	st	Z+, r16
    2e1a:	f9 83       	std	Y+1, r31	; 0x01
    2e1c:	e8 83       	st	Y, r30
    2e1e:	06 c0       	rjmp	.+12     	; 0x2e2c <fputc+0x3c>
    2e20:	e8 85       	ldd	r30, Y+8	; 0x08
    2e22:	f9 85       	ldd	r31, Y+9	; 0x09
    2e24:	80 2f       	mov	r24, r16
    2e26:	09 95       	icall
    2e28:	89 2b       	or	r24, r25
    2e2a:	31 f4       	brne	.+12     	; 0x2e38 <fputc+0x48>
    2e2c:	8e 81       	ldd	r24, Y+6	; 0x06
    2e2e:	9f 81       	ldd	r25, Y+7	; 0x07
    2e30:	01 96       	adiw	r24, 0x01	; 1
    2e32:	9f 83       	std	Y+7, r25	; 0x07
    2e34:	8e 83       	std	Y+6, r24	; 0x06
    2e36:	02 c0       	rjmp	.+4      	; 0x2e3c <fputc+0x4c>
    2e38:	0f ef       	ldi	r16, 0xFF	; 255
    2e3a:	1f ef       	ldi	r17, 0xFF	; 255
    2e3c:	c8 01       	movw	r24, r16
    2e3e:	df 91       	pop	r29
    2e40:	cf 91       	pop	r28
    2e42:	1f 91       	pop	r17
    2e44:	0f 91       	pop	r16
    2e46:	08 95       	ret

00002e48 <__ultoa_invert>:
    2e48:	fa 01       	movw	r30, r20
    2e4a:	aa 27       	eor	r26, r26
    2e4c:	28 30       	cpi	r18, 0x08	; 8
    2e4e:	51 f1       	breq	.+84     	; 0x2ea4 <__ultoa_invert+0x5c>
    2e50:	20 31       	cpi	r18, 0x10	; 16
    2e52:	81 f1       	breq	.+96     	; 0x2eb4 <__ultoa_invert+0x6c>
    2e54:	e8 94       	clt
    2e56:	6f 93       	push	r22
    2e58:	6e 7f       	andi	r22, 0xFE	; 254
    2e5a:	6e 5f       	subi	r22, 0xFE	; 254
    2e5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e5e:	8f 4f       	sbci	r24, 0xFF	; 255
    2e60:	9f 4f       	sbci	r25, 0xFF	; 255
    2e62:	af 4f       	sbci	r26, 0xFF	; 255
    2e64:	b1 e0       	ldi	r27, 0x01	; 1
    2e66:	3e d0       	rcall	.+124    	; 0x2ee4 <__ultoa_invert+0x9c>
    2e68:	b4 e0       	ldi	r27, 0x04	; 4
    2e6a:	3c d0       	rcall	.+120    	; 0x2ee4 <__ultoa_invert+0x9c>
    2e6c:	67 0f       	add	r22, r23
    2e6e:	78 1f       	adc	r23, r24
    2e70:	89 1f       	adc	r24, r25
    2e72:	9a 1f       	adc	r25, r26
    2e74:	a1 1d       	adc	r26, r1
    2e76:	68 0f       	add	r22, r24
    2e78:	79 1f       	adc	r23, r25
    2e7a:	8a 1f       	adc	r24, r26
    2e7c:	91 1d       	adc	r25, r1
    2e7e:	a1 1d       	adc	r26, r1
    2e80:	6a 0f       	add	r22, r26
    2e82:	71 1d       	adc	r23, r1
    2e84:	81 1d       	adc	r24, r1
    2e86:	91 1d       	adc	r25, r1
    2e88:	a1 1d       	adc	r26, r1
    2e8a:	20 d0       	rcall	.+64     	; 0x2ecc <__ultoa_invert+0x84>
    2e8c:	09 f4       	brne	.+2      	; 0x2e90 <__ultoa_invert+0x48>
    2e8e:	68 94       	set
    2e90:	3f 91       	pop	r19
    2e92:	2a e0       	ldi	r18, 0x0A	; 10
    2e94:	26 9f       	mul	r18, r22
    2e96:	11 24       	eor	r1, r1
    2e98:	30 19       	sub	r19, r0
    2e9a:	30 5d       	subi	r19, 0xD0	; 208
    2e9c:	31 93       	st	Z+, r19
    2e9e:	de f6       	brtc	.-74     	; 0x2e56 <__ultoa_invert+0xe>
    2ea0:	cf 01       	movw	r24, r30
    2ea2:	08 95       	ret
    2ea4:	46 2f       	mov	r20, r22
    2ea6:	47 70       	andi	r20, 0x07	; 7
    2ea8:	40 5d       	subi	r20, 0xD0	; 208
    2eaa:	41 93       	st	Z+, r20
    2eac:	b3 e0       	ldi	r27, 0x03	; 3
    2eae:	0f d0       	rcall	.+30     	; 0x2ece <__ultoa_invert+0x86>
    2eb0:	c9 f7       	brne	.-14     	; 0x2ea4 <__ultoa_invert+0x5c>
    2eb2:	f6 cf       	rjmp	.-20     	; 0x2ea0 <__ultoa_invert+0x58>
    2eb4:	46 2f       	mov	r20, r22
    2eb6:	4f 70       	andi	r20, 0x0F	; 15
    2eb8:	40 5d       	subi	r20, 0xD0	; 208
    2eba:	4a 33       	cpi	r20, 0x3A	; 58
    2ebc:	18 f0       	brcs	.+6      	; 0x2ec4 <__ultoa_invert+0x7c>
    2ebe:	49 5d       	subi	r20, 0xD9	; 217
    2ec0:	31 fd       	sbrc	r19, 1
    2ec2:	40 52       	subi	r20, 0x20	; 32
    2ec4:	41 93       	st	Z+, r20
    2ec6:	02 d0       	rcall	.+4      	; 0x2ecc <__ultoa_invert+0x84>
    2ec8:	a9 f7       	brne	.-22     	; 0x2eb4 <__ultoa_invert+0x6c>
    2eca:	ea cf       	rjmp	.-44     	; 0x2ea0 <__ultoa_invert+0x58>
    2ecc:	b4 e0       	ldi	r27, 0x04	; 4
    2ece:	a6 95       	lsr	r26
    2ed0:	97 95       	ror	r25
    2ed2:	87 95       	ror	r24
    2ed4:	77 95       	ror	r23
    2ed6:	67 95       	ror	r22
    2ed8:	ba 95       	dec	r27
    2eda:	c9 f7       	brne	.-14     	; 0x2ece <__ultoa_invert+0x86>
    2edc:	00 97       	sbiw	r24, 0x00	; 0
    2ede:	61 05       	cpc	r22, r1
    2ee0:	71 05       	cpc	r23, r1
    2ee2:	08 95       	ret
    2ee4:	9b 01       	movw	r18, r22
    2ee6:	ac 01       	movw	r20, r24
    2ee8:	0a 2e       	mov	r0, r26
    2eea:	06 94       	lsr	r0
    2eec:	57 95       	ror	r21
    2eee:	47 95       	ror	r20
    2ef0:	37 95       	ror	r19
    2ef2:	27 95       	ror	r18
    2ef4:	ba 95       	dec	r27
    2ef6:	c9 f7       	brne	.-14     	; 0x2eea <__ultoa_invert+0xa2>
    2ef8:	62 0f       	add	r22, r18
    2efa:	73 1f       	adc	r23, r19
    2efc:	84 1f       	adc	r24, r20
    2efe:	95 1f       	adc	r25, r21
    2f00:	a0 1d       	adc	r26, r0
    2f02:	08 95       	ret

00002f04 <_exit>:
    2f04:	f8 94       	cli

00002f06 <__stop_program>:
    2f06:	ff cf       	rjmp	.-2      	; 0x2f06 <__stop_program>
