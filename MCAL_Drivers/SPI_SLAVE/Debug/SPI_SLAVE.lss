
SPI_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000272c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  0000272c  000027a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001980  00000000  00000000  000028b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000de1  00000000  00000000  00004230  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00005011  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d1  00000000  00000000  00005191  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002010  00000000  00000000  00005362  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001161  00000000  00000000  00007372  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001003  00000000  00000000  000084d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  000094d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002be  00000000  00000000  00009678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000090e  00000000  00000000  00009936  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a244  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 23 10 	call	0x2046	; 0x2046 <main>
      7a:	0c 94 94 13 	jmp	0x2728	; 0x2728 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a8 e6       	ldi	r26, 0x68	; 104
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e4 10 	jmp	0x21c8	; 0x21c8 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e4 10 	jmp	0x21c8	; 0x21c8 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	88 e6       	ldi	r24, 0x68	; 104
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 e4 10 	jmp	0x21c8	; 0x21c8 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 e4 10 	jmp	0x21c8	; 0x21c8 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 e4 10 	jmp	0x21c8	; 0x21c8 <__epilogue_restores__+0x18>

00000742 <__floatsisf>:
     742:	a8 e0       	ldi	r26, 0x08	; 8
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 c5 10 	jmp	0x218a	; 0x218a <__prologue_saves__+0x12>
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	da 01       	movw	r26, r20
     758:	c9 01       	movw	r24, r18
     75a:	88 27       	eor	r24, r24
     75c:	b7 fd       	sbrc	r27, 7
     75e:	83 95       	inc	r24
     760:	99 27       	eor	r25, r25
     762:	aa 27       	eor	r26, r26
     764:	bb 27       	eor	r27, r27
     766:	b8 2e       	mov	r11, r24
     768:	21 15       	cp	r18, r1
     76a:	31 05       	cpc	r19, r1
     76c:	41 05       	cpc	r20, r1
     76e:	51 05       	cpc	r21, r1
     770:	19 f4       	brne	.+6      	; 0x778 <__floatsisf+0x36>
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	3a c0       	rjmp	.+116    	; 0x7ec <__floatsisf+0xaa>
     778:	88 23       	and	r24, r24
     77a:	a9 f0       	breq	.+42     	; 0x7a6 <__floatsisf+0x64>
     77c:	20 30       	cpi	r18, 0x00	; 0
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	38 07       	cpc	r19, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	48 07       	cpc	r20, r24
     786:	80 e8       	ldi	r24, 0x80	; 128
     788:	58 07       	cpc	r21, r24
     78a:	29 f4       	brne	.+10     	; 0x796 <__floatsisf+0x54>
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	9f ec       	ldi	r25, 0xCF	; 207
     794:	30 c0       	rjmp	.+96     	; 0x7f6 <__floatsisf+0xb4>
     796:	ee 24       	eor	r14, r14
     798:	ff 24       	eor	r15, r15
     79a:	87 01       	movw	r16, r14
     79c:	e2 1a       	sub	r14, r18
     79e:	f3 0a       	sbc	r15, r19
     7a0:	04 0b       	sbc	r16, r20
     7a2:	15 0b       	sbc	r17, r21
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <__floatsisf+0x68>
     7a6:	79 01       	movw	r14, r18
     7a8:	8a 01       	movw	r16, r20
     7aa:	8e e1       	ldi	r24, 0x1E	; 30
     7ac:	c8 2e       	mov	r12, r24
     7ae:	d1 2c       	mov	r13, r1
     7b0:	dc 82       	std	Y+4, r13	; 0x04
     7b2:	cb 82       	std	Y+3, r12	; 0x03
     7b4:	ed 82       	std	Y+5, r14	; 0x05
     7b6:	fe 82       	std	Y+6, r15	; 0x06
     7b8:	0f 83       	std	Y+7, r16	; 0x07
     7ba:	18 87       	std	Y+8, r17	; 0x08
     7bc:	c8 01       	movw	r24, r16
     7be:	b7 01       	movw	r22, r14
     7c0:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__clzsi2>
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	18 16       	cp	r1, r24
     7c8:	19 06       	cpc	r1, r25
     7ca:	84 f4       	brge	.+32     	; 0x7ec <__floatsisf+0xaa>
     7cc:	08 2e       	mov	r0, r24
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <__floatsisf+0x96>
     7d0:	ee 0c       	add	r14, r14
     7d2:	ff 1c       	adc	r15, r15
     7d4:	00 1f       	adc	r16, r16
     7d6:	11 1f       	adc	r17, r17
     7d8:	0a 94       	dec	r0
     7da:	d2 f7       	brpl	.-12     	; 0x7d0 <__floatsisf+0x8e>
     7dc:	ed 82       	std	Y+5, r14	; 0x05
     7de:	fe 82       	std	Y+6, r15	; 0x06
     7e0:	0f 83       	std	Y+7, r16	; 0x07
     7e2:	18 87       	std	Y+8, r17	; 0x08
     7e4:	c8 1a       	sub	r12, r24
     7e6:	d9 0a       	sbc	r13, r25
     7e8:	dc 82       	std	Y+4, r13	; 0x04
     7ea:	cb 82       	std	Y+3, r12	; 0x03
     7ec:	ba 82       	std	Y+2, r11	; 0x02
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     7f6:	28 96       	adiw	r28, 0x08	; 8
     7f8:	e9 e0       	ldi	r30, 0x09	; 9
     7fa:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <__epilogue_restores__+0x12>

000007fe <__fixsfsi>:
     7fe:	ac e0       	ldi	r26, 0x0C	; 12
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e5 e0       	ldi	r30, 0x05	; 5
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <__prologue_saves__+0x20>
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	7a 83       	std	Y+2, r23	; 0x02
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	be 01       	movw	r22, r28
     818:	6b 5f       	subi	r22, 0xFB	; 251
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     820:	8d 81       	ldd	r24, Y+5	; 0x05
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	61 f1       	breq	.+88     	; 0x87e <__stack+0x1f>
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	50 f1       	brcs	.+84     	; 0x87e <__stack+0x1f>
     82a:	84 30       	cpi	r24, 0x04	; 4
     82c:	21 f4       	brne	.+8      	; 0x836 <__fixsfsi+0x38>
     82e:	8e 81       	ldd	r24, Y+6	; 0x06
     830:	88 23       	and	r24, r24
     832:	51 f1       	breq	.+84     	; 0x888 <__stack+0x29>
     834:	2e c0       	rjmp	.+92     	; 0x892 <__stack+0x33>
     836:	2f 81       	ldd	r18, Y+7	; 0x07
     838:	38 85       	ldd	r19, Y+8	; 0x08
     83a:	37 fd       	sbrc	r19, 7
     83c:	20 c0       	rjmp	.+64     	; 0x87e <__stack+0x1f>
     83e:	6e 81       	ldd	r22, Y+6	; 0x06
     840:	2f 31       	cpi	r18, 0x1F	; 31
     842:	31 05       	cpc	r19, r1
     844:	1c f0       	brlt	.+6      	; 0x84c <__fixsfsi+0x4e>
     846:	66 23       	and	r22, r22
     848:	f9 f0       	breq	.+62     	; 0x888 <__stack+0x29>
     84a:	23 c0       	rjmp	.+70     	; 0x892 <__stack+0x33>
     84c:	8e e1       	ldi	r24, 0x1E	; 30
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	82 1b       	sub	r24, r18
     852:	93 0b       	sbc	r25, r19
     854:	29 85       	ldd	r18, Y+9	; 0x09
     856:	3a 85       	ldd	r19, Y+10	; 0x0a
     858:	4b 85       	ldd	r20, Y+11	; 0x0b
     85a:	5c 85       	ldd	r21, Y+12	; 0x0c
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	56 95       	lsr	r21
     860:	47 95       	ror	r20
     862:	37 95       	ror	r19
     864:	27 95       	ror	r18
     866:	8a 95       	dec	r24
     868:	d2 f7       	brpl	.-12     	; 0x85e <__fixsfsi+0x60>
     86a:	66 23       	and	r22, r22
     86c:	b1 f0       	breq	.+44     	; 0x89a <__stack+0x3b>
     86e:	50 95       	com	r21
     870:	40 95       	com	r20
     872:	30 95       	com	r19
     874:	21 95       	neg	r18
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	4f 4f       	sbci	r20, 0xFF	; 255
     87a:	5f 4f       	sbci	r21, 0xFF	; 255
     87c:	0e c0       	rjmp	.+28     	; 0x89a <__stack+0x3b>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	09 c0       	rjmp	.+18     	; 0x89a <__stack+0x3b>
     888:	2f ef       	ldi	r18, 0xFF	; 255
     88a:	3f ef       	ldi	r19, 0xFF	; 255
     88c:	4f ef       	ldi	r20, 0xFF	; 255
     88e:	5f e7       	ldi	r21, 0x7F	; 127
     890:	04 c0       	rjmp	.+8      	; 0x89a <__stack+0x3b>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e8       	ldi	r21, 0x80	; 128
     89a:	b9 01       	movw	r22, r18
     89c:	ca 01       	movw	r24, r20
     89e:	2c 96       	adiw	r28, 0x0c	; 12
     8a0:	e2 e0       	ldi	r30, 0x02	; 2
     8a2:	0c 94 e8 10 	jmp	0x21d0	; 0x21d0 <__epilogue_restores__+0x20>

000008a6 <__clzsi2>:
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	7b 01       	movw	r14, r22
     8b0:	8c 01       	movw	r16, r24
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	e8 16       	cp	r14, r24
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	f8 06       	cpc	r15, r24
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	08 07       	cpc	r16, r24
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	18 07       	cpc	r17, r24
     8c2:	88 f4       	brcc	.+34     	; 0x8e6 <__clzsi2+0x40>
     8c4:	8f ef       	ldi	r24, 0xFF	; 255
     8c6:	e8 16       	cp	r14, r24
     8c8:	f1 04       	cpc	r15, r1
     8ca:	01 05       	cpc	r16, r1
     8cc:	11 05       	cpc	r17, r1
     8ce:	31 f0       	breq	.+12     	; 0x8dc <__clzsi2+0x36>
     8d0:	28 f0       	brcs	.+10     	; 0x8dc <__clzsi2+0x36>
     8d2:	88 e0       	ldi	r24, 0x08	; 8
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	a0 e0       	ldi	r26, 0x00	; 0
     8d8:	b0 e0       	ldi	r27, 0x00	; 0
     8da:	17 c0       	rjmp	.+46     	; 0x90a <__clzsi2+0x64>
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	a0 e0       	ldi	r26, 0x00	; 0
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	12 c0       	rjmp	.+36     	; 0x90a <__clzsi2+0x64>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	e8 16       	cp	r14, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	f8 06       	cpc	r15, r24
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	08 07       	cpc	r16, r24
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	18 07       	cpc	r17, r24
     8f6:	28 f0       	brcs	.+10     	; 0x902 <__clzsi2+0x5c>
     8f8:	88 e1       	ldi	r24, 0x18	; 24
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	a0 e0       	ldi	r26, 0x00	; 0
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	04 c0       	rjmp	.+8      	; 0x90a <__clzsi2+0x64>
     902:	80 e1       	ldi	r24, 0x10	; 16
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	a0 e0       	ldi	r26, 0x00	; 0
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	20 e2       	ldi	r18, 0x20	; 32
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	28 1b       	sub	r18, r24
     914:	39 0b       	sbc	r19, r25
     916:	4a 0b       	sbc	r20, r26
     918:	5b 0b       	sbc	r21, r27
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__clzsi2+0x7e>
     91c:	16 95       	lsr	r17
     91e:	07 95       	ror	r16
     920:	f7 94       	ror	r15
     922:	e7 94       	ror	r14
     924:	8a 95       	dec	r24
     926:	d2 f7       	brpl	.-12     	; 0x91c <__clzsi2+0x76>
     928:	f7 01       	movw	r30, r14
     92a:	e0 59       	subi	r30, 0x90	; 144
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	80 81       	ld	r24, Z
     930:	28 1b       	sub	r18, r24
     932:	31 09       	sbc	r19, r1
     934:	41 09       	sbc	r20, r1
     936:	51 09       	sbc	r21, r1
     938:	c9 01       	movw	r24, r18
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	08 95       	ret

00000944 <__pack_f>:
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	fc 01       	movw	r30, r24
     950:	e4 80       	ldd	r14, Z+4	; 0x04
     952:	f5 80       	ldd	r15, Z+5	; 0x05
     954:	06 81       	ldd	r16, Z+6	; 0x06
     956:	17 81       	ldd	r17, Z+7	; 0x07
     958:	d1 80       	ldd	r13, Z+1	; 0x01
     95a:	80 81       	ld	r24, Z
     95c:	82 30       	cpi	r24, 0x02	; 2
     95e:	48 f4       	brcc	.+18     	; 0x972 <__pack_f+0x2e>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	a0 e1       	ldi	r26, 0x10	; 16
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	e8 2a       	or	r14, r24
     96a:	f9 2a       	or	r15, r25
     96c:	0a 2b       	or	r16, r26
     96e:	1b 2b       	or	r17, r27
     970:	a5 c0       	rjmp	.+330    	; 0xabc <__pack_f+0x178>
     972:	84 30       	cpi	r24, 0x04	; 4
     974:	09 f4       	brne	.+2      	; 0x978 <__pack_f+0x34>
     976:	9f c0       	rjmp	.+318    	; 0xab6 <__pack_f+0x172>
     978:	82 30       	cpi	r24, 0x02	; 2
     97a:	21 f4       	brne	.+8      	; 0x984 <__pack_f+0x40>
     97c:	ee 24       	eor	r14, r14
     97e:	ff 24       	eor	r15, r15
     980:	87 01       	movw	r16, r14
     982:	05 c0       	rjmp	.+10     	; 0x98e <__pack_f+0x4a>
     984:	e1 14       	cp	r14, r1
     986:	f1 04       	cpc	r15, r1
     988:	01 05       	cpc	r16, r1
     98a:	11 05       	cpc	r17, r1
     98c:	19 f4       	brne	.+6      	; 0x994 <__pack_f+0x50>
     98e:	e0 e0       	ldi	r30, 0x00	; 0
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	96 c0       	rjmp	.+300    	; 0xac0 <__pack_f+0x17c>
     994:	62 81       	ldd	r22, Z+2	; 0x02
     996:	73 81       	ldd	r23, Z+3	; 0x03
     998:	9f ef       	ldi	r25, 0xFF	; 255
     99a:	62 38       	cpi	r22, 0x82	; 130
     99c:	79 07       	cpc	r23, r25
     99e:	0c f0       	brlt	.+2      	; 0x9a2 <__pack_f+0x5e>
     9a0:	5b c0       	rjmp	.+182    	; 0xa58 <__pack_f+0x114>
     9a2:	22 e8       	ldi	r18, 0x82	; 130
     9a4:	3f ef       	ldi	r19, 0xFF	; 255
     9a6:	26 1b       	sub	r18, r22
     9a8:	37 0b       	sbc	r19, r23
     9aa:	2a 31       	cpi	r18, 0x1A	; 26
     9ac:	31 05       	cpc	r19, r1
     9ae:	2c f0       	brlt	.+10     	; 0x9ba <__pack_f+0x76>
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	2a c0       	rjmp	.+84     	; 0xa0e <__pack_f+0xca>
     9ba:	b8 01       	movw	r22, r16
     9bc:	a7 01       	movw	r20, r14
     9be:	02 2e       	mov	r0, r18
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__pack_f+0x86>
     9c2:	76 95       	lsr	r23
     9c4:	67 95       	ror	r22
     9c6:	57 95       	ror	r21
     9c8:	47 95       	ror	r20
     9ca:	0a 94       	dec	r0
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__pack_f+0x7e>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__pack_f+0x9c>
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	aa 1f       	adc	r26, r26
     9de:	bb 1f       	adc	r27, r27
     9e0:	2a 95       	dec	r18
     9e2:	d2 f7       	brpl	.-12     	; 0x9d8 <__pack_f+0x94>
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	a1 09       	sbc	r26, r1
     9e8:	b1 09       	sbc	r27, r1
     9ea:	8e 21       	and	r24, r14
     9ec:	9f 21       	and	r25, r15
     9ee:	a0 23       	and	r26, r16
     9f0:	b1 23       	and	r27, r17
     9f2:	00 97       	sbiw	r24, 0x00	; 0
     9f4:	a1 05       	cpc	r26, r1
     9f6:	b1 05       	cpc	r27, r1
     9f8:	21 f0       	breq	.+8      	; 0xa02 <__pack_f+0xbe>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	9a 01       	movw	r18, r20
     a04:	ab 01       	movw	r20, r22
     a06:	28 2b       	or	r18, r24
     a08:	39 2b       	or	r19, r25
     a0a:	4a 2b       	or	r20, r26
     a0c:	5b 2b       	or	r21, r27
     a0e:	da 01       	movw	r26, r20
     a10:	c9 01       	movw	r24, r18
     a12:	8f 77       	andi	r24, 0x7F	; 127
     a14:	90 70       	andi	r25, 0x00	; 0
     a16:	a0 70       	andi	r26, 0x00	; 0
     a18:	b0 70       	andi	r27, 0x00	; 0
     a1a:	80 34       	cpi	r24, 0x40	; 64
     a1c:	91 05       	cpc	r25, r1
     a1e:	a1 05       	cpc	r26, r1
     a20:	b1 05       	cpc	r27, r1
     a22:	39 f4       	brne	.+14     	; 0xa32 <__pack_f+0xee>
     a24:	27 ff       	sbrs	r18, 7
     a26:	09 c0       	rjmp	.+18     	; 0xa3a <__pack_f+0xf6>
     a28:	20 5c       	subi	r18, 0xC0	; 192
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
     a2c:	4f 4f       	sbci	r20, 0xFF	; 255
     a2e:	5f 4f       	sbci	r21, 0xFF	; 255
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__pack_f+0xf6>
     a32:	21 5c       	subi	r18, 0xC1	; 193
     a34:	3f 4f       	sbci	r19, 0xFF	; 255
     a36:	4f 4f       	sbci	r20, 0xFF	; 255
     a38:	5f 4f       	sbci	r21, 0xFF	; 255
     a3a:	e0 e0       	ldi	r30, 0x00	; 0
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	20 30       	cpi	r18, 0x00	; 0
     a40:	a0 e0       	ldi	r26, 0x00	; 0
     a42:	3a 07       	cpc	r19, r26
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	4a 07       	cpc	r20, r26
     a48:	a0 e4       	ldi	r26, 0x40	; 64
     a4a:	5a 07       	cpc	r21, r26
     a4c:	10 f0       	brcs	.+4      	; 0xa52 <__pack_f+0x10e>
     a4e:	e1 e0       	ldi	r30, 0x01	; 1
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	79 01       	movw	r14, r18
     a54:	8a 01       	movw	r16, r20
     a56:	27 c0       	rjmp	.+78     	; 0xaa6 <__pack_f+0x162>
     a58:	60 38       	cpi	r22, 0x80	; 128
     a5a:	71 05       	cpc	r23, r1
     a5c:	64 f5       	brge	.+88     	; 0xab6 <__pack_f+0x172>
     a5e:	fb 01       	movw	r30, r22
     a60:	e1 58       	subi	r30, 0x81	; 129
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	d8 01       	movw	r26, r16
     a66:	c7 01       	movw	r24, r14
     a68:	8f 77       	andi	r24, 0x7F	; 127
     a6a:	90 70       	andi	r25, 0x00	; 0
     a6c:	a0 70       	andi	r26, 0x00	; 0
     a6e:	b0 70       	andi	r27, 0x00	; 0
     a70:	80 34       	cpi	r24, 0x40	; 64
     a72:	91 05       	cpc	r25, r1
     a74:	a1 05       	cpc	r26, r1
     a76:	b1 05       	cpc	r27, r1
     a78:	39 f4       	brne	.+14     	; 0xa88 <__pack_f+0x144>
     a7a:	e7 fe       	sbrs	r14, 7
     a7c:	0d c0       	rjmp	.+26     	; 0xa98 <__pack_f+0x154>
     a7e:	80 e4       	ldi	r24, 0x40	; 64
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	a0 e0       	ldi	r26, 0x00	; 0
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <__pack_f+0x14c>
     a88:	8f e3       	ldi	r24, 0x3F	; 63
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	a0 e0       	ldi	r26, 0x00	; 0
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	e8 0e       	add	r14, r24
     a92:	f9 1e       	adc	r15, r25
     a94:	0a 1f       	adc	r16, r26
     a96:	1b 1f       	adc	r17, r27
     a98:	17 ff       	sbrs	r17, 7
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <__pack_f+0x162>
     a9c:	16 95       	lsr	r17
     a9e:	07 95       	ror	r16
     aa0:	f7 94       	ror	r15
     aa2:	e7 94       	ror	r14
     aa4:	31 96       	adiw	r30, 0x01	; 1
     aa6:	87 e0       	ldi	r24, 0x07	; 7
     aa8:	16 95       	lsr	r17
     aaa:	07 95       	ror	r16
     aac:	f7 94       	ror	r15
     aae:	e7 94       	ror	r14
     ab0:	8a 95       	dec	r24
     ab2:	d1 f7       	brne	.-12     	; 0xaa8 <__pack_f+0x164>
     ab4:	05 c0       	rjmp	.+10     	; 0xac0 <__pack_f+0x17c>
     ab6:	ee 24       	eor	r14, r14
     ab8:	ff 24       	eor	r15, r15
     aba:	87 01       	movw	r16, r14
     abc:	ef ef       	ldi	r30, 0xFF	; 255
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	6e 2f       	mov	r22, r30
     ac2:	67 95       	ror	r22
     ac4:	66 27       	eor	r22, r22
     ac6:	67 95       	ror	r22
     ac8:	90 2f       	mov	r25, r16
     aca:	9f 77       	andi	r25, 0x7F	; 127
     acc:	d7 94       	ror	r13
     ace:	dd 24       	eor	r13, r13
     ad0:	d7 94       	ror	r13
     ad2:	8e 2f       	mov	r24, r30
     ad4:	86 95       	lsr	r24
     ad6:	49 2f       	mov	r20, r25
     ad8:	46 2b       	or	r20, r22
     ada:	58 2f       	mov	r21, r24
     adc:	5d 29       	or	r21, r13
     ade:	b7 01       	movw	r22, r14
     ae0:	ca 01       	movw	r24, r20
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	08 95       	ret

00000aee <__unpack_f>:
     aee:	fc 01       	movw	r30, r24
     af0:	db 01       	movw	r26, r22
     af2:	40 81       	ld	r20, Z
     af4:	51 81       	ldd	r21, Z+1	; 0x01
     af6:	22 81       	ldd	r18, Z+2	; 0x02
     af8:	62 2f       	mov	r22, r18
     afa:	6f 77       	andi	r22, 0x7F	; 127
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	22 1f       	adc	r18, r18
     b00:	22 27       	eor	r18, r18
     b02:	22 1f       	adc	r18, r18
     b04:	93 81       	ldd	r25, Z+3	; 0x03
     b06:	89 2f       	mov	r24, r25
     b08:	88 0f       	add	r24, r24
     b0a:	82 2b       	or	r24, r18
     b0c:	28 2f       	mov	r18, r24
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	99 1f       	adc	r25, r25
     b12:	99 27       	eor	r25, r25
     b14:	99 1f       	adc	r25, r25
     b16:	11 96       	adiw	r26, 0x01	; 1
     b18:	9c 93       	st	X, r25
     b1a:	11 97       	sbiw	r26, 0x01	; 1
     b1c:	21 15       	cp	r18, r1
     b1e:	31 05       	cpc	r19, r1
     b20:	a9 f5       	brne	.+106    	; 0xb8c <__unpack_f+0x9e>
     b22:	41 15       	cp	r20, r1
     b24:	51 05       	cpc	r21, r1
     b26:	61 05       	cpc	r22, r1
     b28:	71 05       	cpc	r23, r1
     b2a:	11 f4       	brne	.+4      	; 0xb30 <__unpack_f+0x42>
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	37 c0       	rjmp	.+110    	; 0xb9e <__unpack_f+0xb0>
     b30:	82 e8       	ldi	r24, 0x82	; 130
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	13 96       	adiw	r26, 0x03	; 3
     b36:	9c 93       	st	X, r25
     b38:	8e 93       	st	-X, r24
     b3a:	12 97       	sbiw	r26, 0x02	; 2
     b3c:	9a 01       	movw	r18, r20
     b3e:	ab 01       	movw	r20, r22
     b40:	67 e0       	ldi	r22, 0x07	; 7
     b42:	22 0f       	add	r18, r18
     b44:	33 1f       	adc	r19, r19
     b46:	44 1f       	adc	r20, r20
     b48:	55 1f       	adc	r21, r21
     b4a:	6a 95       	dec	r22
     b4c:	d1 f7       	brne	.-12     	; 0xb42 <__unpack_f+0x54>
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	8c 93       	st	X, r24
     b52:	0d c0       	rjmp	.+26     	; 0xb6e <__unpack_f+0x80>
     b54:	22 0f       	add	r18, r18
     b56:	33 1f       	adc	r19, r19
     b58:	44 1f       	adc	r20, r20
     b5a:	55 1f       	adc	r21, r21
     b5c:	12 96       	adiw	r26, 0x02	; 2
     b5e:	8d 91       	ld	r24, X+
     b60:	9c 91       	ld	r25, X
     b62:	13 97       	sbiw	r26, 0x03	; 3
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	13 96       	adiw	r26, 0x03	; 3
     b68:	9c 93       	st	X, r25
     b6a:	8e 93       	st	-X, r24
     b6c:	12 97       	sbiw	r26, 0x02	; 2
     b6e:	20 30       	cpi	r18, 0x00	; 0
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	38 07       	cpc	r19, r24
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	48 07       	cpc	r20, r24
     b78:	80 e4       	ldi	r24, 0x40	; 64
     b7a:	58 07       	cpc	r21, r24
     b7c:	58 f3       	brcs	.-42     	; 0xb54 <__unpack_f+0x66>
     b7e:	14 96       	adiw	r26, 0x04	; 4
     b80:	2d 93       	st	X+, r18
     b82:	3d 93       	st	X+, r19
     b84:	4d 93       	st	X+, r20
     b86:	5c 93       	st	X, r21
     b88:	17 97       	sbiw	r26, 0x07	; 7
     b8a:	08 95       	ret
     b8c:	2f 3f       	cpi	r18, 0xFF	; 255
     b8e:	31 05       	cpc	r19, r1
     b90:	79 f4       	brne	.+30     	; 0xbb0 <__unpack_f+0xc2>
     b92:	41 15       	cp	r20, r1
     b94:	51 05       	cpc	r21, r1
     b96:	61 05       	cpc	r22, r1
     b98:	71 05       	cpc	r23, r1
     b9a:	19 f4       	brne	.+6      	; 0xba2 <__unpack_f+0xb4>
     b9c:	84 e0       	ldi	r24, 0x04	; 4
     b9e:	8c 93       	st	X, r24
     ba0:	08 95       	ret
     ba2:	64 ff       	sbrs	r22, 4
     ba4:	03 c0       	rjmp	.+6      	; 0xbac <__unpack_f+0xbe>
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	8c 93       	st	X, r24
     baa:	12 c0       	rjmp	.+36     	; 0xbd0 <__unpack_f+0xe2>
     bac:	1c 92       	st	X, r1
     bae:	10 c0       	rjmp	.+32     	; 0xbd0 <__unpack_f+0xe2>
     bb0:	2f 57       	subi	r18, 0x7F	; 127
     bb2:	30 40       	sbci	r19, 0x00	; 0
     bb4:	13 96       	adiw	r26, 0x03	; 3
     bb6:	3c 93       	st	X, r19
     bb8:	2e 93       	st	-X, r18
     bba:	12 97       	sbiw	r26, 0x02	; 2
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	8c 93       	st	X, r24
     bc0:	87 e0       	ldi	r24, 0x07	; 7
     bc2:	44 0f       	add	r20, r20
     bc4:	55 1f       	adc	r21, r21
     bc6:	66 1f       	adc	r22, r22
     bc8:	77 1f       	adc	r23, r23
     bca:	8a 95       	dec	r24
     bcc:	d1 f7       	brne	.-12     	; 0xbc2 <__unpack_f+0xd4>
     bce:	70 64       	ori	r23, 0x40	; 64
     bd0:	14 96       	adiw	r26, 0x04	; 4
     bd2:	4d 93       	st	X+, r20
     bd4:	5d 93       	st	X+, r21
     bd6:	6d 93       	st	X+, r22
     bd8:	7c 93       	st	X, r23
     bda:	17 97       	sbiw	r26, 0x07	; 7
     bdc:	08 95       	ret

00000bde <__fpcmp_parts_f>:
     bde:	1f 93       	push	r17
     be0:	dc 01       	movw	r26, r24
     be2:	fb 01       	movw	r30, r22
     be4:	9c 91       	ld	r25, X
     be6:	92 30       	cpi	r25, 0x02	; 2
     be8:	08 f4       	brcc	.+2      	; 0xbec <__fpcmp_parts_f+0xe>
     bea:	47 c0       	rjmp	.+142    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bec:	80 81       	ld	r24, Z
     bee:	82 30       	cpi	r24, 0x02	; 2
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <__fpcmp_parts_f+0x16>
     bf2:	43 c0       	rjmp	.+134    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bf4:	94 30       	cpi	r25, 0x04	; 4
     bf6:	51 f4       	brne	.+20     	; 0xc0c <__fpcmp_parts_f+0x2e>
     bf8:	11 96       	adiw	r26, 0x01	; 1
     bfa:	1c 91       	ld	r17, X
     bfc:	84 30       	cpi	r24, 0x04	; 4
     bfe:	99 f5       	brne	.+102    	; 0xc66 <__fpcmp_parts_f+0x88>
     c00:	81 81       	ldd	r24, Z+1	; 0x01
     c02:	68 2f       	mov	r22, r24
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	61 1b       	sub	r22, r17
     c08:	71 09       	sbc	r23, r1
     c0a:	3f c0       	rjmp	.+126    	; 0xc8a <__fpcmp_parts_f+0xac>
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	21 f0       	breq	.+8      	; 0xc18 <__fpcmp_parts_f+0x3a>
     c10:	92 30       	cpi	r25, 0x02	; 2
     c12:	31 f4       	brne	.+12     	; 0xc20 <__fpcmp_parts_f+0x42>
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	b9 f1       	breq	.+110    	; 0xc86 <__fpcmp_parts_f+0xa8>
     c18:	81 81       	ldd	r24, Z+1	; 0x01
     c1a:	88 23       	and	r24, r24
     c1c:	89 f1       	breq	.+98     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c1e:	2d c0       	rjmp	.+90     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c20:	11 96       	adiw	r26, 0x01	; 1
     c22:	1c 91       	ld	r17, X
     c24:	11 97       	sbiw	r26, 0x01	; 1
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	f1 f0       	breq	.+60     	; 0xc66 <__fpcmp_parts_f+0x88>
     c2a:	81 81       	ldd	r24, Z+1	; 0x01
     c2c:	18 17       	cp	r17, r24
     c2e:	d9 f4       	brne	.+54     	; 0xc66 <__fpcmp_parts_f+0x88>
     c30:	12 96       	adiw	r26, 0x02	; 2
     c32:	2d 91       	ld	r18, X+
     c34:	3c 91       	ld	r19, X
     c36:	13 97       	sbiw	r26, 0x03	; 3
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	93 81       	ldd	r25, Z+3	; 0x03
     c3c:	82 17       	cp	r24, r18
     c3e:	93 07       	cpc	r25, r19
     c40:	94 f0       	brlt	.+36     	; 0xc66 <__fpcmp_parts_f+0x88>
     c42:	28 17       	cp	r18, r24
     c44:	39 07       	cpc	r19, r25
     c46:	bc f0       	brlt	.+46     	; 0xc76 <__fpcmp_parts_f+0x98>
     c48:	14 96       	adiw	r26, 0x04	; 4
     c4a:	8d 91       	ld	r24, X+
     c4c:	9d 91       	ld	r25, X+
     c4e:	0d 90       	ld	r0, X+
     c50:	bc 91       	ld	r27, X
     c52:	a0 2d       	mov	r26, r0
     c54:	24 81       	ldd	r18, Z+4	; 0x04
     c56:	35 81       	ldd	r19, Z+5	; 0x05
     c58:	46 81       	ldd	r20, Z+6	; 0x06
     c5a:	57 81       	ldd	r21, Z+7	; 0x07
     c5c:	28 17       	cp	r18, r24
     c5e:	39 07       	cpc	r19, r25
     c60:	4a 07       	cpc	r20, r26
     c62:	5b 07       	cpc	r21, r27
     c64:	18 f4       	brcc	.+6      	; 0xc6c <__fpcmp_parts_f+0x8e>
     c66:	11 23       	and	r17, r17
     c68:	41 f0       	breq	.+16     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c6a:	0a c0       	rjmp	.+20     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c6c:	82 17       	cp	r24, r18
     c6e:	93 07       	cpc	r25, r19
     c70:	a4 07       	cpc	r26, r20
     c72:	b5 07       	cpc	r27, r21
     c74:	40 f4       	brcc	.+16     	; 0xc86 <__fpcmp_parts_f+0xa8>
     c76:	11 23       	and	r17, r17
     c78:	19 f0       	breq	.+6      	; 0xc80 <__fpcmp_parts_f+0xa2>
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	05 c0       	rjmp	.+10     	; 0xc8a <__fpcmp_parts_f+0xac>
     c80:	6f ef       	ldi	r22, 0xFF	; 255
     c82:	7f ef       	ldi	r23, 0xFF	; 255
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <__fpcmp_parts_f+0xac>
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	cb 01       	movw	r24, r22
     c8c:	1f 91       	pop	r17
     c8e:	08 95       	ret

00000c90 <CLCD_voidSendData>:
#include "CLCD_Config.h"
#include "CLCD_Private.h"


void CLCD_voidSendData(u8 Copy_u8Data)
{
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
     c98:	2f 97       	sbiw	r28, 0x0f	; 15
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	8f 87       	std	Y+15, r24	; 0x0f
    //Set rs pin to high for send data
    DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_RS_PORT , DIO_u8HIGH);
     ca6:	82 e0       	ldi	r24, 0x02	; 2
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	41 e0       	ldi	r20, 0x01	; 1
     cac:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <DIO_voidSetPinValue>

    //Set rw pin to low for write
    DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_RW_PORT , DIO_u8LOW);
     cb0:	82 e0       	ldi	r24, 0x02	; 2
     cb2:	61 e0       	ldi	r22, 0x01	; 1
     cb4:	40 e0       	ldi	r20, 0x00	; 0
     cb6:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <DIO_voidSetPinValue>

    //Put data
    DIO_voidSetPortValue(CLCD_DATA_PORT , Copy_u8Data);
     cba:	83 e0       	ldi	r24, 0x03	; 3
     cbc:	6f 85       	ldd	r22, Y+15	; 0x0f
     cbe:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <DIO_voidSetPortValue>

    //generate enable pulse
    DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_E_PORT , DIO_u8HIGH);
     cc2:	82 e0       	ldi	r24, 0x02	; 2
     cc4:	62 e0       	ldi	r22, 0x02	; 2
     cc6:	41 e0       	ldi	r20, 0x01	; 1
     cc8:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <DIO_voidSetPinValue>
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	a0 e0       	ldi	r26, 0x00	; 0
     cd2:	b0 e4       	ldi	r27, 0x40	; 64
     cd4:	8b 87       	std	Y+11, r24	; 0x0b
     cd6:	9c 87       	std	Y+12, r25	; 0x0c
     cd8:	ad 87       	std	Y+13, r26	; 0x0d
     cda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cdc:	6b 85       	ldd	r22, Y+11	; 0x0b
     cde:	7c 85       	ldd	r23, Y+12	; 0x0c
     ce0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ce2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	4a ef       	ldi	r20, 0xFA	; 250
     cea:	54 e4       	ldi	r21, 0x44	; 68
     cec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cf0:	dc 01       	movw	r26, r24
     cf2:	cb 01       	movw	r24, r22
     cf4:	8f 83       	std	Y+7, r24	; 0x07
     cf6:	98 87       	std	Y+8, r25	; 0x08
     cf8:	a9 87       	std	Y+9, r26	; 0x09
     cfa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cfc:	6f 81       	ldd	r22, Y+7	; 0x07
     cfe:	78 85       	ldd	r23, Y+8	; 0x08
     d00:	89 85       	ldd	r24, Y+9	; 0x09
     d02:	9a 85       	ldd	r25, Y+10	; 0x0a
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e8       	ldi	r20, 0x80	; 128
     d0a:	5f e3       	ldi	r21, 0x3F	; 63
     d0c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d10:	88 23       	and	r24, r24
     d12:	2c f4       	brge	.+10     	; 0xd1e <CLCD_voidSendData+0x8e>
		__ticks = 1;
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	9e 83       	std	Y+6, r25	; 0x06
     d1a:	8d 83       	std	Y+5, r24	; 0x05
     d1c:	3f c0       	rjmp	.+126    	; 0xd9c <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     d1e:	6f 81       	ldd	r22, Y+7	; 0x07
     d20:	78 85       	ldd	r23, Y+8	; 0x08
     d22:	89 85       	ldd	r24, Y+9	; 0x09
     d24:	9a 85       	ldd	r25, Y+10	; 0x0a
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	3f ef       	ldi	r19, 0xFF	; 255
     d2a:	4f e7       	ldi	r20, 0x7F	; 127
     d2c:	57 e4       	ldi	r21, 0x47	; 71
     d2e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d32:	18 16       	cp	r1, r24
     d34:	4c f5       	brge	.+82     	; 0xd88 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d36:	6b 85       	ldd	r22, Y+11	; 0x0b
     d38:	7c 85       	ldd	r23, Y+12	; 0x0c
     d3a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d3c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	40 e2       	ldi	r20, 0x20	; 32
     d44:	51 e4       	ldi	r21, 0x41	; 65
     d46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d4a:	dc 01       	movw	r26, r24
     d4c:	cb 01       	movw	r24, r22
     d4e:	bc 01       	movw	r22, r24
     d50:	cd 01       	movw	r24, r26
     d52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	9e 83       	std	Y+6, r25	; 0x06
     d5c:	8d 83       	std	Y+5, r24	; 0x05
     d5e:	0f c0       	rjmp	.+30     	; 0xd7e <CLCD_voidSendData+0xee>
     d60:	88 ec       	ldi	r24, 0xC8	; 200
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	9c 83       	std	Y+4, r25	; 0x04
     d66:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	9c 81       	ldd	r25, Y+4	; 0x04
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	f1 f7       	brne	.-4      	; 0xd6c <CLCD_voidSendData+0xdc>
     d70:	9c 83       	std	Y+4, r25	; 0x04
     d72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d74:	8d 81       	ldd	r24, Y+5	; 0x05
     d76:	9e 81       	ldd	r25, Y+6	; 0x06
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	9e 83       	std	Y+6, r25	; 0x06
     d7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d7e:	8d 81       	ldd	r24, Y+5	; 0x05
     d80:	9e 81       	ldd	r25, Y+6	; 0x06
     d82:	00 97       	sbiw	r24, 0x00	; 0
     d84:	69 f7       	brne	.-38     	; 0xd60 <CLCD_voidSendData+0xd0>
     d86:	14 c0       	rjmp	.+40     	; 0xdb0 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d88:	6f 81       	ldd	r22, Y+7	; 0x07
     d8a:	78 85       	ldd	r23, Y+8	; 0x08
     d8c:	89 85       	ldd	r24, Y+9	; 0x09
     d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
     d98:	9e 83       	std	Y+6, r25	; 0x06
     d9a:	8d 83       	std	Y+5, r24	; 0x05
     d9c:	8d 81       	ldd	r24, Y+5	; 0x05
     d9e:	9e 81       	ldd	r25, Y+6	; 0x06
     da0:	9a 83       	std	Y+2, r25	; 0x02
     da2:	89 83       	std	Y+1, r24	; 0x01
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	9a 81       	ldd	r25, Y+2	; 0x02
     da8:	01 97       	sbiw	r24, 0x01	; 1
     daa:	f1 f7       	brne	.-4      	; 0xda8 <CLCD_voidSendData+0x118>
     dac:	9a 83       	std	Y+2, r25	; 0x02
     dae:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_E_PORT , DIO_u8LOW);
     db0:	82 e0       	ldi	r24, 0x02	; 2
     db2:	62 e0       	ldi	r22, 0x02	; 2
     db4:	40 e0       	ldi	r20, 0x00	; 0
     db6:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <DIO_voidSetPinValue>

}
     dba:	2f 96       	adiw	r28, 0x0f	; 15
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	cf 91       	pop	r28
     dc8:	df 91       	pop	r29
     dca:	08 95       	ret

00000dcc <CLCD_voidSendCommand>:
void CLCD_voidSendCommand(u8 Copy_u8DCommand)
{
     dcc:	df 93       	push	r29
     dce:	cf 93       	push	r28
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
     dd4:	2f 97       	sbiw	r28, 0x0f	; 15
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	f8 94       	cli
     dda:	de bf       	out	0x3e, r29	; 62
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	cd bf       	out	0x3d, r28	; 61
     de0:	8f 87       	std	Y+15, r24	; 0x0f
    //Set rs pin to high for send data
    DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_RS_PORT , DIO_u8LOW);
     de2:	82 e0       	ldi	r24, 0x02	; 2
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	40 e0       	ldi	r20, 0x00	; 0
     de8:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <DIO_voidSetPinValue>

    //Set rw pin to low for write
    DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_RW_PORT , DIO_u8LOW);
     dec:	82 e0       	ldi	r24, 0x02	; 2
     dee:	61 e0       	ldi	r22, 0x01	; 1
     df0:	40 e0       	ldi	r20, 0x00	; 0
     df2:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <DIO_voidSetPinValue>

    //Put data
    DIO_voidSetPortValue(CLCD_DATA_PORT , Copy_u8DCommand);
     df6:	83 e0       	ldi	r24, 0x03	; 3
     df8:	6f 85       	ldd	r22, Y+15	; 0x0f
     dfa:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <DIO_voidSetPortValue>

    //generate enable pulse
    DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_E_PORT , DIO_u8HIGH);
     dfe:	82 e0       	ldi	r24, 0x02	; 2
     e00:	62 e0       	ldi	r22, 0x02	; 2
     e02:	41 e0       	ldi	r20, 0x01	; 1
     e04:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <DIO_voidSetPinValue>
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	a0 e0       	ldi	r26, 0x00	; 0
     e0e:	b0 e4       	ldi	r27, 0x40	; 64
     e10:	8b 87       	std	Y+11, r24	; 0x0b
     e12:	9c 87       	std	Y+12, r25	; 0x0c
     e14:	ad 87       	std	Y+13, r26	; 0x0d
     e16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e18:	6b 85       	ldd	r22, Y+11	; 0x0b
     e1a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e1e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	4a ef       	ldi	r20, 0xFA	; 250
     e26:	54 e4       	ldi	r21, 0x44	; 68
     e28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e2c:	dc 01       	movw	r26, r24
     e2e:	cb 01       	movw	r24, r22
     e30:	8f 83       	std	Y+7, r24	; 0x07
     e32:	98 87       	std	Y+8, r25	; 0x08
     e34:	a9 87       	std	Y+9, r26	; 0x09
     e36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e38:	6f 81       	ldd	r22, Y+7	; 0x07
     e3a:	78 85       	ldd	r23, Y+8	; 0x08
     e3c:	89 85       	ldd	r24, Y+9	; 0x09
     e3e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	40 e8       	ldi	r20, 0x80	; 128
     e46:	5f e3       	ldi	r21, 0x3F	; 63
     e48:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e4c:	88 23       	and	r24, r24
     e4e:	2c f4       	brge	.+10     	; 0xe5a <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	9e 83       	std	Y+6, r25	; 0x06
     e56:	8d 83       	std	Y+5, r24	; 0x05
     e58:	3f c0       	rjmp	.+126    	; 0xed8 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     e5a:	6f 81       	ldd	r22, Y+7	; 0x07
     e5c:	78 85       	ldd	r23, Y+8	; 0x08
     e5e:	89 85       	ldd	r24, Y+9	; 0x09
     e60:	9a 85       	ldd	r25, Y+10	; 0x0a
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	3f ef       	ldi	r19, 0xFF	; 255
     e66:	4f e7       	ldi	r20, 0x7F	; 127
     e68:	57 e4       	ldi	r21, 0x47	; 71
     e6a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e6e:	18 16       	cp	r1, r24
     e70:	4c f5       	brge	.+82     	; 0xec4 <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e72:	6b 85       	ldd	r22, Y+11	; 0x0b
     e74:	7c 85       	ldd	r23, Y+12	; 0x0c
     e76:	8d 85       	ldd	r24, Y+13	; 0x0d
     e78:	9e 85       	ldd	r25, Y+14	; 0x0e
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	40 e2       	ldi	r20, 0x20	; 32
     e80:	51 e4       	ldi	r21, 0x41	; 65
     e82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e86:	dc 01       	movw	r26, r24
     e88:	cb 01       	movw	r24, r22
     e8a:	bc 01       	movw	r22, r24
     e8c:	cd 01       	movw	r24, r26
     e8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e92:	dc 01       	movw	r26, r24
     e94:	cb 01       	movw	r24, r22
     e96:	9e 83       	std	Y+6, r25	; 0x06
     e98:	8d 83       	std	Y+5, r24	; 0x05
     e9a:	0f c0       	rjmp	.+30     	; 0xeba <CLCD_voidSendCommand+0xee>
     e9c:	88 ec       	ldi	r24, 0xC8	; 200
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	9c 83       	std	Y+4, r25	; 0x04
     ea2:	8b 83       	std	Y+3, r24	; 0x03
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	9c 81       	ldd	r25, Y+4	; 0x04
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	f1 f7       	brne	.-4      	; 0xea8 <CLCD_voidSendCommand+0xdc>
     eac:	9c 83       	std	Y+4, r25	; 0x04
     eae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb0:	8d 81       	ldd	r24, Y+5	; 0x05
     eb2:	9e 81       	ldd	r25, Y+6	; 0x06
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	9e 83       	std	Y+6, r25	; 0x06
     eb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eba:	8d 81       	ldd	r24, Y+5	; 0x05
     ebc:	9e 81       	ldd	r25, Y+6	; 0x06
     ebe:	00 97       	sbiw	r24, 0x00	; 0
     ec0:	69 f7       	brne	.-38     	; 0xe9c <CLCD_voidSendCommand+0xd0>
     ec2:	14 c0       	rjmp	.+40     	; 0xeec <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ec4:	6f 81       	ldd	r22, Y+7	; 0x07
     ec6:	78 85       	ldd	r23, Y+8	; 0x08
     ec8:	89 85       	ldd	r24, Y+9	; 0x09
     eca:	9a 85       	ldd	r25, Y+10	; 0x0a
     ecc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	9e 83       	std	Y+6, r25	; 0x06
     ed6:	8d 83       	std	Y+5, r24	; 0x05
     ed8:	8d 81       	ldd	r24, Y+5	; 0x05
     eda:	9e 81       	ldd	r25, Y+6	; 0x06
     edc:	9a 83       	std	Y+2, r25	; 0x02
     ede:	89 83       	std	Y+1, r24	; 0x01
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	9a 81       	ldd	r25, Y+2	; 0x02
     ee4:	01 97       	sbiw	r24, 0x01	; 1
     ee6:	f1 f7       	brne	.-4      	; 0xee4 <CLCD_voidSendCommand+0x118>
     ee8:	9a 83       	std	Y+2, r25	; 0x02
     eea:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_E_PORT , DIO_u8LOW);
     eec:	82 e0       	ldi	r24, 0x02	; 2
     eee:	62 e0       	ldi	r22, 0x02	; 2
     ef0:	40 e0       	ldi	r20, 0x00	; 0
     ef2:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <DIO_voidSetPinValue>
}
     ef6:	2f 96       	adiw	r28, 0x0f	; 15
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	de bf       	out	0x3e, r29	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	cd bf       	out	0x3d, r28	; 61
     f02:	cf 91       	pop	r28
     f04:	df 91       	pop	r29
     f06:	08 95       	ret

00000f08 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	2e 97       	sbiw	r28, 0x0e	; 14
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPortDirection(CLCD_DATA_PORT , DIO_u8PORTOUTPUT);
     f1c:	83 e0       	ldi	r24, 0x03	; 3
     f1e:	6f ef       	ldi	r22, 0xFF	; 255
     f20:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <DIO_voidSetPortDirection>

	DIO_voidSetPinDirection(CLCD_CTRL_PORT , CLCD_RS_PORT , DIO_u8OUTPUT);
     f24:	82 e0       	ldi	r24, 0x02	; 2
     f26:	60 e0       	ldi	r22, 0x00	; 0
     f28:	41 e0       	ldi	r20, 0x01	; 1
     f2a:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CLCD_CTRL_PORT , CLCD_RW_PORT , DIO_u8OUTPUT);
     f2e:	82 e0       	ldi	r24, 0x02	; 2
     f30:	61 e0       	ldi	r22, 0x01	; 1
     f32:	41 e0       	ldi	r20, 0x01	; 1
     f34:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CLCD_CTRL_PORT , CLCD_E_PORT , DIO_u8OUTPUT);
     f38:	82 e0       	ldi	r24, 0x02	; 2
     f3a:	62 e0       	ldi	r22, 0x02	; 2
     f3c:	41 e0       	ldi	r20, 0x01	; 1
     f3e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <DIO_voidSetPinDirection>
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	a0 e2       	ldi	r26, 0x20	; 32
     f48:	b2 e4       	ldi	r27, 0x42	; 66
     f4a:	8b 87       	std	Y+11, r24	; 0x0b
     f4c:	9c 87       	std	Y+12, r25	; 0x0c
     f4e:	ad 87       	std	Y+13, r26	; 0x0d
     f50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f52:	6b 85       	ldd	r22, Y+11	; 0x0b
     f54:	7c 85       	ldd	r23, Y+12	; 0x0c
     f56:	8d 85       	ldd	r24, Y+13	; 0x0d
     f58:	9e 85       	ldd	r25, Y+14	; 0x0e
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	4a ef       	ldi	r20, 0xFA	; 250
     f60:	54 e4       	ldi	r21, 0x44	; 68
     f62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f66:	dc 01       	movw	r26, r24
     f68:	cb 01       	movw	r24, r22
     f6a:	8f 83       	std	Y+7, r24	; 0x07
     f6c:	98 87       	std	Y+8, r25	; 0x08
     f6e:	a9 87       	std	Y+9, r26	; 0x09
     f70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f72:	6f 81       	ldd	r22, Y+7	; 0x07
     f74:	78 85       	ldd	r23, Y+8	; 0x08
     f76:	89 85       	ldd	r24, Y+9	; 0x09
     f78:	9a 85       	ldd	r25, Y+10	; 0x0a
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	40 e8       	ldi	r20, 0x80	; 128
     f80:	5f e3       	ldi	r21, 0x3F	; 63
     f82:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f86:	88 23       	and	r24, r24
     f88:	2c f4       	brge	.+10     	; 0xf94 <CLCD_voidInit+0x8c>
		__ticks = 1;
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	9e 83       	std	Y+6, r25	; 0x06
     f90:	8d 83       	std	Y+5, r24	; 0x05
     f92:	3f c0       	rjmp	.+126    	; 0x1012 <CLCD_voidInit+0x10a>
	else if (__tmp > 65535)
     f94:	6f 81       	ldd	r22, Y+7	; 0x07
     f96:	78 85       	ldd	r23, Y+8	; 0x08
     f98:	89 85       	ldd	r24, Y+9	; 0x09
     f9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	3f ef       	ldi	r19, 0xFF	; 255
     fa0:	4f e7       	ldi	r20, 0x7F	; 127
     fa2:	57 e4       	ldi	r21, 0x47	; 71
     fa4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     fa8:	18 16       	cp	r1, r24
     faa:	4c f5       	brge	.+82     	; 0xffe <CLCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fac:	6b 85       	ldd	r22, Y+11	; 0x0b
     fae:	7c 85       	ldd	r23, Y+12	; 0x0c
     fb0:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb2:	9e 85       	ldd	r25, Y+14	; 0x0e
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	40 e2       	ldi	r20, 0x20	; 32
     fba:	51 e4       	ldi	r21, 0x41	; 65
     fbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	bc 01       	movw	r22, r24
     fc6:	cd 01       	movw	r24, r26
     fc8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	9e 83       	std	Y+6, r25	; 0x06
     fd2:	8d 83       	std	Y+5, r24	; 0x05
     fd4:	0f c0       	rjmp	.+30     	; 0xff4 <CLCD_voidInit+0xec>
     fd6:	88 ec       	ldi	r24, 0xC8	; 200
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	9c 83       	std	Y+4, r25	; 0x04
     fdc:	8b 83       	std	Y+3, r24	; 0x03
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	9c 81       	ldd	r25, Y+4	; 0x04
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	f1 f7       	brne	.-4      	; 0xfe2 <CLCD_voidInit+0xda>
     fe6:	9c 83       	std	Y+4, r25	; 0x04
     fe8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fea:	8d 81       	ldd	r24, Y+5	; 0x05
     fec:	9e 81       	ldd	r25, Y+6	; 0x06
     fee:	01 97       	sbiw	r24, 0x01	; 1
     ff0:	9e 83       	std	Y+6, r25	; 0x06
     ff2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff4:	8d 81       	ldd	r24, Y+5	; 0x05
     ff6:	9e 81       	ldd	r25, Y+6	; 0x06
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	69 f7       	brne	.-38     	; 0xfd6 <CLCD_voidInit+0xce>
     ffc:	14 c0       	rjmp	.+40     	; 0x1026 <CLCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    1000:	78 85       	ldd	r23, Y+8	; 0x08
    1002:	89 85       	ldd	r24, Y+9	; 0x09
    1004:	9a 85       	ldd	r25, Y+10	; 0x0a
    1006:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	9e 83       	std	Y+6, r25	; 0x06
    1010:	8d 83       	std	Y+5, r24	; 0x05
    1012:	8d 81       	ldd	r24, Y+5	; 0x05
    1014:	9e 81       	ldd	r25, Y+6	; 0x06
    1016:	9a 83       	std	Y+2, r25	; 0x02
    1018:	89 83       	std	Y+1, r24	; 0x01
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	9a 81       	ldd	r25, Y+2	; 0x02
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	f1 f7       	brne	.-4      	; 0x101e <CLCD_voidInit+0x116>
    1022:	9a 83       	std	Y+2, r25	; 0x02
    1024:	89 83       	std	Y+1, r24	; 0x01

    //Wait for more than 30 ms
    _delay_ms(40);
    //Set Function
    CLCD_voidSendCommand(0b00111000);
    1026:	88 e3       	ldi	r24, 0x38	; 56
    1028:	0e 94 e6 06 	call	0xdcc	; 0xdcc <CLCD_voidSendCommand>
    //Display ON/OFF
    CLCD_voidSendCommand(0b00001111);
    102c:	8f e0       	ldi	r24, 0x0F	; 15
    102e:	0e 94 e6 06 	call	0xdcc	; 0xdcc <CLCD_voidSendCommand>
    //Display Clear
    CLCD_voidSendCommand(0b00000001);
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	0e 94 e6 06 	call	0xdcc	; 0xdcc <CLCD_voidSendCommand>
}
    1038:	2e 96       	adiw	r28, 0x0e	; 14
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <CLCD_voidSendString>:

void CLCD_voidSendString(const char *Copy_pString)
{
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	00 d0       	rcall	.+0      	; 0x1050 <CLCD_voidSendString+0x6>
    1050:	0f 92       	push	r0
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	9b 83       	std	Y+3, r25	; 0x03
    1058:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
    105a:	19 82       	std	Y+1, r1	; 0x01
    105c:	0e c0       	rjmp	.+28     	; 0x107a <CLCD_voidSendString+0x30>
	while(Copy_pString[Local_u8Counter] != '\0')
	{
		CLCD_voidSendData(Copy_pString[Local_u8Counter]);
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	9b 81       	ldd	r25, Y+3	; 0x03
    1068:	fc 01       	movw	r30, r24
    106a:	e2 0f       	add	r30, r18
    106c:	f3 1f       	adc	r31, r19
    106e:	80 81       	ld	r24, Z
    1070:	0e 94 48 06 	call	0xc90	; 0xc90 <CLCD_voidSendData>
		Local_u8Counter++;
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	8f 5f       	subi	r24, 0xFF	; 255
    1078:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char *Copy_pString)
{
	u8 Local_u8Counter=0;
	while(Copy_pString[Local_u8Counter] != '\0')
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	9b 81       	ldd	r25, Y+3	; 0x03
    1084:	fc 01       	movw	r30, r24
    1086:	e2 0f       	add	r30, r18
    1088:	f3 1f       	adc	r31, r19
    108a:	80 81       	ld	r24, Z
    108c:	88 23       	and	r24, r24
    108e:	39 f7       	brne	.-50     	; 0x105e <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <CLCD_voidSendInteger>:


void CLCD_voidSendInteger(u32 Copy_u32Integer)
{
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	60 97       	sbiw	r28, 0x10	; 16
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	6d 87       	std	Y+13, r22	; 0x0d
    10b6:	7e 87       	std	Y+14, r23	; 0x0e
    10b8:	8f 87       	std	Y+15, r24	; 0x0f
    10ba:	98 8b       	std	Y+16, r25	; 0x10
	u8 Local_u8Number[10];
	u8 i=0;
    10bc:	1a 82       	std	Y+2, r1	; 0x02
    10be:	2e c0       	rjmp	.+92     	; 0x111c <CLCD_voidSendInteger+0x80>
	while(Copy_u32Integer >= 10)
	{
		Local_u8Number[i] = Copy_u32Integer%10 + ZERO_ASCII;
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	08 2f       	mov	r16, r24
    10c4:	10 e0       	ldi	r17, 0x00	; 0
    10c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ca:	af 85       	ldd	r26, Y+15	; 0x0f
    10cc:	b8 89       	ldd	r27, Y+16	; 0x10
    10ce:	2a e0       	ldi	r18, 0x0A	; 10
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	40 e0       	ldi	r20, 0x00	; 0
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	bc 01       	movw	r22, r24
    10d8:	cd 01       	movw	r24, r26
    10da:	0e 94 9a 10 	call	0x2134	; 0x2134 <__udivmodsi4>
    10de:	dc 01       	movw	r26, r24
    10e0:	cb 01       	movw	r24, r22
    10e2:	28 2f       	mov	r18, r24
    10e4:	20 5d       	subi	r18, 0xD0	; 208
    10e6:	ce 01       	movw	r24, r28
    10e8:	03 96       	adiw	r24, 0x03	; 3
    10ea:	fc 01       	movw	r30, r24
    10ec:	e0 0f       	add	r30, r16
    10ee:	f1 1f       	adc	r31, r17
    10f0:	20 83       	st	Z, r18
		Copy_u32Integer = Copy_u32Integer/10;
    10f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10f6:	af 85       	ldd	r26, Y+15	; 0x0f
    10f8:	b8 89       	ldd	r27, Y+16	; 0x10
    10fa:	2a e0       	ldi	r18, 0x0A	; 10
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e0       	ldi	r20, 0x00	; 0
    1100:	50 e0       	ldi	r21, 0x00	; 0
    1102:	bc 01       	movw	r22, r24
    1104:	cd 01       	movw	r24, r26
    1106:	0e 94 9a 10 	call	0x2134	; 0x2134 <__udivmodsi4>
    110a:	da 01       	movw	r26, r20
    110c:	c9 01       	movw	r24, r18
    110e:	8d 87       	std	Y+13, r24	; 0x0d
    1110:	9e 87       	std	Y+14, r25	; 0x0e
    1112:	af 87       	std	Y+15, r26	; 0x0f
    1114:	b8 8b       	std	Y+16, r27	; 0x10
		i++;
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	8f 5f       	subi	r24, 0xFF	; 255
    111a:	8a 83       	std	Y+2, r24	; 0x02

void CLCD_voidSendInteger(u32 Copy_u32Integer)
{
	u8 Local_u8Number[10];
	u8 i=0;
	while(Copy_u32Integer >= 10)
    111c:	8d 85       	ldd	r24, Y+13	; 0x0d
    111e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1120:	af 85       	ldd	r26, Y+15	; 0x0f
    1122:	b8 89       	ldd	r27, Y+16	; 0x10
    1124:	8a 30       	cpi	r24, 0x0A	; 10
    1126:	91 05       	cpc	r25, r1
    1128:	a1 05       	cpc	r26, r1
    112a:	b1 05       	cpc	r27, r1
    112c:	48 f6       	brcc	.-110    	; 0x10c0 <CLCD_voidSendInteger+0x24>
	{
		Local_u8Number[i] = Copy_u32Integer%10 + ZERO_ASCII;
		Copy_u32Integer = Copy_u32Integer/10;
		i++;
	}
	Local_u8Number[i] = Copy_u32Integer + ZERO_ASCII;
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	8d 85       	ldd	r24, Y+13	; 0x0d
    1136:	48 2f       	mov	r20, r24
    1138:	40 5d       	subi	r20, 0xD0	; 208
    113a:	ce 01       	movw	r24, r28
    113c:	03 96       	adiw	r24, 0x03	; 3
    113e:	fc 01       	movw	r30, r24
    1140:	e2 0f       	add	r30, r18
    1142:	f3 1f       	adc	r31, r19
    1144:	40 83       	st	Z, r20

	for(s8 j=i ; j>=0 ; j--)
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	89 83       	std	Y+1, r24	; 0x01
    114a:	10 c0       	rjmp	.+32     	; 0x116c <CLCD_voidSendInteger+0xd0>
	{
		CLCD_voidSendData(Local_u8Number[j]);
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	28 2f       	mov	r18, r24
    1150:	33 27       	eor	r19, r19
    1152:	27 fd       	sbrc	r18, 7
    1154:	30 95       	com	r19
    1156:	ce 01       	movw	r24, r28
    1158:	03 96       	adiw	r24, 0x03	; 3
    115a:	fc 01       	movw	r30, r24
    115c:	e2 0f       	add	r30, r18
    115e:	f3 1f       	adc	r31, r19
    1160:	80 81       	ld	r24, Z
    1162:	0e 94 48 06 	call	0xc90	; 0xc90 <CLCD_voidSendData>
		Copy_u32Integer = Copy_u32Integer/10;
		i++;
	}
	Local_u8Number[i] = Copy_u32Integer + ZERO_ASCII;

	for(s8 j=i ; j>=0 ; j--)
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	81 50       	subi	r24, 0x01	; 1
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	88 23       	and	r24, r24
    1170:	6c f7       	brge	.-38     	; 0x114c <CLCD_voidSendInteger+0xb0>
	{
		CLCD_voidSendData(Local_u8Number[j]);
	}
}
    1172:	60 96       	adiw	r28, 0x10	; 16
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	cd bf       	out	0x3d, r28	; 61
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	1f 91       	pop	r17
    1184:	0f 91       	pop	r16
    1186:	08 95       	ret

00001188 <CLCD_voidSetXYPosition>:



void CLCD_voidSetXYPosition(u8 Copy_u8XPositin , u8 Copy_u8YPositin)
{
    1188:	df 93       	push	r29
    118a:	cf 93       	push	r28
    118c:	00 d0       	rcall	.+0      	; 0x118e <CLCD_voidSetXYPosition+0x6>
    118e:	0f 92       	push	r0
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	8a 83       	std	Y+2, r24	; 0x02
    1196:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;

	if(Copy_u8YPositin == 0)
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	88 23       	and	r24, r24
    119c:	19 f4       	brne	.+6      	; 0x11a4 <CLCD_voidSetXYPosition+0x1c>
	{
		Local_u8Address = Copy_u8XPositin;
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	89 83       	std	Y+1, r24	; 0x01
    11a2:	06 c0       	rjmp	.+12     	; 0x11b0 <CLCD_voidSetXYPosition+0x28>
	}
	else if(Copy_u8YPositin == 1)
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	81 30       	cpi	r24, 0x01	; 1
    11a8:	19 f4       	brne	.+6      	; 0x11b0 <CLCD_voidSetXYPosition+0x28>
	{
		Local_u8Address = Copy_u8XPositin + 0x40;
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	80 5c       	subi	r24, 0xC0	; 192
    11ae:	89 83       	std	Y+1, r24	; 0x01
	}
	SET_BIT(Local_u8Address , 7);
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	80 68       	ori	r24, 0x80	; 128
    11b4:	89 83       	std	Y+1, r24	; 0x01

	CLCD_voidSendCommand(Local_u8Address);
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	0e 94 e6 06 	call	0xdcc	; 0xdcc <CLCD_voidSendCommand>
}
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	08 95       	ret

000011c8 <CLCD_voidScrollTextLeftToRight>:



void CLCD_voidScrollTextLeftToRight(char *Copy_u8Text)
{
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	63 97       	sbiw	r28, 0x13	; 19
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	de bf       	out	0x3e, r29	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	cd bf       	out	0x3d, r28	; 61
    11dc:	9b 8b       	std	Y+19, r25	; 0x13
    11de:	8a 8b       	std	Y+18, r24	; 0x12
	u8 STR_u8Lenght=0;
    11e0:	19 8a       	std	Y+17, r1	; 0x11
    11e2:	03 c0       	rjmp	.+6      	; 0x11ea <CLCD_voidScrollTextLeftToRight+0x22>
	while(Copy_u8Text[STR_u8Lenght] != '\0')
	{
		STR_u8Lenght++;
    11e4:	89 89       	ldd	r24, Y+17	; 0x11
    11e6:	8f 5f       	subi	r24, 0xFF	; 255
    11e8:	89 8b       	std	Y+17, r24	; 0x11


void CLCD_voidScrollTextLeftToRight(char *Copy_u8Text)
{
	u8 STR_u8Lenght=0;
	while(Copy_u8Text[STR_u8Lenght] != '\0')
    11ea:	89 89       	ldd	r24, Y+17	; 0x11
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	8a 89       	ldd	r24, Y+18	; 0x12
    11f2:	9b 89       	ldd	r25, Y+19	; 0x13
    11f4:	fc 01       	movw	r30, r24
    11f6:	e2 0f       	add	r30, r18
    11f8:	f3 1f       	adc	r31, r19
    11fa:	80 81       	ld	r24, Z
    11fc:	88 23       	and	r24, r24
    11fe:	91 f7       	brne	.-28     	; 0x11e4 <CLCD_voidScrollTextLeftToRight+0x1c>
	{
		STR_u8Lenght++;
	}

	for(s8 position = -STR_u8Lenght ; position<=16 ; position++)
    1200:	89 89       	ldd	r24, Y+17	; 0x11
    1202:	81 95       	neg	r24
    1204:	88 8b       	std	Y+16, r24	; 0x10
    1206:	b2 c0       	rjmp	.+356    	; 0x136c <CLCD_voidScrollTextLeftToRight+0x1a4>
	{
		CLCD_voidSendCommand(0x01);    //Clear Display
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <CLCD_voidSendCommand>
		if(position >= 0) CLCD_voidSetXYPosition(position , 0);
    120e:	88 89       	ldd	r24, Y+16	; 0x10
    1210:	88 23       	and	r24, r24
    1212:	2c f0       	brlt	.+10     	; 0x121e <CLCD_voidScrollTextLeftToRight+0x56>
    1214:	88 89       	ldd	r24, Y+16	; 0x10
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	0e 94 c4 08 	call	0x1188	; 0x1188 <CLCD_voidSetXYPosition>
    121c:	07 c0       	rjmp	.+14     	; 0x122c <CLCD_voidScrollTextLeftToRight+0x64>
		else if(position < 0) CLCD_voidSetXYPosition(0 , 0);
    121e:	88 89       	ldd	r24, Y+16	; 0x10
    1220:	88 23       	and	r24, r24
    1222:	24 f4       	brge	.+8      	; 0x122c <CLCD_voidScrollTextLeftToRight+0x64>
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	0e 94 c4 08 	call	0x1188	; 0x1188 <CLCD_voidSetXYPosition>

		for(u8 i=0 ; i<STR_u8Lenght ; i++)
    122c:	1f 86       	std	Y+15, r1	; 0x0f
    122e:	25 c0       	rjmp	.+74     	; 0x127a <CLCD_voidScrollTextLeftToRight+0xb2>
		{
			if(i + position >= 0 && i + position < 16 )
    1230:	8f 85       	ldd	r24, Y+15	; 0x0f
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	88 89       	ldd	r24, Y+16	; 0x10
    1238:	99 27       	eor	r25, r25
    123a:	87 fd       	sbrc	r24, 7
    123c:	90 95       	com	r25
    123e:	82 0f       	add	r24, r18
    1240:	93 1f       	adc	r25, r19
    1242:	99 23       	and	r25, r25
    1244:	bc f0       	brlt	.+46     	; 0x1274 <CLCD_voidScrollTextLeftToRight+0xac>
    1246:	8f 85       	ldd	r24, Y+15	; 0x0f
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	88 89       	ldd	r24, Y+16	; 0x10
    124e:	99 27       	eor	r25, r25
    1250:	87 fd       	sbrc	r24, 7
    1252:	90 95       	com	r25
    1254:	82 0f       	add	r24, r18
    1256:	93 1f       	adc	r25, r19
    1258:	80 31       	cpi	r24, 0x10	; 16
    125a:	91 05       	cpc	r25, r1
    125c:	5c f4       	brge	.+22     	; 0x1274 <CLCD_voidScrollTextLeftToRight+0xac>
			{
				CLCD_voidSendData(Copy_u8Text[i]);
    125e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	8a 89       	ldd	r24, Y+18	; 0x12
    1266:	9b 89       	ldd	r25, Y+19	; 0x13
    1268:	fc 01       	movw	r30, r24
    126a:	e2 0f       	add	r30, r18
    126c:	f3 1f       	adc	r31, r19
    126e:	80 81       	ld	r24, Z
    1270:	0e 94 48 06 	call	0xc90	; 0xc90 <CLCD_voidSendData>
	{
		CLCD_voidSendCommand(0x01);    //Clear Display
		if(position >= 0) CLCD_voidSetXYPosition(position , 0);
		else if(position < 0) CLCD_voidSetXYPosition(0 , 0);

		for(u8 i=0 ; i<STR_u8Lenght ; i++)
    1274:	8f 85       	ldd	r24, Y+15	; 0x0f
    1276:	8f 5f       	subi	r24, 0xFF	; 255
    1278:	8f 87       	std	Y+15, r24	; 0x0f
    127a:	9f 85       	ldd	r25, Y+15	; 0x0f
    127c:	89 89       	ldd	r24, Y+17	; 0x11
    127e:	98 17       	cp	r25, r24
    1280:	b8 f2       	brcs	.-82     	; 0x1230 <CLCD_voidScrollTextLeftToRight+0x68>
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	a6 e9       	ldi	r26, 0x96	; 150
    1288:	b3 e4       	ldi	r27, 0x43	; 67
    128a:	8b 87       	std	Y+11, r24	; 0x0b
    128c:	9c 87       	std	Y+12, r25	; 0x0c
    128e:	ad 87       	std	Y+13, r26	; 0x0d
    1290:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1292:	6b 85       	ldd	r22, Y+11	; 0x0b
    1294:	7c 85       	ldd	r23, Y+12	; 0x0c
    1296:	8d 85       	ldd	r24, Y+13	; 0x0d
    1298:	9e 85       	ldd	r25, Y+14	; 0x0e
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	4a ef       	ldi	r20, 0xFA	; 250
    12a0:	54 e4       	ldi	r21, 0x44	; 68
    12a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	8f 83       	std	Y+7, r24	; 0x07
    12ac:	98 87       	std	Y+8, r25	; 0x08
    12ae:	a9 87       	std	Y+9, r26	; 0x09
    12b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12b2:	6f 81       	ldd	r22, Y+7	; 0x07
    12b4:	78 85       	ldd	r23, Y+8	; 0x08
    12b6:	89 85       	ldd	r24, Y+9	; 0x09
    12b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	40 e8       	ldi	r20, 0x80	; 128
    12c0:	5f e3       	ldi	r21, 0x3F	; 63
    12c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12c6:	88 23       	and	r24, r24
    12c8:	2c f4       	brge	.+10     	; 0x12d4 <CLCD_voidScrollTextLeftToRight+0x10c>
		__ticks = 1;
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	9e 83       	std	Y+6, r25	; 0x06
    12d0:	8d 83       	std	Y+5, r24	; 0x05
    12d2:	3f c0       	rjmp	.+126    	; 0x1352 <CLCD_voidScrollTextLeftToRight+0x18a>
	else if (__tmp > 65535)
    12d4:	6f 81       	ldd	r22, Y+7	; 0x07
    12d6:	78 85       	ldd	r23, Y+8	; 0x08
    12d8:	89 85       	ldd	r24, Y+9	; 0x09
    12da:	9a 85       	ldd	r25, Y+10	; 0x0a
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	3f ef       	ldi	r19, 0xFF	; 255
    12e0:	4f e7       	ldi	r20, 0x7F	; 127
    12e2:	57 e4       	ldi	r21, 0x47	; 71
    12e4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12e8:	18 16       	cp	r1, r24
    12ea:	4c f5       	brge	.+82     	; 0x133e <CLCD_voidScrollTextLeftToRight+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    12f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	40 e2       	ldi	r20, 0x20	; 32
    12fa:	51 e4       	ldi	r21, 0x41	; 65
    12fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	bc 01       	movw	r22, r24
    1306:	cd 01       	movw	r24, r26
    1308:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	9e 83       	std	Y+6, r25	; 0x06
    1312:	8d 83       	std	Y+5, r24	; 0x05
    1314:	0f c0       	rjmp	.+30     	; 0x1334 <CLCD_voidScrollTextLeftToRight+0x16c>
    1316:	88 ec       	ldi	r24, 0xC8	; 200
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	9c 83       	std	Y+4, r25	; 0x04
    131c:	8b 83       	std	Y+3, r24	; 0x03
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	9c 81       	ldd	r25, Y+4	; 0x04
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	f1 f7       	brne	.-4      	; 0x1322 <CLCD_voidScrollTextLeftToRight+0x15a>
    1326:	9c 83       	std	Y+4, r25	; 0x04
    1328:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132a:	8d 81       	ldd	r24, Y+5	; 0x05
    132c:	9e 81       	ldd	r25, Y+6	; 0x06
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	9e 83       	std	Y+6, r25	; 0x06
    1332:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1334:	8d 81       	ldd	r24, Y+5	; 0x05
    1336:	9e 81       	ldd	r25, Y+6	; 0x06
    1338:	00 97       	sbiw	r24, 0x00	; 0
    133a:	69 f7       	brne	.-38     	; 0x1316 <CLCD_voidScrollTextLeftToRight+0x14e>
    133c:	14 c0       	rjmp	.+40     	; 0x1366 <CLCD_voidScrollTextLeftToRight+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    133e:	6f 81       	ldd	r22, Y+7	; 0x07
    1340:	78 85       	ldd	r23, Y+8	; 0x08
    1342:	89 85       	ldd	r24, Y+9	; 0x09
    1344:	9a 85       	ldd	r25, Y+10	; 0x0a
    1346:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	9e 83       	std	Y+6, r25	; 0x06
    1350:	8d 83       	std	Y+5, r24	; 0x05
    1352:	8d 81       	ldd	r24, Y+5	; 0x05
    1354:	9e 81       	ldd	r25, Y+6	; 0x06
    1356:	9a 83       	std	Y+2, r25	; 0x02
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	9a 81       	ldd	r25, Y+2	; 0x02
    135e:	01 97       	sbiw	r24, 0x01	; 1
    1360:	f1 f7       	brne	.-4      	; 0x135e <CLCD_voidScrollTextLeftToRight+0x196>
    1362:	9a 83       	std	Y+2, r25	; 0x02
    1364:	89 83       	std	Y+1, r24	; 0x01
	while(Copy_u8Text[STR_u8Lenght] != '\0')
	{
		STR_u8Lenght++;
	}

	for(s8 position = -STR_u8Lenght ; position<=16 ; position++)
    1366:	88 89       	ldd	r24, Y+16	; 0x10
    1368:	8f 5f       	subi	r24, 0xFF	; 255
    136a:	88 8b       	std	Y+16, r24	; 0x10
    136c:	88 89       	ldd	r24, Y+16	; 0x10
    136e:	81 31       	cpi	r24, 0x11	; 17
    1370:	0c f4       	brge	.+2      	; 0x1374 <CLCD_voidScrollTextLeftToRight+0x1ac>
    1372:	4a cf       	rjmp	.-364    	; 0x1208 <CLCD_voidScrollTextLeftToRight+0x40>
				CLCD_voidSendData(Copy_u8Text[i]);
			}
		}
		_delay_ms(300);
	}
}
    1374:	63 96       	adiw	r28, 0x13	; 19
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <CLCD_voidScrollTextRightToLeft>:


void CLCD_voidScrollTextRightToLeft(char *Copy_u8Text)
{
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	63 97       	sbiw	r28, 0x13	; 19
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	de bf       	out	0x3e, r29	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	cd bf       	out	0x3d, r28	; 61
    139a:	9b 8b       	std	Y+19, r25	; 0x13
    139c:	8a 8b       	std	Y+18, r24	; 0x12
    u8 STR_u8Length = 0;
    139e:	19 8a       	std	Y+17, r1	; 0x11
    13a0:	03 c0       	rjmp	.+6      	; 0x13a8 <CLCD_voidScrollTextRightToLeft+0x22>

    while(Copy_u8Text[STR_u8Length] != '\0')
    {
        STR_u8Length++;
    13a2:	89 89       	ldd	r24, Y+17	; 0x11
    13a4:	8f 5f       	subi	r24, 0xFF	; 255
    13a6:	89 8b       	std	Y+17, r24	; 0x11

void CLCD_voidScrollTextRightToLeft(char *Copy_u8Text)
{
    u8 STR_u8Length = 0;

    while(Copy_u8Text[STR_u8Length] != '\0')
    13a8:	89 89       	ldd	r24, Y+17	; 0x11
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	8a 89       	ldd	r24, Y+18	; 0x12
    13b0:	9b 89       	ldd	r25, Y+19	; 0x13
    13b2:	fc 01       	movw	r30, r24
    13b4:	e2 0f       	add	r30, r18
    13b6:	f3 1f       	adc	r31, r19
    13b8:	80 81       	ld	r24, Z
    13ba:	88 23       	and	r24, r24
    13bc:	91 f7       	brne	.-28     	; 0x13a2 <CLCD_voidScrollTextRightToLeft+0x1c>
    {
        STR_u8Length++;
    }

    for(s8 position = 16; position >= -STR_u8Length; position--)
    13be:	80 e1       	ldi	r24, 0x10	; 16
    13c0:	88 8b       	std	Y+16, r24	; 0x10
    13c2:	af c0       	rjmp	.+350    	; 0x1522 <CLCD_voidScrollTextRightToLeft+0x19c>
    {
        CLCD_voidSendCommand(0x01);  //Clear display
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	0e 94 e6 06 	call	0xdcc	; 0xdcc <CLCD_voidSendCommand>

        if(position >= 0)
    13ca:	88 89       	ldd	r24, Y+16	; 0x10
    13cc:	88 23       	and	r24, r24
    13ce:	2c f0       	brlt	.+10     	; 0x13da <CLCD_voidScrollTextRightToLeft+0x54>
        {
            CLCD_voidSetXYPosition(position, 0);
    13d0:	88 89       	ldd	r24, Y+16	; 0x10
    13d2:	60 e0       	ldi	r22, 0x00	; 0
    13d4:	0e 94 c4 08 	call	0x1188	; 0x1188 <CLCD_voidSetXYPosition>
    13d8:	04 c0       	rjmp	.+8      	; 0x13e2 <CLCD_voidScrollTextRightToLeft+0x5c>
        }
        else
        {
            CLCD_voidSetXYPosition(0, 0);
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	60 e0       	ldi	r22, 0x00	; 0
    13de:	0e 94 c4 08 	call	0x1188	; 0x1188 <CLCD_voidSetXYPosition>
        }

        for (u8 i = 0; i < STR_u8Length; i++)
    13e2:	1f 86       	std	Y+15, r1	; 0x0f
    13e4:	25 c0       	rjmp	.+74     	; 0x1430 <CLCD_voidScrollTextRightToLeft+0xaa>
        {
            if (i + position >= 0 && i + position < 16)
    13e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	88 89       	ldd	r24, Y+16	; 0x10
    13ee:	99 27       	eor	r25, r25
    13f0:	87 fd       	sbrc	r24, 7
    13f2:	90 95       	com	r25
    13f4:	82 0f       	add	r24, r18
    13f6:	93 1f       	adc	r25, r19
    13f8:	99 23       	and	r25, r25
    13fa:	bc f0       	brlt	.+46     	; 0x142a <CLCD_voidScrollTextRightToLeft+0xa4>
    13fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	88 89       	ldd	r24, Y+16	; 0x10
    1404:	99 27       	eor	r25, r25
    1406:	87 fd       	sbrc	r24, 7
    1408:	90 95       	com	r25
    140a:	82 0f       	add	r24, r18
    140c:	93 1f       	adc	r25, r19
    140e:	80 31       	cpi	r24, 0x10	; 16
    1410:	91 05       	cpc	r25, r1
    1412:	5c f4       	brge	.+22     	; 0x142a <CLCD_voidScrollTextRightToLeft+0xa4>
            {
                CLCD_voidSendData(Copy_u8Text[i]);
    1414:	8f 85       	ldd	r24, Y+15	; 0x0f
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	8a 89       	ldd	r24, Y+18	; 0x12
    141c:	9b 89       	ldd	r25, Y+19	; 0x13
    141e:	fc 01       	movw	r30, r24
    1420:	e2 0f       	add	r30, r18
    1422:	f3 1f       	adc	r31, r19
    1424:	80 81       	ld	r24, Z
    1426:	0e 94 48 06 	call	0xc90	; 0xc90 <CLCD_voidSendData>
        else
        {
            CLCD_voidSetXYPosition(0, 0);
        }

        for (u8 i = 0; i < STR_u8Length; i++)
    142a:	8f 85       	ldd	r24, Y+15	; 0x0f
    142c:	8f 5f       	subi	r24, 0xFF	; 255
    142e:	8f 87       	std	Y+15, r24	; 0x0f
    1430:	9f 85       	ldd	r25, Y+15	; 0x0f
    1432:	89 89       	ldd	r24, Y+17	; 0x11
    1434:	98 17       	cp	r25, r24
    1436:	b8 f2       	brcs	.-82     	; 0x13e6 <CLCD_voidScrollTextRightToLeft+0x60>
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	a6 e9       	ldi	r26, 0x96	; 150
    143e:	b3 e4       	ldi	r27, 0x43	; 67
    1440:	8b 87       	std	Y+11, r24	; 0x0b
    1442:	9c 87       	std	Y+12, r25	; 0x0c
    1444:	ad 87       	std	Y+13, r26	; 0x0d
    1446:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1448:	6b 85       	ldd	r22, Y+11	; 0x0b
    144a:	7c 85       	ldd	r23, Y+12	; 0x0c
    144c:	8d 85       	ldd	r24, Y+13	; 0x0d
    144e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	4a ef       	ldi	r20, 0xFA	; 250
    1456:	54 e4       	ldi	r21, 0x44	; 68
    1458:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	8f 83       	std	Y+7, r24	; 0x07
    1462:	98 87       	std	Y+8, r25	; 0x08
    1464:	a9 87       	std	Y+9, r26	; 0x09
    1466:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1468:	6f 81       	ldd	r22, Y+7	; 0x07
    146a:	78 85       	ldd	r23, Y+8	; 0x08
    146c:	89 85       	ldd	r24, Y+9	; 0x09
    146e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	40 e8       	ldi	r20, 0x80	; 128
    1476:	5f e3       	ldi	r21, 0x3F	; 63
    1478:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    147c:	88 23       	and	r24, r24
    147e:	2c f4       	brge	.+10     	; 0x148a <CLCD_voidScrollTextRightToLeft+0x104>
		__ticks = 1;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	9e 83       	std	Y+6, r25	; 0x06
    1486:	8d 83       	std	Y+5, r24	; 0x05
    1488:	3f c0       	rjmp	.+126    	; 0x1508 <CLCD_voidScrollTextRightToLeft+0x182>
	else if (__tmp > 65535)
    148a:	6f 81       	ldd	r22, Y+7	; 0x07
    148c:	78 85       	ldd	r23, Y+8	; 0x08
    148e:	89 85       	ldd	r24, Y+9	; 0x09
    1490:	9a 85       	ldd	r25, Y+10	; 0x0a
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	3f ef       	ldi	r19, 0xFF	; 255
    1496:	4f e7       	ldi	r20, 0x7F	; 127
    1498:	57 e4       	ldi	r21, 0x47	; 71
    149a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    149e:	18 16       	cp	r1, r24
    14a0:	4c f5       	brge	.+82     	; 0x14f4 <CLCD_voidScrollTextRightToLeft+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	40 e2       	ldi	r20, 0x20	; 32
    14b0:	51 e4       	ldi	r21, 0x41	; 65
    14b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	bc 01       	movw	r22, r24
    14bc:	cd 01       	movw	r24, r26
    14be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	9e 83       	std	Y+6, r25	; 0x06
    14c8:	8d 83       	std	Y+5, r24	; 0x05
    14ca:	0f c0       	rjmp	.+30     	; 0x14ea <CLCD_voidScrollTextRightToLeft+0x164>
    14cc:	88 ec       	ldi	r24, 0xC8	; 200
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	9c 83       	std	Y+4, r25	; 0x04
    14d2:	8b 83       	std	Y+3, r24	; 0x03
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	f1 f7       	brne	.-4      	; 0x14d8 <CLCD_voidScrollTextRightToLeft+0x152>
    14dc:	9c 83       	std	Y+4, r25	; 0x04
    14de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e0:	8d 81       	ldd	r24, Y+5	; 0x05
    14e2:	9e 81       	ldd	r25, Y+6	; 0x06
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	9e 83       	std	Y+6, r25	; 0x06
    14e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ea:	8d 81       	ldd	r24, Y+5	; 0x05
    14ec:	9e 81       	ldd	r25, Y+6	; 0x06
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	69 f7       	brne	.-38     	; 0x14cc <CLCD_voidScrollTextRightToLeft+0x146>
    14f2:	14 c0       	rjmp	.+40     	; 0x151c <CLCD_voidScrollTextRightToLeft+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f4:	6f 81       	ldd	r22, Y+7	; 0x07
    14f6:	78 85       	ldd	r23, Y+8	; 0x08
    14f8:	89 85       	ldd	r24, Y+9	; 0x09
    14fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	9e 83       	std	Y+6, r25	; 0x06
    1506:	8d 83       	std	Y+5, r24	; 0x05
    1508:	8d 81       	ldd	r24, Y+5	; 0x05
    150a:	9e 81       	ldd	r25, Y+6	; 0x06
    150c:	9a 83       	std	Y+2, r25	; 0x02
    150e:	89 83       	std	Y+1, r24	; 0x01
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	9a 81       	ldd	r25, Y+2	; 0x02
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	f1 f7       	brne	.-4      	; 0x1514 <CLCD_voidScrollTextRightToLeft+0x18e>
    1518:	9a 83       	std	Y+2, r25	; 0x02
    151a:	89 83       	std	Y+1, r24	; 0x01
    while(Copy_u8Text[STR_u8Length] != '\0')
    {
        STR_u8Length++;
    }

    for(s8 position = 16; position >= -STR_u8Length; position--)
    151c:	88 89       	ldd	r24, Y+16	; 0x10
    151e:	81 50       	subi	r24, 0x01	; 1
    1520:	88 8b       	std	Y+16, r24	; 0x10
    1522:	88 89       	ldd	r24, Y+16	; 0x10
    1524:	28 2f       	mov	r18, r24
    1526:	33 27       	eor	r19, r19
    1528:	27 fd       	sbrc	r18, 7
    152a:	30 95       	com	r19
    152c:	89 89       	ldd	r24, Y+17	; 0x11
    152e:	88 2f       	mov	r24, r24
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	90 95       	com	r25
    1534:	81 95       	neg	r24
    1536:	9f 4f       	sbci	r25, 0xFF	; 255
    1538:	28 17       	cp	r18, r24
    153a:	39 07       	cpc	r19, r25
    153c:	0c f0       	brlt	.+2      	; 0x1540 <CLCD_voidScrollTextRightToLeft+0x1ba>
    153e:	42 cf       	rjmp	.-380    	; 0x13c4 <CLCD_voidScrollTextRightToLeft+0x3e>
            }
        }

        _delay_ms(300);
    }
}
    1540:	63 96       	adiw	r28, 0x13	; 19
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	de bf       	out	0x3e, r29	; 62
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	cd bf       	out	0x3d, r28	; 61
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	08 95       	ret

00001552 <CLCD_voidScrollTextSinsoidalwave>:


void CLCD_voidScrollTextSinsoidalwave(char *Copy_u8Text)
{
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    155a:	65 97       	sbiw	r28, 0x15	; 21
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	9b 8b       	std	Y+19, r25	; 0x13
    1568:	8a 8b       	std	Y+18, r24	; 0x12
	u8 STR_u8Lenght=0;
    156a:	19 8a       	std	Y+17, r1	; 0x11
    156c:	03 c0       	rjmp	.+6      	; 0x1574 <CLCD_voidScrollTextSinsoidalwave+0x22>
	while(Copy_u8Text[STR_u8Lenght] != '\0')
	{
		STR_u8Lenght++;
    156e:	89 89       	ldd	r24, Y+17	; 0x11
    1570:	8f 5f       	subi	r24, 0xFF	; 255
    1572:	89 8b       	std	Y+17, r24	; 0x11


void CLCD_voidScrollTextSinsoidalwave(char *Copy_u8Text)
{
	u8 STR_u8Lenght=0;
	while(Copy_u8Text[STR_u8Lenght] != '\0')
    1574:	89 89       	ldd	r24, Y+17	; 0x11
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	8a 89       	ldd	r24, Y+18	; 0x12
    157c:	9b 89       	ldd	r25, Y+19	; 0x13
    157e:	fc 01       	movw	r30, r24
    1580:	e2 0f       	add	r30, r18
    1582:	f3 1f       	adc	r31, r19
    1584:	80 81       	ld	r24, Z
    1586:	88 23       	and	r24, r24
    1588:	91 f7       	brne	.-28     	; 0x156e <CLCD_voidScrollTextSinsoidalwave+0x1c>
	{
		STR_u8Lenght++;
	}

	for(s8 position = -STR_u8Lenght ; position<=16 ; position++)
    158a:	89 89       	ldd	r24, Y+17	; 0x11
    158c:	81 95       	neg	r24
    158e:	88 8b       	std	Y+16, r24	; 0x10
    1590:	c6 c0       	rjmp	.+396    	; 0x171e <CLCD_voidScrollTextSinsoidalwave+0x1cc>
	{
		CLCD_voidSendCommand(0x01);    //Clear Display
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	0e 94 e6 06 	call	0xdcc	; 0xdcc <CLCD_voidSendCommand>
		if(position >= 0) CLCD_voidSetXYPosition(position , (position%2));
    1598:	88 89       	ldd	r24, Y+16	; 0x10
    159a:	88 23       	and	r24, r24
    159c:	cc f0       	brlt	.+50     	; 0x15d0 <CLCD_voidScrollTextSinsoidalwave+0x7e>
    159e:	88 89       	ldd	r24, Y+16	; 0x10
    15a0:	8c 8b       	std	Y+20, r24	; 0x14
    15a2:	88 89       	ldd	r24, Y+16	; 0x10
    15a4:	98 2f       	mov	r25, r24
    15a6:	91 78       	andi	r25, 0x81	; 129
    15a8:	9d 8b       	std	Y+21, r25	; 0x15
    15aa:	8d 89       	ldd	r24, Y+21	; 0x15
    15ac:	88 23       	and	r24, r24
    15ae:	4c f4       	brge	.+18     	; 0x15c2 <CLCD_voidScrollTextSinsoidalwave+0x70>
    15b0:	9d 89       	ldd	r25, Y+21	; 0x15
    15b2:	91 50       	subi	r25, 0x01	; 1
    15b4:	9d 8b       	std	Y+21, r25	; 0x15
    15b6:	8d 89       	ldd	r24, Y+21	; 0x15
    15b8:	8e 6f       	ori	r24, 0xFE	; 254
    15ba:	8d 8b       	std	Y+21, r24	; 0x15
    15bc:	9d 89       	ldd	r25, Y+21	; 0x15
    15be:	9f 5f       	subi	r25, 0xFF	; 255
    15c0:	9d 8b       	std	Y+21, r25	; 0x15
    15c2:	8d 89       	ldd	r24, Y+21	; 0x15
    15c4:	98 2f       	mov	r25, r24
    15c6:	8c 89       	ldd	r24, Y+20	; 0x14
    15c8:	69 2f       	mov	r22, r25
    15ca:	0e 94 c4 08 	call	0x1188	; 0x1188 <CLCD_voidSetXYPosition>
    15ce:	07 c0       	rjmp	.+14     	; 0x15de <CLCD_voidScrollTextSinsoidalwave+0x8c>
		else if(position < 0) CLCD_voidSetXYPosition(0 , 0);
    15d0:	88 89       	ldd	r24, Y+16	; 0x10
    15d2:	88 23       	and	r24, r24
    15d4:	24 f4       	brge	.+8      	; 0x15de <CLCD_voidScrollTextSinsoidalwave+0x8c>
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	0e 94 c4 08 	call	0x1188	; 0x1188 <CLCD_voidSetXYPosition>

		for(u8 i=0 ; i<STR_u8Lenght ; i++)
    15de:	1f 86       	std	Y+15, r1	; 0x0f
    15e0:	25 c0       	rjmp	.+74     	; 0x162c <CLCD_voidScrollTextSinsoidalwave+0xda>
		{
			if(i + position >= 0 && i + position < 16 )
    15e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	88 89       	ldd	r24, Y+16	; 0x10
    15ea:	99 27       	eor	r25, r25
    15ec:	87 fd       	sbrc	r24, 7
    15ee:	90 95       	com	r25
    15f0:	82 0f       	add	r24, r18
    15f2:	93 1f       	adc	r25, r19
    15f4:	99 23       	and	r25, r25
    15f6:	bc f0       	brlt	.+46     	; 0x1626 <CLCD_voidScrollTextSinsoidalwave+0xd4>
    15f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	88 89       	ldd	r24, Y+16	; 0x10
    1600:	99 27       	eor	r25, r25
    1602:	87 fd       	sbrc	r24, 7
    1604:	90 95       	com	r25
    1606:	82 0f       	add	r24, r18
    1608:	93 1f       	adc	r25, r19
    160a:	80 31       	cpi	r24, 0x10	; 16
    160c:	91 05       	cpc	r25, r1
    160e:	5c f4       	brge	.+22     	; 0x1626 <CLCD_voidScrollTextSinsoidalwave+0xd4>
			{
				CLCD_voidSendData(Copy_u8Text[i]);
    1610:	8f 85       	ldd	r24, Y+15	; 0x0f
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	8a 89       	ldd	r24, Y+18	; 0x12
    1618:	9b 89       	ldd	r25, Y+19	; 0x13
    161a:	fc 01       	movw	r30, r24
    161c:	e2 0f       	add	r30, r18
    161e:	f3 1f       	adc	r31, r19
    1620:	80 81       	ld	r24, Z
    1622:	0e 94 48 06 	call	0xc90	; 0xc90 <CLCD_voidSendData>
	{
		CLCD_voidSendCommand(0x01);    //Clear Display
		if(position >= 0) CLCD_voidSetXYPosition(position , (position%2));
		else if(position < 0) CLCD_voidSetXYPosition(0 , 0);

		for(u8 i=0 ; i<STR_u8Lenght ; i++)
    1626:	8f 85       	ldd	r24, Y+15	; 0x0f
    1628:	8f 5f       	subi	r24, 0xFF	; 255
    162a:	8f 87       	std	Y+15, r24	; 0x0f
    162c:	9f 85       	ldd	r25, Y+15	; 0x0f
    162e:	89 89       	ldd	r24, Y+17	; 0x11
    1630:	98 17       	cp	r25, r24
    1632:	b8 f2       	brcs	.-82     	; 0x15e2 <CLCD_voidScrollTextSinsoidalwave+0x90>
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	a6 e9       	ldi	r26, 0x96	; 150
    163a:	b3 e4       	ldi	r27, 0x43	; 67
    163c:	8b 87       	std	Y+11, r24	; 0x0b
    163e:	9c 87       	std	Y+12, r25	; 0x0c
    1640:	ad 87       	std	Y+13, r26	; 0x0d
    1642:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1644:	6b 85       	ldd	r22, Y+11	; 0x0b
    1646:	7c 85       	ldd	r23, Y+12	; 0x0c
    1648:	8d 85       	ldd	r24, Y+13	; 0x0d
    164a:	9e 85       	ldd	r25, Y+14	; 0x0e
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	4a ef       	ldi	r20, 0xFA	; 250
    1652:	54 e4       	ldi	r21, 0x44	; 68
    1654:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	8f 83       	std	Y+7, r24	; 0x07
    165e:	98 87       	std	Y+8, r25	; 0x08
    1660:	a9 87       	std	Y+9, r26	; 0x09
    1662:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1664:	6f 81       	ldd	r22, Y+7	; 0x07
    1666:	78 85       	ldd	r23, Y+8	; 0x08
    1668:	89 85       	ldd	r24, Y+9	; 0x09
    166a:	9a 85       	ldd	r25, Y+10	; 0x0a
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	40 e8       	ldi	r20, 0x80	; 128
    1672:	5f e3       	ldi	r21, 0x3F	; 63
    1674:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1678:	88 23       	and	r24, r24
    167a:	2c f4       	brge	.+10     	; 0x1686 <CLCD_voidScrollTextSinsoidalwave+0x134>
		__ticks = 1;
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	9e 83       	std	Y+6, r25	; 0x06
    1682:	8d 83       	std	Y+5, r24	; 0x05
    1684:	3f c0       	rjmp	.+126    	; 0x1704 <CLCD_voidScrollTextSinsoidalwave+0x1b2>
	else if (__tmp > 65535)
    1686:	6f 81       	ldd	r22, Y+7	; 0x07
    1688:	78 85       	ldd	r23, Y+8	; 0x08
    168a:	89 85       	ldd	r24, Y+9	; 0x09
    168c:	9a 85       	ldd	r25, Y+10	; 0x0a
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	3f ef       	ldi	r19, 0xFF	; 255
    1692:	4f e7       	ldi	r20, 0x7F	; 127
    1694:	57 e4       	ldi	r21, 0x47	; 71
    1696:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    169a:	18 16       	cp	r1, r24
    169c:	4c f5       	brge	.+82     	; 0x16f0 <CLCD_voidScrollTextSinsoidalwave+0x19e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    169e:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	40 e2       	ldi	r20, 0x20	; 32
    16ac:	51 e4       	ldi	r21, 0x41	; 65
    16ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	bc 01       	movw	r22, r24
    16b8:	cd 01       	movw	r24, r26
    16ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	9e 83       	std	Y+6, r25	; 0x06
    16c4:	8d 83       	std	Y+5, r24	; 0x05
    16c6:	0f c0       	rjmp	.+30     	; 0x16e6 <CLCD_voidScrollTextSinsoidalwave+0x194>
    16c8:	88 ec       	ldi	r24, 0xC8	; 200
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	9c 83       	std	Y+4, r25	; 0x04
    16ce:	8b 83       	std	Y+3, r24	; 0x03
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	9c 81       	ldd	r25, Y+4	; 0x04
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	f1 f7       	brne	.-4      	; 0x16d4 <CLCD_voidScrollTextSinsoidalwave+0x182>
    16d8:	9c 83       	std	Y+4, r25	; 0x04
    16da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16dc:	8d 81       	ldd	r24, Y+5	; 0x05
    16de:	9e 81       	ldd	r25, Y+6	; 0x06
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	9e 83       	std	Y+6, r25	; 0x06
    16e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e6:	8d 81       	ldd	r24, Y+5	; 0x05
    16e8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ea:	00 97       	sbiw	r24, 0x00	; 0
    16ec:	69 f7       	brne	.-38     	; 0x16c8 <CLCD_voidScrollTextSinsoidalwave+0x176>
    16ee:	14 c0       	rjmp	.+40     	; 0x1718 <CLCD_voidScrollTextSinsoidalwave+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f0:	6f 81       	ldd	r22, Y+7	; 0x07
    16f2:	78 85       	ldd	r23, Y+8	; 0x08
    16f4:	89 85       	ldd	r24, Y+9	; 0x09
    16f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	9e 83       	std	Y+6, r25	; 0x06
    1702:	8d 83       	std	Y+5, r24	; 0x05
    1704:	8d 81       	ldd	r24, Y+5	; 0x05
    1706:	9e 81       	ldd	r25, Y+6	; 0x06
    1708:	9a 83       	std	Y+2, r25	; 0x02
    170a:	89 83       	std	Y+1, r24	; 0x01
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	9a 81       	ldd	r25, Y+2	; 0x02
    1710:	01 97       	sbiw	r24, 0x01	; 1
    1712:	f1 f7       	brne	.-4      	; 0x1710 <CLCD_voidScrollTextSinsoidalwave+0x1be>
    1714:	9a 83       	std	Y+2, r25	; 0x02
    1716:	89 83       	std	Y+1, r24	; 0x01
	while(Copy_u8Text[STR_u8Lenght] != '\0')
	{
		STR_u8Lenght++;
	}

	for(s8 position = -STR_u8Lenght ; position<=16 ; position++)
    1718:	88 89       	ldd	r24, Y+16	; 0x10
    171a:	8f 5f       	subi	r24, 0xFF	; 255
    171c:	88 8b       	std	Y+16, r24	; 0x10
    171e:	88 89       	ldd	r24, Y+16	; 0x10
    1720:	81 31       	cpi	r24, 0x11	; 17
    1722:	0c f4       	brge	.+2      	; 0x1726 <CLCD_voidScrollTextSinsoidalwave+0x1d4>
    1724:	36 cf       	rjmp	.-404    	; 0x1592 <CLCD_voidScrollTextSinsoidalwave+0x40>
				CLCD_voidSendData(Copy_u8Text[i]);
			}
		}
		_delay_ms(300);
	}
}
    1726:	65 96       	adiw	r28, 0x15	; 21
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	08 95       	ret

00001738 <CLCD_voidClearDisplay>:


void CLCD_voidClearDisplay(void)
{
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
    1740:	2e 97       	sbiw	r28, 0x0e	; 14
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	f8 94       	cli
    1746:	de bf       	out	0x3e, r29	; 62
    1748:	0f be       	out	0x3f, r0	; 63
    174a:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand(0x01);
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	0e 94 e6 06 	call	0xdcc	; 0xdcc <CLCD_voidSendCommand>
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	a0 e0       	ldi	r26, 0x00	; 0
    1758:	b0 e4       	ldi	r27, 0x40	; 64
    175a:	8b 87       	std	Y+11, r24	; 0x0b
    175c:	9c 87       	std	Y+12, r25	; 0x0c
    175e:	ad 87       	std	Y+13, r26	; 0x0d
    1760:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1762:	6b 85       	ldd	r22, Y+11	; 0x0b
    1764:	7c 85       	ldd	r23, Y+12	; 0x0c
    1766:	8d 85       	ldd	r24, Y+13	; 0x0d
    1768:	9e 85       	ldd	r25, Y+14	; 0x0e
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	4a ef       	ldi	r20, 0xFA	; 250
    1770:	54 e4       	ldi	r21, 0x44	; 68
    1772:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	8f 83       	std	Y+7, r24	; 0x07
    177c:	98 87       	std	Y+8, r25	; 0x08
    177e:	a9 87       	std	Y+9, r26	; 0x09
    1780:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1782:	6f 81       	ldd	r22, Y+7	; 0x07
    1784:	78 85       	ldd	r23, Y+8	; 0x08
    1786:	89 85       	ldd	r24, Y+9	; 0x09
    1788:	9a 85       	ldd	r25, Y+10	; 0x0a
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	40 e8       	ldi	r20, 0x80	; 128
    1790:	5f e3       	ldi	r21, 0x3F	; 63
    1792:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1796:	88 23       	and	r24, r24
    1798:	2c f4       	brge	.+10     	; 0x17a4 <CLCD_voidClearDisplay+0x6c>
		__ticks = 1;
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	9e 83       	std	Y+6, r25	; 0x06
    17a0:	8d 83       	std	Y+5, r24	; 0x05
    17a2:	3f c0       	rjmp	.+126    	; 0x1822 <CLCD_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    17a4:	6f 81       	ldd	r22, Y+7	; 0x07
    17a6:	78 85       	ldd	r23, Y+8	; 0x08
    17a8:	89 85       	ldd	r24, Y+9	; 0x09
    17aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	3f ef       	ldi	r19, 0xFF	; 255
    17b0:	4f e7       	ldi	r20, 0x7F	; 127
    17b2:	57 e4       	ldi	r21, 0x47	; 71
    17b4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17b8:	18 16       	cp	r1, r24
    17ba:	4c f5       	brge	.+82     	; 0x180e <CLCD_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    17be:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e2       	ldi	r20, 0x20	; 32
    17ca:	51 e4       	ldi	r21, 0x41	; 65
    17cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	bc 01       	movw	r22, r24
    17d6:	cd 01       	movw	r24, r26
    17d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	9e 83       	std	Y+6, r25	; 0x06
    17e2:	8d 83       	std	Y+5, r24	; 0x05
    17e4:	0f c0       	rjmp	.+30     	; 0x1804 <CLCD_voidClearDisplay+0xcc>
    17e6:	88 ec       	ldi	r24, 0xC8	; 200
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	9c 83       	std	Y+4, r25	; 0x04
    17ec:	8b 83       	std	Y+3, r24	; 0x03
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	9c 81       	ldd	r25, Y+4	; 0x04
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	f1 f7       	brne	.-4      	; 0x17f2 <CLCD_voidClearDisplay+0xba>
    17f6:	9c 83       	std	Y+4, r25	; 0x04
    17f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17fa:	8d 81       	ldd	r24, Y+5	; 0x05
    17fc:	9e 81       	ldd	r25, Y+6	; 0x06
    17fe:	01 97       	sbiw	r24, 0x01	; 1
    1800:	9e 83       	std	Y+6, r25	; 0x06
    1802:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1804:	8d 81       	ldd	r24, Y+5	; 0x05
    1806:	9e 81       	ldd	r25, Y+6	; 0x06
    1808:	00 97       	sbiw	r24, 0x00	; 0
    180a:	69 f7       	brne	.-38     	; 0x17e6 <CLCD_voidClearDisplay+0xae>
    180c:	14 c0       	rjmp	.+40     	; 0x1836 <CLCD_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    180e:	6f 81       	ldd	r22, Y+7	; 0x07
    1810:	78 85       	ldd	r23, Y+8	; 0x08
    1812:	89 85       	ldd	r24, Y+9	; 0x09
    1814:	9a 85       	ldd	r25, Y+10	; 0x0a
    1816:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	9e 83       	std	Y+6, r25	; 0x06
    1820:	8d 83       	std	Y+5, r24	; 0x05
    1822:	8d 81       	ldd	r24, Y+5	; 0x05
    1824:	9e 81       	ldd	r25, Y+6	; 0x06
    1826:	9a 83       	std	Y+2, r25	; 0x02
    1828:	89 83       	std	Y+1, r24	; 0x01
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	9a 81       	ldd	r25, Y+2	; 0x02
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	f1 f7       	brne	.-4      	; 0x182e <CLCD_voidClearDisplay+0xf6>
    1832:	9a 83       	std	Y+2, r25	; 0x02
    1834:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1836:	2e 96       	adiw	r28, 0x0e	; 14
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <CLCD_voidShift>:

void CLCD_voidShift(CLCD_SHIFT Copy_enuShiftDirection)
{
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	0f 92       	push	r0
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
    1852:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_enuShiftDirection == CLCD_SHIFT_RIGHT)||(Copy_enuShiftDirection == CLCD_SHIFT_LEFT))
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	8c 31       	cpi	r24, 0x1C	; 28
    1858:	19 f0       	breq	.+6      	; 0x1860 <CLCD_voidShift+0x18>
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	88 31       	cpi	r24, 0x18	; 24
    185e:	19 f4       	brne	.+6      	; 0x1866 <CLCD_voidShift+0x1e>
	{
		CLCD_voidSendCommand(Copy_enuShiftDirection);
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	0e 94 e6 06 	call	0xdcc	; 0xdcc <CLCD_voidSendCommand>
	}
}
    1866:	0f 90       	pop	r0
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <CLCD_voidCreateShape>:


void CLCD_voidCreateShape(u8 Copy_u8Location,u8 *Copy_pu8Shape)
{
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	00 d0       	rcall	.+0      	; 0x1874 <CLCD_voidCreateShape+0x6>
    1874:	00 d0       	rcall	.+0      	; 0x1876 <CLCD_voidCreateShape+0x8>
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	8a 83       	std	Y+2, r24	; 0x02
    187c:	7c 83       	std	Y+4, r23	; 0x04
    187e:	6b 83       	std	Y+3, r22	; 0x03
	if((Copy_u8Location <= 7) && (Copy_u8Location >= 0))
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	88 30       	cpi	r24, 0x08	; 8
    1884:	f8 f4       	brcc	.+62     	; 0x18c4 <CLCD_voidCreateShape+0x56>
	{
		CLCD_voidSendCommand( 0x40 | (Copy_u8Location *8));
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	88 2f       	mov	r24, r24
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	88 0f       	add	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	88 0f       	add	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	80 64       	ori	r24, 0x40	; 64
    189a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <CLCD_voidSendCommand>
		for(u8 i = 0 ; i<8 ; i++ )
    189e:	19 82       	std	Y+1, r1	; 0x01
    18a0:	0e c0       	rjmp	.+28     	; 0x18be <CLCD_voidCreateShape+0x50>
		{
			CLCD_voidSendData(Copy_pu8Shape[i]);
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	9c 81       	ldd	r25, Y+4	; 0x04
    18ac:	fc 01       	movw	r30, r24
    18ae:	e2 0f       	add	r30, r18
    18b0:	f3 1f       	adc	r31, r19
    18b2:	80 81       	ld	r24, Z
    18b4:	0e 94 48 06 	call	0xc90	; 0xc90 <CLCD_voidSendData>
void CLCD_voidCreateShape(u8 Copy_u8Location,u8 *Copy_pu8Shape)
{
	if((Copy_u8Location <= 7) && (Copy_u8Location >= 0))
	{
		CLCD_voidSendCommand( 0x40 | (Copy_u8Location *8));
		for(u8 i = 0 ; i<8 ; i++ )
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	8f 5f       	subi	r24, 0xFF	; 255
    18bc:	89 83       	std	Y+1, r24	; 0x01
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	88 30       	cpi	r24, 0x08	; 8
    18c2:	78 f3       	brcs	.-34     	; 0x18a2 <CLCD_voidCreateShape+0x34>
		{
			CLCD_voidSendData(Copy_pu8Shape[i]);
		}
	}
}
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <CLCD_voidDrawShape>:


void CLCD_voidDrawShape(u8 Copy_u8Location)
{
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	0f 92       	push	r0
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendData(Copy_u8Location);
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	0e 94 48 06 	call	0xc90	; 0xc90 <CLCD_voidSendData>
}
    18e4:	0f 90       	pop	r0
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	08 95       	ret

000018ec <CLCD_voidSendFloat>:

void CLCD_voidSendFloat(f64 Copy_s32float)
{
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	6c 97       	sbiw	r28, 0x1c	; 28
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	cd bf       	out	0x3d, r28	; 61
    1900:	69 8f       	std	Y+25, r22	; 0x19
    1902:	7a 8f       	std	Y+26, r23	; 0x1a
    1904:	8b 8f       	std	Y+27, r24	; 0x1b
    1906:	9c 8f       	std	Y+28, r25	; 0x1c
	int integer_part = (int)Copy_s32float;          // Extract the integer part
    1908:	69 8d       	ldd	r22, Y+25	; 0x19
    190a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    190c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    190e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1910:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	9c 83       	std	Y+4, r25	; 0x04
    191a:	8b 83       	std	Y+3, r24	; 0x03
	int decimal_part = (int)((Copy_s32float - integer_part) * 100);  // Extract the decimal part (2 decimal places)
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	9c 81       	ldd	r25, Y+4	; 0x04
    1920:	aa 27       	eor	r26, r26
    1922:	97 fd       	sbrc	r25, 7
    1924:	a0 95       	com	r26
    1926:	ba 2f       	mov	r27, r26
    1928:	bc 01       	movw	r22, r24
    192a:	cd 01       	movw	r24, r26
    192c:	0e 94 a1 03 	call	0x742	; 0x742 <__floatsisf>
    1930:	9b 01       	movw	r18, r22
    1932:	ac 01       	movw	r20, r24
    1934:	69 8d       	ldd	r22, Y+25	; 0x19
    1936:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1938:	8b 8d       	ldd	r24, Y+27	; 0x1b
    193a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    193c:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	bc 01       	movw	r22, r24
    1946:	cd 01       	movw	r24, r26
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	48 ec       	ldi	r20, 0xC8	; 200
    194e:	52 e4       	ldi	r21, 0x42	; 66
    1950:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	bc 01       	movw	r22, r24
    195a:	cd 01       	movw	r24, r26
    195c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	9a 83       	std	Y+2, r25	; 0x02
    1966:	89 83       	std	Y+1, r24	; 0x01

	char buffer[20];  // Buffer to hold the converted string

	// Format and print the integer and decimal parts separately
	sprintf(buffer, "%d.%02d", integer_part, decimal_part);
    1968:	8d b7       	in	r24, 0x3d	; 61
    196a:	9e b7       	in	r25, 0x3e	; 62
    196c:	08 97       	sbiw	r24, 0x08	; 8
    196e:	0f b6       	in	r0, 0x3f	; 63
    1970:	f8 94       	cli
    1972:	9e bf       	out	0x3e, r25	; 62
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	8d bf       	out	0x3d, r24	; 61
    1978:	ed b7       	in	r30, 0x3d	; 61
    197a:	fe b7       	in	r31, 0x3e	; 62
    197c:	31 96       	adiw	r30, 0x01	; 1
    197e:	ce 01       	movw	r24, r28
    1980:	05 96       	adiw	r24, 0x05	; 5
    1982:	91 83       	std	Z+1, r25	; 0x01
    1984:	80 83       	st	Z, r24
    1986:	80 e6       	ldi	r24, 0x60	; 96
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	93 83       	std	Z+3, r25	; 0x03
    198c:	82 83       	std	Z+2, r24	; 0x02
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	9c 81       	ldd	r25, Y+4	; 0x04
    1992:	95 83       	std	Z+5, r25	; 0x05
    1994:	84 83       	std	Z+4, r24	; 0x04
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	9a 81       	ldd	r25, Y+2	; 0x02
    199a:	97 83       	std	Z+7, r25	; 0x07
    199c:	86 83       	std	Z+6, r24	; 0x06
    199e:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <sprintf>
    19a2:	8d b7       	in	r24, 0x3d	; 61
    19a4:	9e b7       	in	r25, 0x3e	; 62
    19a6:	08 96       	adiw	r24, 0x08	; 8
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	9e bf       	out	0x3e, r25	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	8d bf       	out	0x3d, r24	; 61

	CLCD_voidSendString(buffer);
    19b2:	ce 01       	movw	r24, r28
    19b4:	05 96       	adiw	r24, 0x05	; 5
    19b6:	0e 94 25 08 	call	0x104a	; 0x104a <CLCD_voidSendString>
}
    19ba:	6c 96       	adiw	r28, 0x1c	; 28
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	de bf       	out	0x3e, r29	; 62
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	08 95       	ret

000019cc <DIO_voidSetPinDirection>:

#include "DIO_interface.h"
#include "DIO_register.h"

void DIO_voidSetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
    19d4:	27 97       	sbiw	r28, 0x07	; 7
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	f8 94       	cli
    19da:	de bf       	out	0x3e, r29	; 62
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	cd bf       	out	0x3d, r28	; 61
    19e0:	89 83       	std	Y+1, r24	; 0x01
    19e2:	6a 83       	std	Y+2, r22	; 0x02
    19e4:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Direction == DIO_u8INPUT)
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	88 23       	and	r24, r24
    19ea:	09 f0       	breq	.+2      	; 0x19ee <DIO_voidSetPinDirection+0x22>
    19ec:	74 c0       	rjmp	.+232    	; 0x1ad6 <DIO_voidSetPinDirection+0x10a>
	{
		switch(Copy_u8Port)
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	28 2f       	mov	r18, r24
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	3f 83       	std	Y+7, r19	; 0x07
    19f6:	2e 83       	std	Y+6, r18	; 0x06
    19f8:	8e 81       	ldd	r24, Y+6	; 0x06
    19fa:	9f 81       	ldd	r25, Y+7	; 0x07
    19fc:	81 30       	cpi	r24, 0x01	; 1
    19fe:	91 05       	cpc	r25, r1
    1a00:	59 f1       	breq	.+86     	; 0x1a58 <DIO_voidSetPinDirection+0x8c>
    1a02:	2e 81       	ldd	r18, Y+6	; 0x06
    1a04:	3f 81       	ldd	r19, Y+7	; 0x07
    1a06:	22 30       	cpi	r18, 0x02	; 2
    1a08:	31 05       	cpc	r19, r1
    1a0a:	2c f4       	brge	.+10     	; 0x1a16 <DIO_voidSetPinDirection+0x4a>
    1a0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a10:	00 97       	sbiw	r24, 0x00	; 0
    1a12:	69 f0       	breq	.+26     	; 0x1a2e <DIO_voidSetPinDirection+0x62>
    1a14:	d2 c0       	rjmp	.+420    	; 0x1bba <DIO_voidSetPinDirection+0x1ee>
    1a16:	2e 81       	ldd	r18, Y+6	; 0x06
    1a18:	3f 81       	ldd	r19, Y+7	; 0x07
    1a1a:	22 30       	cpi	r18, 0x02	; 2
    1a1c:	31 05       	cpc	r19, r1
    1a1e:	89 f1       	breq	.+98     	; 0x1a82 <DIO_voidSetPinDirection+0xb6>
    1a20:	8e 81       	ldd	r24, Y+6	; 0x06
    1a22:	9f 81       	ldd	r25, Y+7	; 0x07
    1a24:	83 30       	cpi	r24, 0x03	; 3
    1a26:	91 05       	cpc	r25, r1
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <DIO_voidSetPinDirection+0x60>
    1a2a:	40 c0       	rjmp	.+128    	; 0x1aac <DIO_voidSetPinDirection+0xe0>
    1a2c:	c6 c0       	rjmp	.+396    	; 0x1bba <DIO_voidSetPinDirection+0x1ee>
		{
		case DIO_u8PORTA : CLR_BIT(DDRA , Copy_u8Pin); break; 
    1a2e:	aa e3       	ldi	r26, 0x3A	; 58
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	ea e3       	ldi	r30, 0x3A	; 58
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	48 2f       	mov	r20, r24
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	02 2e       	mov	r0, r18
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <DIO_voidSetPinDirection+0x80>
    1a48:	88 0f       	add	r24, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	0a 94       	dec	r0
    1a4e:	e2 f7       	brpl	.-8      	; 0x1a48 <DIO_voidSetPinDirection+0x7c>
    1a50:	80 95       	com	r24
    1a52:	84 23       	and	r24, r20
    1a54:	8c 93       	st	X, r24
    1a56:	b1 c0       	rjmp	.+354    	; 0x1bba <DIO_voidSetPinDirection+0x1ee>
		case DIO_u8PORTB : CLR_BIT(DDRB , Copy_u8Pin); break;
    1a58:	a7 e3       	ldi	r26, 0x37	; 55
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e7 e3       	ldi	r30, 0x37	; 55
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	48 2f       	mov	r20, r24
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	02 2e       	mov	r0, r18
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <DIO_voidSetPinDirection+0xaa>
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	0a 94       	dec	r0
    1a78:	e2 f7       	brpl	.-8      	; 0x1a72 <DIO_voidSetPinDirection+0xa6>
    1a7a:	80 95       	com	r24
    1a7c:	84 23       	and	r24, r20
    1a7e:	8c 93       	st	X, r24
    1a80:	9c c0       	rjmp	.+312    	; 0x1bba <DIO_voidSetPinDirection+0x1ee>
		case DIO_u8PORTC : CLR_BIT(DDRC , Copy_u8Pin); break;
    1a82:	a4 e3       	ldi	r26, 0x34	; 52
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e4 e3       	ldi	r30, 0x34	; 52
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	48 2f       	mov	r20, r24
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	02 2e       	mov	r0, r18
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <DIO_voidSetPinDirection+0xd4>
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	0a 94       	dec	r0
    1aa2:	e2 f7       	brpl	.-8      	; 0x1a9c <DIO_voidSetPinDirection+0xd0>
    1aa4:	80 95       	com	r24
    1aa6:	84 23       	and	r24, r20
    1aa8:	8c 93       	st	X, r24
    1aaa:	87 c0       	rjmp	.+270    	; 0x1bba <DIO_voidSetPinDirection+0x1ee>
		case DIO_u8PORTD : CLR_BIT(DDRD , Copy_u8Pin); break;
    1aac:	a1 e3       	ldi	r26, 0x31	; 49
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e1 e3       	ldi	r30, 0x31	; 49
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	48 2f       	mov	r20, r24
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	28 2f       	mov	r18, r24
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	02 2e       	mov	r0, r18
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <DIO_voidSetPinDirection+0xfe>
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	0a 94       	dec	r0
    1acc:	e2 f7       	brpl	.-8      	; 0x1ac6 <DIO_voidSetPinDirection+0xfa>
    1ace:	80 95       	com	r24
    1ad0:	84 23       	and	r24, r20
    1ad2:	8c 93       	st	X, r24
    1ad4:	72 c0       	rjmp	.+228    	; 0x1bba <DIO_voidSetPinDirection+0x1ee>
		}
	}
	else if(Copy_u8Direction == DIO_u8OUTPUT)
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	81 30       	cpi	r24, 0x01	; 1
    1ada:	09 f0       	breq	.+2      	; 0x1ade <DIO_voidSetPinDirection+0x112>
    1adc:	6e c0       	rjmp	.+220    	; 0x1bba <DIO_voidSetPinDirection+0x1ee>
	{
		switch(Copy_u8Port)
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
    1ae0:	28 2f       	mov	r18, r24
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	3d 83       	std	Y+5, r19	; 0x05
    1ae6:	2c 83       	std	Y+4, r18	; 0x04
    1ae8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aea:	9d 81       	ldd	r25, Y+5	; 0x05
    1aec:	81 30       	cpi	r24, 0x01	; 1
    1aee:	91 05       	cpc	r25, r1
    1af0:	49 f1       	breq	.+82     	; 0x1b44 <DIO_voidSetPinDirection+0x178>
    1af2:	2c 81       	ldd	r18, Y+4	; 0x04
    1af4:	3d 81       	ldd	r19, Y+5	; 0x05
    1af6:	22 30       	cpi	r18, 0x02	; 2
    1af8:	31 05       	cpc	r19, r1
    1afa:	2c f4       	brge	.+10     	; 0x1b06 <DIO_voidSetPinDirection+0x13a>
    1afc:	8c 81       	ldd	r24, Y+4	; 0x04
    1afe:	9d 81       	ldd	r25, Y+5	; 0x05
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	61 f0       	breq	.+24     	; 0x1b1c <DIO_voidSetPinDirection+0x150>
    1b04:	5a c0       	rjmp	.+180    	; 0x1bba <DIO_voidSetPinDirection+0x1ee>
    1b06:	2c 81       	ldd	r18, Y+4	; 0x04
    1b08:	3d 81       	ldd	r19, Y+5	; 0x05
    1b0a:	22 30       	cpi	r18, 0x02	; 2
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	71 f1       	breq	.+92     	; 0x1b6c <DIO_voidSetPinDirection+0x1a0>
    1b10:	8c 81       	ldd	r24, Y+4	; 0x04
    1b12:	9d 81       	ldd	r25, Y+5	; 0x05
    1b14:	83 30       	cpi	r24, 0x03	; 3
    1b16:	91 05       	cpc	r25, r1
    1b18:	e9 f1       	breq	.+122    	; 0x1b94 <DIO_voidSetPinDirection+0x1c8>
    1b1a:	4f c0       	rjmp	.+158    	; 0x1bba <DIO_voidSetPinDirection+0x1ee>
		{
		case DIO_u8PORTA : SET_BIT(DDRA , Copy_u8Pin); break;
    1b1c:	aa e3       	ldi	r26, 0x3A	; 58
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	ea e3       	ldi	r30, 0x3A	; 58
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	48 2f       	mov	r20, r24
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	02 2e       	mov	r0, r18
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <DIO_voidSetPinDirection+0x16e>
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	0a 94       	dec	r0
    1b3c:	e2 f7       	brpl	.-8      	; 0x1b36 <DIO_voidSetPinDirection+0x16a>
    1b3e:	84 2b       	or	r24, r20
    1b40:	8c 93       	st	X, r24
    1b42:	3b c0       	rjmp	.+118    	; 0x1bba <DIO_voidSetPinDirection+0x1ee>
		case DIO_u8PORTB : SET_BIT(DDRB , Copy_u8Pin); break;
    1b44:	a7 e3       	ldi	r26, 0x37	; 55
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e7 e3       	ldi	r30, 0x37	; 55
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	48 2f       	mov	r20, r24
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	02 2e       	mov	r0, r18
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <DIO_voidSetPinDirection+0x196>
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	0a 94       	dec	r0
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <DIO_voidSetPinDirection+0x192>
    1b66:	84 2b       	or	r24, r20
    1b68:	8c 93       	st	X, r24
    1b6a:	27 c0       	rjmp	.+78     	; 0x1bba <DIO_voidSetPinDirection+0x1ee>
		case DIO_u8PORTC : SET_BIT(DDRC , Copy_u8Pin); break;
    1b6c:	a4 e3       	ldi	r26, 0x34	; 52
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	e4 e3       	ldi	r30, 0x34	; 52
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	48 2f       	mov	r20, r24
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	02 2e       	mov	r0, r18
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <DIO_voidSetPinDirection+0x1be>
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	0a 94       	dec	r0
    1b8c:	e2 f7       	brpl	.-8      	; 0x1b86 <DIO_voidSetPinDirection+0x1ba>
    1b8e:	84 2b       	or	r24, r20
    1b90:	8c 93       	st	X, r24
    1b92:	13 c0       	rjmp	.+38     	; 0x1bba <DIO_voidSetPinDirection+0x1ee>
		case DIO_u8PORTD : SET_BIT(DDRD , Copy_u8Pin); break;
    1b94:	a1 e3       	ldi	r26, 0x31	; 49
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	e1 e3       	ldi	r30, 0x31	; 49
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	48 2f       	mov	r20, r24
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	02 2e       	mov	r0, r18
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <DIO_voidSetPinDirection+0x1e6>
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	0a 94       	dec	r0
    1bb4:	e2 f7       	brpl	.-8      	; 0x1bae <DIO_voidSetPinDirection+0x1e2>
    1bb6:	84 2b       	or	r24, r20
    1bb8:	8c 93       	st	X, r24
		}
	}
}
    1bba:	27 96       	adiw	r28, 0x07	; 7
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	f8 94       	cli
    1bc0:	de bf       	out	0x3e, r29	; 62
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	cd bf       	out	0x3d, r28	; 61
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	08 95       	ret

00001bcc <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    1bd4:	27 97       	sbiw	r28, 0x07	; 7
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	de bf       	out	0x3e, r29	; 62
    1bdc:	0f be       	out	0x3f, r0	; 63
    1bde:	cd bf       	out	0x3d, r28	; 61
    1be0:	89 83       	std	Y+1, r24	; 0x01
    1be2:	6a 83       	std	Y+2, r22	; 0x02
    1be4:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8Value == DIO_u8LOW)
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	88 23       	and	r24, r24
    1bea:	09 f0       	breq	.+2      	; 0x1bee <DIO_voidSetPinValue+0x22>
    1bec:	74 c0       	rjmp	.+232    	; 0x1cd6 <DIO_voidSetPinValue+0x10a>
	{
		switch (Copy_u8Port)
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	28 2f       	mov	r18, r24
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	3f 83       	std	Y+7, r19	; 0x07
    1bf6:	2e 83       	std	Y+6, r18	; 0x06
    1bf8:	8e 81       	ldd	r24, Y+6	; 0x06
    1bfa:	9f 81       	ldd	r25, Y+7	; 0x07
    1bfc:	81 30       	cpi	r24, 0x01	; 1
    1bfe:	91 05       	cpc	r25, r1
    1c00:	59 f1       	breq	.+86     	; 0x1c58 <DIO_voidSetPinValue+0x8c>
    1c02:	2e 81       	ldd	r18, Y+6	; 0x06
    1c04:	3f 81       	ldd	r19, Y+7	; 0x07
    1c06:	22 30       	cpi	r18, 0x02	; 2
    1c08:	31 05       	cpc	r19, r1
    1c0a:	2c f4       	brge	.+10     	; 0x1c16 <DIO_voidSetPinValue+0x4a>
    1c0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c10:	00 97       	sbiw	r24, 0x00	; 0
    1c12:	69 f0       	breq	.+26     	; 0x1c2e <DIO_voidSetPinValue+0x62>
    1c14:	d2 c0       	rjmp	.+420    	; 0x1dba <DIO_voidSetPinValue+0x1ee>
    1c16:	2e 81       	ldd	r18, Y+6	; 0x06
    1c18:	3f 81       	ldd	r19, Y+7	; 0x07
    1c1a:	22 30       	cpi	r18, 0x02	; 2
    1c1c:	31 05       	cpc	r19, r1
    1c1e:	89 f1       	breq	.+98     	; 0x1c82 <DIO_voidSetPinValue+0xb6>
    1c20:	8e 81       	ldd	r24, Y+6	; 0x06
    1c22:	9f 81       	ldd	r25, Y+7	; 0x07
    1c24:	83 30       	cpi	r24, 0x03	; 3
    1c26:	91 05       	cpc	r25, r1
    1c28:	09 f4       	brne	.+2      	; 0x1c2c <DIO_voidSetPinValue+0x60>
    1c2a:	40 c0       	rjmp	.+128    	; 0x1cac <DIO_voidSetPinValue+0xe0>
    1c2c:	c6 c0       	rjmp	.+396    	; 0x1dba <DIO_voidSetPinValue+0x1ee>
		{
		case DIO_u8PORTA : CLR_BIT(PORTA , Copy_u8Pin); break; 
    1c2e:	ab e3       	ldi	r26, 0x3B	; 59
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	eb e3       	ldi	r30, 0x3B	; 59
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	48 2f       	mov	r20, r24
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	02 2e       	mov	r0, r18
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <DIO_voidSetPinValue+0x80>
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	0a 94       	dec	r0
    1c4e:	e2 f7       	brpl	.-8      	; 0x1c48 <DIO_voidSetPinValue+0x7c>
    1c50:	80 95       	com	r24
    1c52:	84 23       	and	r24, r20
    1c54:	8c 93       	st	X, r24
    1c56:	b1 c0       	rjmp	.+354    	; 0x1dba <DIO_voidSetPinValue+0x1ee>
		case DIO_u8PORTB : CLR_BIT(PORTB , Copy_u8Pin); break;
    1c58:	a8 e3       	ldi	r26, 0x38	; 56
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e8 e3       	ldi	r30, 0x38	; 56
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	48 2f       	mov	r20, r24
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	02 2e       	mov	r0, r18
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <DIO_voidSetPinValue+0xaa>
    1c72:	88 0f       	add	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	0a 94       	dec	r0
    1c78:	e2 f7       	brpl	.-8      	; 0x1c72 <DIO_voidSetPinValue+0xa6>
    1c7a:	80 95       	com	r24
    1c7c:	84 23       	and	r24, r20
    1c7e:	8c 93       	st	X, r24
    1c80:	9c c0       	rjmp	.+312    	; 0x1dba <DIO_voidSetPinValue+0x1ee>
		case DIO_u8PORTC : CLR_BIT(PORTC , Copy_u8Pin); break;
    1c82:	a5 e3       	ldi	r26, 0x35	; 53
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	e5 e3       	ldi	r30, 0x35	; 53
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	48 2f       	mov	r20, r24
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	28 2f       	mov	r18, r24
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	02 2e       	mov	r0, r18
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <DIO_voidSetPinValue+0xd4>
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	0a 94       	dec	r0
    1ca2:	e2 f7       	brpl	.-8      	; 0x1c9c <DIO_voidSetPinValue+0xd0>
    1ca4:	80 95       	com	r24
    1ca6:	84 23       	and	r24, r20
    1ca8:	8c 93       	st	X, r24
    1caa:	87 c0       	rjmp	.+270    	; 0x1dba <DIO_voidSetPinValue+0x1ee>
		case DIO_u8PORTD : CLR_BIT(PORTD , Copy_u8Pin); break;
    1cac:	a2 e3       	ldi	r26, 0x32	; 50
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	e2 e3       	ldi	r30, 0x32	; 50
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	48 2f       	mov	r20, r24
    1cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cba:	28 2f       	mov	r18, r24
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	02 2e       	mov	r0, r18
    1cc4:	02 c0       	rjmp	.+4      	; 0x1cca <DIO_voidSetPinValue+0xfe>
    1cc6:	88 0f       	add	r24, r24
    1cc8:	99 1f       	adc	r25, r25
    1cca:	0a 94       	dec	r0
    1ccc:	e2 f7       	brpl	.-8      	; 0x1cc6 <DIO_voidSetPinValue+0xfa>
    1cce:	80 95       	com	r24
    1cd0:	84 23       	and	r24, r20
    1cd2:	8c 93       	st	X, r24
    1cd4:	72 c0       	rjmp	.+228    	; 0x1dba <DIO_voidSetPinValue+0x1ee>
		}
	}
	else if (Copy_u8Value == DIO_u8HIGH)
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	81 30       	cpi	r24, 0x01	; 1
    1cda:	09 f0       	breq	.+2      	; 0x1cde <DIO_voidSetPinValue+0x112>
    1cdc:	6e c0       	rjmp	.+220    	; 0x1dba <DIO_voidSetPinValue+0x1ee>
	{				
		switch (Copy_u8Port)
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	28 2f       	mov	r18, r24
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	3d 83       	std	Y+5, r19	; 0x05
    1ce6:	2c 83       	std	Y+4, r18	; 0x04
    1ce8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cea:	9d 81       	ldd	r25, Y+5	; 0x05
    1cec:	81 30       	cpi	r24, 0x01	; 1
    1cee:	91 05       	cpc	r25, r1
    1cf0:	49 f1       	breq	.+82     	; 0x1d44 <DIO_voidSetPinValue+0x178>
    1cf2:	2c 81       	ldd	r18, Y+4	; 0x04
    1cf4:	3d 81       	ldd	r19, Y+5	; 0x05
    1cf6:	22 30       	cpi	r18, 0x02	; 2
    1cf8:	31 05       	cpc	r19, r1
    1cfa:	2c f4       	brge	.+10     	; 0x1d06 <DIO_voidSetPinValue+0x13a>
    1cfc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfe:	9d 81       	ldd	r25, Y+5	; 0x05
    1d00:	00 97       	sbiw	r24, 0x00	; 0
    1d02:	61 f0       	breq	.+24     	; 0x1d1c <DIO_voidSetPinValue+0x150>
    1d04:	5a c0       	rjmp	.+180    	; 0x1dba <DIO_voidSetPinValue+0x1ee>
    1d06:	2c 81       	ldd	r18, Y+4	; 0x04
    1d08:	3d 81       	ldd	r19, Y+5	; 0x05
    1d0a:	22 30       	cpi	r18, 0x02	; 2
    1d0c:	31 05       	cpc	r19, r1
    1d0e:	71 f1       	breq	.+92     	; 0x1d6c <DIO_voidSetPinValue+0x1a0>
    1d10:	8c 81       	ldd	r24, Y+4	; 0x04
    1d12:	9d 81       	ldd	r25, Y+5	; 0x05
    1d14:	83 30       	cpi	r24, 0x03	; 3
    1d16:	91 05       	cpc	r25, r1
    1d18:	e9 f1       	breq	.+122    	; 0x1d94 <DIO_voidSetPinValue+0x1c8>
    1d1a:	4f c0       	rjmp	.+158    	; 0x1dba <DIO_voidSetPinValue+0x1ee>
		{
		case DIO_u8PORTA : SET_BIT(PORTA , Copy_u8Pin); break; 
    1d1c:	ab e3       	ldi	r26, 0x3B	; 59
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	eb e3       	ldi	r30, 0x3B	; 59
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	48 2f       	mov	r20, r24
    1d28:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2a:	28 2f       	mov	r18, r24
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	02 2e       	mov	r0, r18
    1d34:	02 c0       	rjmp	.+4      	; 0x1d3a <DIO_voidSetPinValue+0x16e>
    1d36:	88 0f       	add	r24, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	0a 94       	dec	r0
    1d3c:	e2 f7       	brpl	.-8      	; 0x1d36 <DIO_voidSetPinValue+0x16a>
    1d3e:	84 2b       	or	r24, r20
    1d40:	8c 93       	st	X, r24
    1d42:	3b c0       	rjmp	.+118    	; 0x1dba <DIO_voidSetPinValue+0x1ee>
		case DIO_u8PORTB : SET_BIT(PORTB , Copy_u8Pin); break;
    1d44:	a8 e3       	ldi	r26, 0x38	; 56
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	e8 e3       	ldi	r30, 0x38	; 56
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	48 2f       	mov	r20, r24
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	28 2f       	mov	r18, r24
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	02 2e       	mov	r0, r18
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <DIO_voidSetPinValue+0x196>
    1d5e:	88 0f       	add	r24, r24
    1d60:	99 1f       	adc	r25, r25
    1d62:	0a 94       	dec	r0
    1d64:	e2 f7       	brpl	.-8      	; 0x1d5e <DIO_voidSetPinValue+0x192>
    1d66:	84 2b       	or	r24, r20
    1d68:	8c 93       	st	X, r24
    1d6a:	27 c0       	rjmp	.+78     	; 0x1dba <DIO_voidSetPinValue+0x1ee>
		case DIO_u8PORTC : SET_BIT(PORTC , Copy_u8Pin); break;
    1d6c:	a5 e3       	ldi	r26, 0x35	; 53
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	e5 e3       	ldi	r30, 0x35	; 53
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	48 2f       	mov	r20, r24
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	28 2f       	mov	r18, r24
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	02 2e       	mov	r0, r18
    1d84:	02 c0       	rjmp	.+4      	; 0x1d8a <DIO_voidSetPinValue+0x1be>
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	0a 94       	dec	r0
    1d8c:	e2 f7       	brpl	.-8      	; 0x1d86 <DIO_voidSetPinValue+0x1ba>
    1d8e:	84 2b       	or	r24, r20
    1d90:	8c 93       	st	X, r24
    1d92:	13 c0       	rjmp	.+38     	; 0x1dba <DIO_voidSetPinValue+0x1ee>
		case DIO_u8PORTD : SET_BIT(PORTD , Copy_u8Pin); break;
    1d94:	a2 e3       	ldi	r26, 0x32	; 50
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	e2 e3       	ldi	r30, 0x32	; 50
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	48 2f       	mov	r20, r24
    1da0:	8a 81       	ldd	r24, Y+2	; 0x02
    1da2:	28 2f       	mov	r18, r24
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	02 2e       	mov	r0, r18
    1dac:	02 c0       	rjmp	.+4      	; 0x1db2 <DIO_voidSetPinValue+0x1e6>
    1dae:	88 0f       	add	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	0a 94       	dec	r0
    1db4:	e2 f7       	brpl	.-8      	; 0x1dae <DIO_voidSetPinValue+0x1e2>
    1db6:	84 2b       	or	r24, r20
    1db8:	8c 93       	st	X, r24
		}
	}	
}
    1dba:	27 96       	adiw	r28, 0x07	; 7
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	de bf       	out	0x3e, r29	; 62
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	cd bf       	out	0x3d, r28	; 61
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	08 95       	ret

00001dcc <DIO_u8GetPinValue>:

u8 	 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	00 d0       	rcall	.+0      	; 0x1dd2 <DIO_u8GetPinValue+0x6>
    1dd2:	00 d0       	rcall	.+0      	; 0x1dd4 <DIO_u8GetPinValue+0x8>
    1dd4:	0f 92       	push	r0
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
    1dda:	8a 83       	std	Y+2, r24	; 0x02
    1ddc:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value=0;
    1dde:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	3d 83       	std	Y+5, r19	; 0x05
    1de8:	2c 83       	std	Y+4, r18	; 0x04
    1dea:	4c 81       	ldd	r20, Y+4	; 0x04
    1dec:	5d 81       	ldd	r21, Y+5	; 0x05
    1dee:	41 30       	cpi	r20, 0x01	; 1
    1df0:	51 05       	cpc	r21, r1
    1df2:	41 f1       	breq	.+80     	; 0x1e44 <DIO_u8GetPinValue+0x78>
    1df4:	8c 81       	ldd	r24, Y+4	; 0x04
    1df6:	9d 81       	ldd	r25, Y+5	; 0x05
    1df8:	82 30       	cpi	r24, 0x02	; 2
    1dfa:	91 05       	cpc	r25, r1
    1dfc:	34 f4       	brge	.+12     	; 0x1e0a <DIO_u8GetPinValue+0x3e>
    1dfe:	2c 81       	ldd	r18, Y+4	; 0x04
    1e00:	3d 81       	ldd	r19, Y+5	; 0x05
    1e02:	21 15       	cp	r18, r1
    1e04:	31 05       	cpc	r19, r1
    1e06:	61 f0       	breq	.+24     	; 0x1e20 <DIO_u8GetPinValue+0x54>
    1e08:	52 c0       	rjmp	.+164    	; 0x1eae <DIO_u8GetPinValue+0xe2>
    1e0a:	4c 81       	ldd	r20, Y+4	; 0x04
    1e0c:	5d 81       	ldd	r21, Y+5	; 0x05
    1e0e:	42 30       	cpi	r20, 0x02	; 2
    1e10:	51 05       	cpc	r21, r1
    1e12:	51 f1       	breq	.+84     	; 0x1e68 <DIO_u8GetPinValue+0x9c>
    1e14:	8c 81       	ldd	r24, Y+4	; 0x04
    1e16:	9d 81       	ldd	r25, Y+5	; 0x05
    1e18:	83 30       	cpi	r24, 0x03	; 3
    1e1a:	91 05       	cpc	r25, r1
    1e1c:	b9 f1       	breq	.+110    	; 0x1e8c <DIO_u8GetPinValue+0xc0>
    1e1e:	47 c0       	rjmp	.+142    	; 0x1eae <DIO_u8GetPinValue+0xe2>
	{
	case DIO_u8PORTA : pin_value = GET_BIT(PINA , Copy_u8Pin); break;
    1e20:	e9 e3       	ldi	r30, 0x39	; 57
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	88 2f       	mov	r24, r24
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	a9 01       	movw	r20, r18
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <DIO_u8GetPinValue+0x6c>
    1e34:	55 95       	asr	r21
    1e36:	47 95       	ror	r20
    1e38:	8a 95       	dec	r24
    1e3a:	e2 f7       	brpl	.-8      	; 0x1e34 <DIO_u8GetPinValue+0x68>
    1e3c:	ca 01       	movw	r24, r20
    1e3e:	81 70       	andi	r24, 0x01	; 1
    1e40:	89 83       	std	Y+1, r24	; 0x01
    1e42:	35 c0       	rjmp	.+106    	; 0x1eae <DIO_u8GetPinValue+0xe2>
	case DIO_u8PORTB : pin_value = GET_BIT(PINB , Copy_u8Pin); break;
    1e44:	e6 e3       	ldi	r30, 0x36	; 54
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	28 2f       	mov	r18, r24
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e50:	88 2f       	mov	r24, r24
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	a9 01       	movw	r20, r18
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <DIO_u8GetPinValue+0x90>
    1e58:	55 95       	asr	r21
    1e5a:	47 95       	ror	r20
    1e5c:	8a 95       	dec	r24
    1e5e:	e2 f7       	brpl	.-8      	; 0x1e58 <DIO_u8GetPinValue+0x8c>
    1e60:	ca 01       	movw	r24, r20
    1e62:	81 70       	andi	r24, 0x01	; 1
    1e64:	89 83       	std	Y+1, r24	; 0x01
    1e66:	23 c0       	rjmp	.+70     	; 0x1eae <DIO_u8GetPinValue+0xe2>
	case DIO_u8PORTC : pin_value = GET_BIT(PINC , Copy_u8Pin); break;
    1e68:	e3 e3       	ldi	r30, 0x33	; 51
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	28 2f       	mov	r18, r24
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	88 2f       	mov	r24, r24
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	a9 01       	movw	r20, r18
    1e7a:	02 c0       	rjmp	.+4      	; 0x1e80 <DIO_u8GetPinValue+0xb4>
    1e7c:	55 95       	asr	r21
    1e7e:	47 95       	ror	r20
    1e80:	8a 95       	dec	r24
    1e82:	e2 f7       	brpl	.-8      	; 0x1e7c <DIO_u8GetPinValue+0xb0>
    1e84:	ca 01       	movw	r24, r20
    1e86:	81 70       	andi	r24, 0x01	; 1
    1e88:	89 83       	std	Y+1, r24	; 0x01
    1e8a:	11 c0       	rjmp	.+34     	; 0x1eae <DIO_u8GetPinValue+0xe2>
	case DIO_u8PORTD : pin_value = GET_BIT(PIND , Copy_u8Pin); break;
    1e8c:	e0 e3       	ldi	r30, 0x30	; 48
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	8b 81       	ldd	r24, Y+3	; 0x03
    1e98:	88 2f       	mov	r24, r24
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	a9 01       	movw	r20, r18
    1e9e:	02 c0       	rjmp	.+4      	; 0x1ea4 <DIO_u8GetPinValue+0xd8>
    1ea0:	55 95       	asr	r21
    1ea2:	47 95       	ror	r20
    1ea4:	8a 95       	dec	r24
    1ea6:	e2 f7       	brpl	.-8      	; 0x1ea0 <DIO_u8GetPinValue+0xd4>
    1ea8:	ca 01       	movw	r24, r20
    1eaa:	81 70       	andi	r24, 0x01	; 1
    1eac:	89 83       	std	Y+1, r24	; 0x01
	}
	return pin_value;
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	00 d0       	rcall	.+0      	; 0x1ec6 <DIO_voidSetPortDirection+0x6>
    1ec6:	00 d0       	rcall	.+0      	; 0x1ec8 <DIO_voidSetPortDirection+0x8>
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    1ece:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	28 2f       	mov	r18, r24
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	3c 83       	std	Y+4, r19	; 0x04
    1ed8:	2b 83       	std	Y+3, r18	; 0x03
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ede:	81 30       	cpi	r24, 0x01	; 1
    1ee0:	91 05       	cpc	r25, r1
    1ee2:	d1 f0       	breq	.+52     	; 0x1f18 <DIO_voidSetPortDirection+0x58>
    1ee4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ee8:	22 30       	cpi	r18, 0x02	; 2
    1eea:	31 05       	cpc	r19, r1
    1eec:	2c f4       	brge	.+10     	; 0x1ef8 <DIO_voidSetPortDirection+0x38>
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef2:	00 97       	sbiw	r24, 0x00	; 0
    1ef4:	61 f0       	breq	.+24     	; 0x1f0e <DIO_voidSetPortDirection+0x4e>
    1ef6:	1e c0       	rjmp	.+60     	; 0x1f34 <DIO_voidSetPortDirection+0x74>
    1ef8:	2b 81       	ldd	r18, Y+3	; 0x03
    1efa:	3c 81       	ldd	r19, Y+4	; 0x04
    1efc:	22 30       	cpi	r18, 0x02	; 2
    1efe:	31 05       	cpc	r19, r1
    1f00:	81 f0       	breq	.+32     	; 0x1f22 <DIO_voidSetPortDirection+0x62>
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	9c 81       	ldd	r25, Y+4	; 0x04
    1f06:	83 30       	cpi	r24, 0x03	; 3
    1f08:	91 05       	cpc	r25, r1
    1f0a:	81 f0       	breq	.+32     	; 0x1f2c <DIO_voidSetPortDirection+0x6c>
    1f0c:	13 c0       	rjmp	.+38     	; 0x1f34 <DIO_voidSetPortDirection+0x74>
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
    1f0e:	ea e3       	ldi	r30, 0x3A	; 58
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	8a 81       	ldd	r24, Y+2	; 0x02
    1f14:	80 83       	st	Z, r24
    1f16:	0e c0       	rjmp	.+28     	; 0x1f34 <DIO_voidSetPortDirection+0x74>
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
    1f18:	e7 e3       	ldi	r30, 0x37	; 55
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1e:	80 83       	st	Z, r24
    1f20:	09 c0       	rjmp	.+18     	; 0x1f34 <DIO_voidSetPortDirection+0x74>
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
    1f22:	e4 e3       	ldi	r30, 0x34	; 52
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	8a 81       	ldd	r24, Y+2	; 0x02
    1f28:	80 83       	st	Z, r24
    1f2a:	04 c0       	rjmp	.+8      	; 0x1f34 <DIO_voidSetPortDirection+0x74>
	case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
    1f2c:	e1 e3       	ldi	r30, 0x31	; 49
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	80 83       	st	Z, r24
	}
}
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	cf 91       	pop	r28
    1f3e:	df 91       	pop	r29
    1f40:	08 95       	ret

00001f42 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    1f42:	df 93       	push	r29
    1f44:	cf 93       	push	r28
    1f46:	00 d0       	rcall	.+0      	; 0x1f48 <DIO_voidSetPortValue+0x6>
    1f48:	00 d0       	rcall	.+0      	; 0x1f4a <DIO_voidSetPortValue+0x8>
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    1f4e:	89 83       	std	Y+1, r24	; 0x01
    1f50:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	28 2f       	mov	r18, r24
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	3c 83       	std	Y+4, r19	; 0x04
    1f5a:	2b 83       	std	Y+3, r18	; 0x03
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f60:	81 30       	cpi	r24, 0x01	; 1
    1f62:	91 05       	cpc	r25, r1
    1f64:	d1 f0       	breq	.+52     	; 0x1f9a <DIO_voidSetPortValue+0x58>
    1f66:	2b 81       	ldd	r18, Y+3	; 0x03
    1f68:	3c 81       	ldd	r19, Y+4	; 0x04
    1f6a:	22 30       	cpi	r18, 0x02	; 2
    1f6c:	31 05       	cpc	r19, r1
    1f6e:	2c f4       	brge	.+10     	; 0x1f7a <DIO_voidSetPortValue+0x38>
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	9c 81       	ldd	r25, Y+4	; 0x04
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	61 f0       	breq	.+24     	; 0x1f90 <DIO_voidSetPortValue+0x4e>
    1f78:	1e c0       	rjmp	.+60     	; 0x1fb6 <DIO_voidSetPortValue+0x74>
    1f7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f7e:	22 30       	cpi	r18, 0x02	; 2
    1f80:	31 05       	cpc	r19, r1
    1f82:	81 f0       	breq	.+32     	; 0x1fa4 <DIO_voidSetPortValue+0x62>
    1f84:	8b 81       	ldd	r24, Y+3	; 0x03
    1f86:	9c 81       	ldd	r25, Y+4	; 0x04
    1f88:	83 30       	cpi	r24, 0x03	; 3
    1f8a:	91 05       	cpc	r25, r1
    1f8c:	81 f0       	breq	.+32     	; 0x1fae <DIO_voidSetPortValue+0x6c>
    1f8e:	13 c0       	rjmp	.+38     	; 0x1fb6 <DIO_voidSetPortValue+0x74>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
    1f90:	eb e3       	ldi	r30, 0x3B	; 59
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	80 83       	st	Z, r24
    1f98:	0e c0       	rjmp	.+28     	; 0x1fb6 <DIO_voidSetPortValue+0x74>
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
    1f9a:	e8 e3       	ldi	r30, 0x38	; 56
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	80 83       	st	Z, r24
    1fa2:	09 c0       	rjmp	.+18     	; 0x1fb6 <DIO_voidSetPortValue+0x74>
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
    1fa4:	e5 e3       	ldi	r30, 0x35	; 53
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	80 83       	st	Z, r24
    1fac:	04 c0       	rjmp	.+8      	; 0x1fb6 <DIO_voidSetPortValue+0x74>
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
    1fae:	e2 e3       	ldi	r30, 0x32	; 50
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb4:	80 83       	st	Z, r24
	}
}
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	cf 91       	pop	r28
    1fc0:	df 91       	pop	r29
    1fc2:	08 95       	ret

00001fc4 <DIO_u8GetPortValue>:

u8 	 DIO_u8GetPortValue(u8 Copy_u8Port)
{
    1fc4:	df 93       	push	r29
    1fc6:	cf 93       	push	r28
    1fc8:	00 d0       	rcall	.+0      	; 0x1fca <DIO_u8GetPortValue+0x6>
    1fca:	00 d0       	rcall	.+0      	; 0x1fcc <DIO_u8GetPortValue+0x8>
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
    1fd0:	8a 83       	std	Y+2, r24	; 0x02
	u8 port_value;
	switch(Copy_u8Port)
    1fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd4:	28 2f       	mov	r18, r24
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	3c 83       	std	Y+4, r19	; 0x04
    1fda:	2b 83       	std	Y+3, r18	; 0x03
    1fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fde:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe0:	81 30       	cpi	r24, 0x01	; 1
    1fe2:	91 05       	cpc	r25, r1
    1fe4:	d1 f0       	breq	.+52     	; 0x201a <DIO_u8GetPortValue+0x56>
    1fe6:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe8:	3c 81       	ldd	r19, Y+4	; 0x04
    1fea:	22 30       	cpi	r18, 0x02	; 2
    1fec:	31 05       	cpc	r19, r1
    1fee:	2c f4       	brge	.+10     	; 0x1ffa <DIO_u8GetPortValue+0x36>
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	61 f0       	breq	.+24     	; 0x2010 <DIO_u8GetPortValue+0x4c>
    1ff8:	1e c0       	rjmp	.+60     	; 0x2036 <DIO_u8GetPortValue+0x72>
    1ffa:	2b 81       	ldd	r18, Y+3	; 0x03
    1ffc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ffe:	22 30       	cpi	r18, 0x02	; 2
    2000:	31 05       	cpc	r19, r1
    2002:	81 f0       	breq	.+32     	; 0x2024 <DIO_u8GetPortValue+0x60>
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	9c 81       	ldd	r25, Y+4	; 0x04
    2008:	83 30       	cpi	r24, 0x03	; 3
    200a:	91 05       	cpc	r25, r1
    200c:	81 f0       	breq	.+32     	; 0x202e <DIO_u8GetPortValue+0x6a>
    200e:	13 c0       	rjmp	.+38     	; 0x2036 <DIO_u8GetPortValue+0x72>
	{
	case DIO_u8PORTA : port_value = PORTA; break;
    2010:	eb e3       	ldi	r30, 0x3B	; 59
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	89 83       	std	Y+1, r24	; 0x01
    2018:	0e c0       	rjmp	.+28     	; 0x2036 <DIO_u8GetPortValue+0x72>
	case DIO_u8PORTB : port_value = PORTB; break;
    201a:	e8 e3       	ldi	r30, 0x38	; 56
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	89 83       	std	Y+1, r24	; 0x01
    2022:	09 c0       	rjmp	.+18     	; 0x2036 <DIO_u8GetPortValue+0x72>
	case DIO_u8PORTC : port_value = PORTC; break;
    2024:	e5 e3       	ldi	r30, 0x35	; 53
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	89 83       	std	Y+1, r24	; 0x01
    202c:	04 c0       	rjmp	.+8      	; 0x2036 <DIO_u8GetPortValue+0x72>
	case DIO_u8PORTD : port_value = PORTD; break;
    202e:	e2 e3       	ldi	r30, 0x32	; 50
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	89 83       	std	Y+1, r24	; 0x01
	}
	return port_value;
    2036:	89 81       	ldd	r24, Y+1	; 0x01
}
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	cf 91       	pop	r28
    2042:	df 91       	pop	r29
    2044:	08 95       	ret

00002046 <main>:
#include "DIO_interface.h"
#include "SPI_interface.h"
#include "CLCD_Interface.h"

int main(void)
{
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	00 d0       	rcall	.+0      	; 0x204c <main+0x6>
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Temp;
	u8 LastTemp=0;
    2050:	19 82       	std	Y+1, r1	; 0x01

	//MOSI PIN : output
	DIO_voidSetPinDirection(DIO_u8PORTB , DIO_u8PIN5 , DIO_u8INPUT);
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	65 e0       	ldi	r22, 0x05	; 5
    2056:	40 e0       	ldi	r20, 0x00	; 0
    2058:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <DIO_voidSetPinDirection>

	//Miso PIN : intput
	DIO_voidSetPinDirection(DIO_u8PORTB , DIO_u8PIN6 , DIO_u8OUTPUT);
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	66 e0       	ldi	r22, 0x06	; 6
    2060:	41 e0       	ldi	r20, 0x01	; 1
    2062:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <DIO_voidSetPinDirection>

	//SCK PIN
	DIO_voidSetPinDirection(DIO_u8PORTB , DIO_u8PIN7 , DIO_u8INPUT);
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	67 e0       	ldi	r22, 0x07	; 7
    206a:	40 e0       	ldi	r20, 0x00	; 0
    206c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <DIO_voidSetPinDirection>

	// SS PIN
	DIO_voidSetPinDirection(DIO_u8PORTB , DIO_u8PIN4 , DIO_u8INPUT);
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	64 e0       	ldi	r22, 0x04	; 4
    2074:	40 e0       	ldi	r20, 0x00	; 0
    2076:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <DIO_voidSetPinDirection>

	//Motor PIN
	DIO_voidSetPinDirection(DIO_u8PORTA , DIO_u8PIN0 , DIO_u8OUTPUT);
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	60 e0       	ldi	r22, 0x00	; 0
    207e:	41 e0       	ldi	r20, 0x01	; 1
    2080:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <DIO_voidSetPinDirection>

	CLCD_voidInit();
    2084:	0e 94 84 07 	call	0xf08	; 0xf08 <CLCD_voidInit>
	SPI_voidInit();
    2088:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <SPI_voidInit>

	while(1)
	{
		Local_u8Temp = SPI_u8Transceiver(0);
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	0e 94 7f 10 	call	0x20fe	; 0x20fe <SPI_u8Transceiver>
    2092:	8a 83       	std	Y+2, r24	; 0x02

		if(LastTemp != Local_u8Temp)
    2094:	99 81       	ldd	r25, Y+1	; 0x01
    2096:	8a 81       	ldd	r24, Y+2	; 0x02
    2098:	98 17       	cp	r25, r24
    209a:	69 f0       	breq	.+26     	; 0x20b6 <main+0x70>
		{
			CLCD_voidClearDisplay();
    209c:	0e 94 9c 0b 	call	0x1738	; 0x1738 <CLCD_voidClearDisplay>
			CLCD_voidSendInteger(Local_u8Temp);
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	88 2f       	mov	r24, r24
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	a0 e0       	ldi	r26, 0x00	; 0
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	bc 01       	movw	r22, r24
    20ac:	cd 01       	movw	r24, r26
    20ae:	0e 94 4e 08 	call	0x109c	; 0x109c <CLCD_voidSendInteger>
			LastTemp = Local_u8Temp;
    20b2:	8a 81       	ldd	r24, Y+2	; 0x02
    20b4:	89 83       	std	Y+1, r24	; 0x01
		}

		if(Local_u8Temp > 26)
    20b6:	8a 81       	ldd	r24, Y+2	; 0x02
    20b8:	8b 31       	cpi	r24, 0x1B	; 27
    20ba:	30 f0       	brcs	.+12     	; 0x20c8 <main+0x82>
		{
			DIO_voidSetPinValue(DIO_u8PORTA , DIO_u8PIN0 , DIO_u8HIGH);
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	60 e0       	ldi	r22, 0x00	; 0
    20c0:	41 e0       	ldi	r20, 0x01	; 1
    20c2:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <DIO_voidSetPinValue>
    20c6:	e2 cf       	rjmp	.-60     	; 0x208c <main+0x46>
		}
		else
		{
			DIO_voidSetPinValue(DIO_u8PORTA , DIO_u8PIN0 , DIO_u8LOW);
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	60 e0       	ldi	r22, 0x00	; 0
    20cc:	40 e0       	ldi	r20, 0x00	; 0
    20ce:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <DIO_voidSetPinValue>
    20d2:	dc cf       	rjmp	.-72     	; 0x208c <main+0x46>

000020d4 <SPI_voidInit>:




void SPI_voidInit(void)
{
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
			CLR_BIT(SPCR , 1);
			CLR_BIT(SPSR , 0);
		}
	#elif(SPI_MODE == SLAVE)
		{
			CLR_BIT(SPCR , 4);
    20dc:	ad e2       	ldi	r26, 0x2D	; 45
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	ed e2       	ldi	r30, 0x2D	; 45
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	8f 7e       	andi	r24, 0xEF	; 239
    20e8:	8c 93       	st	X, r24
		}
	#endif

	//Enable SPI
	SET_BIT(SPCR , 6);
    20ea:	ad e2       	ldi	r26, 0x2D	; 45
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	ed e2       	ldi	r30, 0x2D	; 45
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	80 64       	ori	r24, 0x40	; 64
    20f6:	8c 93       	st	X, r24
}
    20f8:	cf 91       	pop	r28
    20fa:	df 91       	pop	r29
    20fc:	08 95       	ret

000020fe <SPI_u8Transceiver>:

u8 SPI_u8Transceiver(u8 Copy_u8Data)
{
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	0f 92       	push	r0
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Copy_u8Data;
    210a:	ef e2       	ldi	r30, 0x2F	; 47
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	80 83       	st	Z, r24
    2112:	01 c0       	rjmp	.+2      	; 0x2116 <SPI_u8Transceiver+0x18>

	while((GET_BIT(SPSR , 7)) != 1)
	{
		asm("NOP");
    2114:	00 00       	nop

u8 SPI_u8Transceiver(u8 Copy_u8Data)
{
	SPDR = Copy_u8Data;

	while((GET_BIT(SPSR , 7)) != 1)
    2116:	ee e2       	ldi	r30, 0x2E	; 46
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	88 1f       	adc	r24, r24
    211e:	88 27       	eor	r24, r24
    2120:	88 1f       	adc	r24, r24
    2122:	81 30       	cpi	r24, 0x01	; 1
    2124:	b9 f7       	brne	.-18     	; 0x2114 <SPI_u8Transceiver+0x16>
	{
		asm("NOP");
	}

	return SPDR;
    2126:	ef e2       	ldi	r30, 0x2F	; 47
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
}
    212c:	0f 90       	pop	r0
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <__udivmodsi4>:
    2134:	a1 e2       	ldi	r26, 0x21	; 33
    2136:	1a 2e       	mov	r1, r26
    2138:	aa 1b       	sub	r26, r26
    213a:	bb 1b       	sub	r27, r27
    213c:	fd 01       	movw	r30, r26
    213e:	0d c0       	rjmp	.+26     	; 0x215a <__udivmodsi4_ep>

00002140 <__udivmodsi4_loop>:
    2140:	aa 1f       	adc	r26, r26
    2142:	bb 1f       	adc	r27, r27
    2144:	ee 1f       	adc	r30, r30
    2146:	ff 1f       	adc	r31, r31
    2148:	a2 17       	cp	r26, r18
    214a:	b3 07       	cpc	r27, r19
    214c:	e4 07       	cpc	r30, r20
    214e:	f5 07       	cpc	r31, r21
    2150:	20 f0       	brcs	.+8      	; 0x215a <__udivmodsi4_ep>
    2152:	a2 1b       	sub	r26, r18
    2154:	b3 0b       	sbc	r27, r19
    2156:	e4 0b       	sbc	r30, r20
    2158:	f5 0b       	sbc	r31, r21

0000215a <__udivmodsi4_ep>:
    215a:	66 1f       	adc	r22, r22
    215c:	77 1f       	adc	r23, r23
    215e:	88 1f       	adc	r24, r24
    2160:	99 1f       	adc	r25, r25
    2162:	1a 94       	dec	r1
    2164:	69 f7       	brne	.-38     	; 0x2140 <__udivmodsi4_loop>
    2166:	60 95       	com	r22
    2168:	70 95       	com	r23
    216a:	80 95       	com	r24
    216c:	90 95       	com	r25
    216e:	9b 01       	movw	r18, r22
    2170:	ac 01       	movw	r20, r24
    2172:	bd 01       	movw	r22, r26
    2174:	cf 01       	movw	r24, r30
    2176:	08 95       	ret

00002178 <__prologue_saves__>:
    2178:	2f 92       	push	r2
    217a:	3f 92       	push	r3
    217c:	4f 92       	push	r4
    217e:	5f 92       	push	r5
    2180:	6f 92       	push	r6
    2182:	7f 92       	push	r7
    2184:	8f 92       	push	r8
    2186:	9f 92       	push	r9
    2188:	af 92       	push	r10
    218a:	bf 92       	push	r11
    218c:	cf 92       	push	r12
    218e:	df 92       	push	r13
    2190:	ef 92       	push	r14
    2192:	ff 92       	push	r15
    2194:	0f 93       	push	r16
    2196:	1f 93       	push	r17
    2198:	cf 93       	push	r28
    219a:	df 93       	push	r29
    219c:	cd b7       	in	r28, 0x3d	; 61
    219e:	de b7       	in	r29, 0x3e	; 62
    21a0:	ca 1b       	sub	r28, r26
    21a2:	db 0b       	sbc	r29, r27
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	cd bf       	out	0x3d, r28	; 61
    21ae:	09 94       	ijmp

000021b0 <__epilogue_restores__>:
    21b0:	2a 88       	ldd	r2, Y+18	; 0x12
    21b2:	39 88       	ldd	r3, Y+17	; 0x11
    21b4:	48 88       	ldd	r4, Y+16	; 0x10
    21b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    21b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    21ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    21bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    21be:	9b 84       	ldd	r9, Y+11	; 0x0b
    21c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    21c2:	b9 84       	ldd	r11, Y+9	; 0x09
    21c4:	c8 84       	ldd	r12, Y+8	; 0x08
    21c6:	df 80       	ldd	r13, Y+7	; 0x07
    21c8:	ee 80       	ldd	r14, Y+6	; 0x06
    21ca:	fd 80       	ldd	r15, Y+5	; 0x05
    21cc:	0c 81       	ldd	r16, Y+4	; 0x04
    21ce:	1b 81       	ldd	r17, Y+3	; 0x03
    21d0:	aa 81       	ldd	r26, Y+2	; 0x02
    21d2:	b9 81       	ldd	r27, Y+1	; 0x01
    21d4:	ce 0f       	add	r28, r30
    21d6:	d1 1d       	adc	r29, r1
    21d8:	0f b6       	in	r0, 0x3f	; 63
    21da:	f8 94       	cli
    21dc:	de bf       	out	0x3e, r29	; 62
    21de:	0f be       	out	0x3f, r0	; 63
    21e0:	cd bf       	out	0x3d, r28	; 61
    21e2:	ed 01       	movw	r28, r26
    21e4:	08 95       	ret

000021e6 <sprintf>:
    21e6:	ae e0       	ldi	r26, 0x0E	; 14
    21e8:	b0 e0       	ldi	r27, 0x00	; 0
    21ea:	e9 ef       	ldi	r30, 0xF9	; 249
    21ec:	f0 e1       	ldi	r31, 0x10	; 16
    21ee:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__prologue_saves__+0x1c>
    21f2:	0d 89       	ldd	r16, Y+21	; 0x15
    21f4:	1e 89       	ldd	r17, Y+22	; 0x16
    21f6:	86 e0       	ldi	r24, 0x06	; 6
    21f8:	8c 83       	std	Y+4, r24	; 0x04
    21fa:	1a 83       	std	Y+2, r17	; 0x02
    21fc:	09 83       	std	Y+1, r16	; 0x01
    21fe:	8f ef       	ldi	r24, 0xFF	; 255
    2200:	9f e7       	ldi	r25, 0x7F	; 127
    2202:	9e 83       	std	Y+6, r25	; 0x06
    2204:	8d 83       	std	Y+5, r24	; 0x05
    2206:	9e 01       	movw	r18, r28
    2208:	27 5e       	subi	r18, 0xE7	; 231
    220a:	3f 4f       	sbci	r19, 0xFF	; 255
    220c:	ce 01       	movw	r24, r28
    220e:	01 96       	adiw	r24, 0x01	; 1
    2210:	6f 89       	ldd	r22, Y+23	; 0x17
    2212:	78 8d       	ldd	r23, Y+24	; 0x18
    2214:	a9 01       	movw	r20, r18
    2216:	0e 94 17 11 	call	0x222e	; 0x222e <vfprintf>
    221a:	2f 81       	ldd	r18, Y+7	; 0x07
    221c:	38 85       	ldd	r19, Y+8	; 0x08
    221e:	02 0f       	add	r16, r18
    2220:	13 1f       	adc	r17, r19
    2222:	f8 01       	movw	r30, r16
    2224:	10 82       	st	Z, r1
    2226:	2e 96       	adiw	r28, 0x0e	; 14
    2228:	e4 e0       	ldi	r30, 0x04	; 4
    222a:	0c 94 e6 10 	jmp	0x21cc	; 0x21cc <__epilogue_restores__+0x1c>

0000222e <vfprintf>:
    222e:	ab e0       	ldi	r26, 0x0B	; 11
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	ed e1       	ldi	r30, 0x1D	; 29
    2234:	f1 e1       	ldi	r31, 0x11	; 17
    2236:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <__prologue_saves__>
    223a:	3c 01       	movw	r6, r24
    223c:	2b 01       	movw	r4, r22
    223e:	5a 01       	movw	r10, r20
    2240:	fc 01       	movw	r30, r24
    2242:	17 82       	std	Z+7, r1	; 0x07
    2244:	16 82       	std	Z+6, r1	; 0x06
    2246:	83 81       	ldd	r24, Z+3	; 0x03
    2248:	81 fd       	sbrc	r24, 1
    224a:	03 c0       	rjmp	.+6      	; 0x2252 <vfprintf+0x24>
    224c:	6f ef       	ldi	r22, 0xFF	; 255
    224e:	7f ef       	ldi	r23, 0xFF	; 255
    2250:	c6 c1       	rjmp	.+908    	; 0x25de <vfprintf+0x3b0>
    2252:	9a e0       	ldi	r25, 0x0A	; 10
    2254:	89 2e       	mov	r8, r25
    2256:	1e 01       	movw	r2, r28
    2258:	08 94       	sec
    225a:	21 1c       	adc	r2, r1
    225c:	31 1c       	adc	r3, r1
    225e:	f3 01       	movw	r30, r6
    2260:	23 81       	ldd	r18, Z+3	; 0x03
    2262:	f2 01       	movw	r30, r4
    2264:	23 fd       	sbrc	r18, 3
    2266:	85 91       	lpm	r24, Z+
    2268:	23 ff       	sbrs	r18, 3
    226a:	81 91       	ld	r24, Z+
    226c:	2f 01       	movw	r4, r30
    226e:	88 23       	and	r24, r24
    2270:	09 f4       	brne	.+2      	; 0x2274 <vfprintf+0x46>
    2272:	b2 c1       	rjmp	.+868    	; 0x25d8 <vfprintf+0x3aa>
    2274:	85 32       	cpi	r24, 0x25	; 37
    2276:	39 f4       	brne	.+14     	; 0x2286 <vfprintf+0x58>
    2278:	23 fd       	sbrc	r18, 3
    227a:	85 91       	lpm	r24, Z+
    227c:	23 ff       	sbrs	r18, 3
    227e:	81 91       	ld	r24, Z+
    2280:	2f 01       	movw	r4, r30
    2282:	85 32       	cpi	r24, 0x25	; 37
    2284:	29 f4       	brne	.+10     	; 0x2290 <vfprintf+0x62>
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	b3 01       	movw	r22, r6
    228a:	0e 94 0a 13 	call	0x2614	; 0x2614 <fputc>
    228e:	e7 cf       	rjmp	.-50     	; 0x225e <vfprintf+0x30>
    2290:	98 2f       	mov	r25, r24
    2292:	ff 24       	eor	r15, r15
    2294:	ee 24       	eor	r14, r14
    2296:	99 24       	eor	r9, r9
    2298:	ff e1       	ldi	r31, 0x1F	; 31
    229a:	ff 15       	cp	r31, r15
    229c:	d0 f0       	brcs	.+52     	; 0x22d2 <vfprintf+0xa4>
    229e:	9b 32       	cpi	r25, 0x2B	; 43
    22a0:	69 f0       	breq	.+26     	; 0x22bc <vfprintf+0x8e>
    22a2:	9c 32       	cpi	r25, 0x2C	; 44
    22a4:	28 f4       	brcc	.+10     	; 0x22b0 <vfprintf+0x82>
    22a6:	90 32       	cpi	r25, 0x20	; 32
    22a8:	59 f0       	breq	.+22     	; 0x22c0 <vfprintf+0x92>
    22aa:	93 32       	cpi	r25, 0x23	; 35
    22ac:	91 f4       	brne	.+36     	; 0x22d2 <vfprintf+0xa4>
    22ae:	0e c0       	rjmp	.+28     	; 0x22cc <vfprintf+0x9e>
    22b0:	9d 32       	cpi	r25, 0x2D	; 45
    22b2:	49 f0       	breq	.+18     	; 0x22c6 <vfprintf+0x98>
    22b4:	90 33       	cpi	r25, 0x30	; 48
    22b6:	69 f4       	brne	.+26     	; 0x22d2 <vfprintf+0xa4>
    22b8:	41 e0       	ldi	r20, 0x01	; 1
    22ba:	24 c0       	rjmp	.+72     	; 0x2304 <vfprintf+0xd6>
    22bc:	52 e0       	ldi	r21, 0x02	; 2
    22be:	f5 2a       	or	r15, r21
    22c0:	84 e0       	ldi	r24, 0x04	; 4
    22c2:	f8 2a       	or	r15, r24
    22c4:	28 c0       	rjmp	.+80     	; 0x2316 <vfprintf+0xe8>
    22c6:	98 e0       	ldi	r25, 0x08	; 8
    22c8:	f9 2a       	or	r15, r25
    22ca:	25 c0       	rjmp	.+74     	; 0x2316 <vfprintf+0xe8>
    22cc:	e0 e1       	ldi	r30, 0x10	; 16
    22ce:	fe 2a       	or	r15, r30
    22d0:	22 c0       	rjmp	.+68     	; 0x2316 <vfprintf+0xe8>
    22d2:	f7 fc       	sbrc	r15, 7
    22d4:	29 c0       	rjmp	.+82     	; 0x2328 <vfprintf+0xfa>
    22d6:	89 2f       	mov	r24, r25
    22d8:	80 53       	subi	r24, 0x30	; 48
    22da:	8a 30       	cpi	r24, 0x0A	; 10
    22dc:	70 f4       	brcc	.+28     	; 0x22fa <vfprintf+0xcc>
    22de:	f6 fe       	sbrs	r15, 6
    22e0:	05 c0       	rjmp	.+10     	; 0x22ec <vfprintf+0xbe>
    22e2:	98 9c       	mul	r9, r8
    22e4:	90 2c       	mov	r9, r0
    22e6:	11 24       	eor	r1, r1
    22e8:	98 0e       	add	r9, r24
    22ea:	15 c0       	rjmp	.+42     	; 0x2316 <vfprintf+0xe8>
    22ec:	e8 9c       	mul	r14, r8
    22ee:	e0 2c       	mov	r14, r0
    22f0:	11 24       	eor	r1, r1
    22f2:	e8 0e       	add	r14, r24
    22f4:	f0 e2       	ldi	r31, 0x20	; 32
    22f6:	ff 2a       	or	r15, r31
    22f8:	0e c0       	rjmp	.+28     	; 0x2316 <vfprintf+0xe8>
    22fa:	9e 32       	cpi	r25, 0x2E	; 46
    22fc:	29 f4       	brne	.+10     	; 0x2308 <vfprintf+0xda>
    22fe:	f6 fc       	sbrc	r15, 6
    2300:	6b c1       	rjmp	.+726    	; 0x25d8 <vfprintf+0x3aa>
    2302:	40 e4       	ldi	r20, 0x40	; 64
    2304:	f4 2a       	or	r15, r20
    2306:	07 c0       	rjmp	.+14     	; 0x2316 <vfprintf+0xe8>
    2308:	9c 36       	cpi	r25, 0x6C	; 108
    230a:	19 f4       	brne	.+6      	; 0x2312 <vfprintf+0xe4>
    230c:	50 e8       	ldi	r21, 0x80	; 128
    230e:	f5 2a       	or	r15, r21
    2310:	02 c0       	rjmp	.+4      	; 0x2316 <vfprintf+0xe8>
    2312:	98 36       	cpi	r25, 0x68	; 104
    2314:	49 f4       	brne	.+18     	; 0x2328 <vfprintf+0xfa>
    2316:	f2 01       	movw	r30, r4
    2318:	23 fd       	sbrc	r18, 3
    231a:	95 91       	lpm	r25, Z+
    231c:	23 ff       	sbrs	r18, 3
    231e:	91 91       	ld	r25, Z+
    2320:	2f 01       	movw	r4, r30
    2322:	99 23       	and	r25, r25
    2324:	09 f0       	breq	.+2      	; 0x2328 <vfprintf+0xfa>
    2326:	b8 cf       	rjmp	.-144    	; 0x2298 <vfprintf+0x6a>
    2328:	89 2f       	mov	r24, r25
    232a:	85 54       	subi	r24, 0x45	; 69
    232c:	83 30       	cpi	r24, 0x03	; 3
    232e:	18 f0       	brcs	.+6      	; 0x2336 <vfprintf+0x108>
    2330:	80 52       	subi	r24, 0x20	; 32
    2332:	83 30       	cpi	r24, 0x03	; 3
    2334:	38 f4       	brcc	.+14     	; 0x2344 <vfprintf+0x116>
    2336:	44 e0       	ldi	r20, 0x04	; 4
    2338:	50 e0       	ldi	r21, 0x00	; 0
    233a:	a4 0e       	add	r10, r20
    233c:	b5 1e       	adc	r11, r21
    233e:	5f e3       	ldi	r21, 0x3F	; 63
    2340:	59 83       	std	Y+1, r21	; 0x01
    2342:	0f c0       	rjmp	.+30     	; 0x2362 <vfprintf+0x134>
    2344:	93 36       	cpi	r25, 0x63	; 99
    2346:	31 f0       	breq	.+12     	; 0x2354 <vfprintf+0x126>
    2348:	93 37       	cpi	r25, 0x73	; 115
    234a:	79 f0       	breq	.+30     	; 0x236a <vfprintf+0x13c>
    234c:	93 35       	cpi	r25, 0x53	; 83
    234e:	09 f0       	breq	.+2      	; 0x2352 <vfprintf+0x124>
    2350:	56 c0       	rjmp	.+172    	; 0x23fe <vfprintf+0x1d0>
    2352:	20 c0       	rjmp	.+64     	; 0x2394 <vfprintf+0x166>
    2354:	f5 01       	movw	r30, r10
    2356:	80 81       	ld	r24, Z
    2358:	89 83       	std	Y+1, r24	; 0x01
    235a:	42 e0       	ldi	r20, 0x02	; 2
    235c:	50 e0       	ldi	r21, 0x00	; 0
    235e:	a4 0e       	add	r10, r20
    2360:	b5 1e       	adc	r11, r21
    2362:	61 01       	movw	r12, r2
    2364:	01 e0       	ldi	r16, 0x01	; 1
    2366:	10 e0       	ldi	r17, 0x00	; 0
    2368:	12 c0       	rjmp	.+36     	; 0x238e <vfprintf+0x160>
    236a:	f5 01       	movw	r30, r10
    236c:	c0 80       	ld	r12, Z
    236e:	d1 80       	ldd	r13, Z+1	; 0x01
    2370:	f6 fc       	sbrc	r15, 6
    2372:	03 c0       	rjmp	.+6      	; 0x237a <vfprintf+0x14c>
    2374:	6f ef       	ldi	r22, 0xFF	; 255
    2376:	7f ef       	ldi	r23, 0xFF	; 255
    2378:	02 c0       	rjmp	.+4      	; 0x237e <vfprintf+0x150>
    237a:	69 2d       	mov	r22, r9
    237c:	70 e0       	ldi	r23, 0x00	; 0
    237e:	42 e0       	ldi	r20, 0x02	; 2
    2380:	50 e0       	ldi	r21, 0x00	; 0
    2382:	a4 0e       	add	r10, r20
    2384:	b5 1e       	adc	r11, r21
    2386:	c6 01       	movw	r24, r12
    2388:	0e 94 ff 12 	call	0x25fe	; 0x25fe <strnlen>
    238c:	8c 01       	movw	r16, r24
    238e:	5f e7       	ldi	r21, 0x7F	; 127
    2390:	f5 22       	and	r15, r21
    2392:	14 c0       	rjmp	.+40     	; 0x23bc <vfprintf+0x18e>
    2394:	f5 01       	movw	r30, r10
    2396:	c0 80       	ld	r12, Z
    2398:	d1 80       	ldd	r13, Z+1	; 0x01
    239a:	f6 fc       	sbrc	r15, 6
    239c:	03 c0       	rjmp	.+6      	; 0x23a4 <vfprintf+0x176>
    239e:	6f ef       	ldi	r22, 0xFF	; 255
    23a0:	7f ef       	ldi	r23, 0xFF	; 255
    23a2:	02 c0       	rjmp	.+4      	; 0x23a8 <vfprintf+0x17a>
    23a4:	69 2d       	mov	r22, r9
    23a6:	70 e0       	ldi	r23, 0x00	; 0
    23a8:	42 e0       	ldi	r20, 0x02	; 2
    23aa:	50 e0       	ldi	r21, 0x00	; 0
    23ac:	a4 0e       	add	r10, r20
    23ae:	b5 1e       	adc	r11, r21
    23b0:	c6 01       	movw	r24, r12
    23b2:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <strnlen_P>
    23b6:	8c 01       	movw	r16, r24
    23b8:	50 e8       	ldi	r21, 0x80	; 128
    23ba:	f5 2a       	or	r15, r21
    23bc:	f3 fe       	sbrs	r15, 3
    23be:	07 c0       	rjmp	.+14     	; 0x23ce <vfprintf+0x1a0>
    23c0:	1a c0       	rjmp	.+52     	; 0x23f6 <vfprintf+0x1c8>
    23c2:	80 e2       	ldi	r24, 0x20	; 32
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	b3 01       	movw	r22, r6
    23c8:	0e 94 0a 13 	call	0x2614	; 0x2614 <fputc>
    23cc:	ea 94       	dec	r14
    23ce:	8e 2d       	mov	r24, r14
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	08 17       	cp	r16, r24
    23d4:	19 07       	cpc	r17, r25
    23d6:	a8 f3       	brcs	.-22     	; 0x23c2 <vfprintf+0x194>
    23d8:	0e c0       	rjmp	.+28     	; 0x23f6 <vfprintf+0x1c8>
    23da:	f6 01       	movw	r30, r12
    23dc:	f7 fc       	sbrc	r15, 7
    23de:	85 91       	lpm	r24, Z+
    23e0:	f7 fe       	sbrs	r15, 7
    23e2:	81 91       	ld	r24, Z+
    23e4:	6f 01       	movw	r12, r30
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	b3 01       	movw	r22, r6
    23ea:	0e 94 0a 13 	call	0x2614	; 0x2614 <fputc>
    23ee:	e1 10       	cpse	r14, r1
    23f0:	ea 94       	dec	r14
    23f2:	01 50       	subi	r16, 0x01	; 1
    23f4:	10 40       	sbci	r17, 0x00	; 0
    23f6:	01 15       	cp	r16, r1
    23f8:	11 05       	cpc	r17, r1
    23fa:	79 f7       	brne	.-34     	; 0x23da <vfprintf+0x1ac>
    23fc:	ea c0       	rjmp	.+468    	; 0x25d2 <vfprintf+0x3a4>
    23fe:	94 36       	cpi	r25, 0x64	; 100
    2400:	11 f0       	breq	.+4      	; 0x2406 <vfprintf+0x1d8>
    2402:	99 36       	cpi	r25, 0x69	; 105
    2404:	69 f5       	brne	.+90     	; 0x2460 <vfprintf+0x232>
    2406:	f7 fe       	sbrs	r15, 7
    2408:	08 c0       	rjmp	.+16     	; 0x241a <vfprintf+0x1ec>
    240a:	f5 01       	movw	r30, r10
    240c:	20 81       	ld	r18, Z
    240e:	31 81       	ldd	r19, Z+1	; 0x01
    2410:	42 81       	ldd	r20, Z+2	; 0x02
    2412:	53 81       	ldd	r21, Z+3	; 0x03
    2414:	84 e0       	ldi	r24, 0x04	; 4
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	0a c0       	rjmp	.+20     	; 0x242e <vfprintf+0x200>
    241a:	f5 01       	movw	r30, r10
    241c:	80 81       	ld	r24, Z
    241e:	91 81       	ldd	r25, Z+1	; 0x01
    2420:	9c 01       	movw	r18, r24
    2422:	44 27       	eor	r20, r20
    2424:	37 fd       	sbrc	r19, 7
    2426:	40 95       	com	r20
    2428:	54 2f       	mov	r21, r20
    242a:	82 e0       	ldi	r24, 0x02	; 2
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	a8 0e       	add	r10, r24
    2430:	b9 1e       	adc	r11, r25
    2432:	9f e6       	ldi	r25, 0x6F	; 111
    2434:	f9 22       	and	r15, r25
    2436:	57 ff       	sbrs	r21, 7
    2438:	09 c0       	rjmp	.+18     	; 0x244c <vfprintf+0x21e>
    243a:	50 95       	com	r21
    243c:	40 95       	com	r20
    243e:	30 95       	com	r19
    2440:	21 95       	neg	r18
    2442:	3f 4f       	sbci	r19, 0xFF	; 255
    2444:	4f 4f       	sbci	r20, 0xFF	; 255
    2446:	5f 4f       	sbci	r21, 0xFF	; 255
    2448:	e0 e8       	ldi	r30, 0x80	; 128
    244a:	fe 2a       	or	r15, r30
    244c:	ca 01       	movw	r24, r20
    244e:	b9 01       	movw	r22, r18
    2450:	a1 01       	movw	r20, r2
    2452:	2a e0       	ldi	r18, 0x0A	; 10
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	0e 94 36 13 	call	0x266c	; 0x266c <__ultoa_invert>
    245a:	d8 2e       	mov	r13, r24
    245c:	d2 18       	sub	r13, r2
    245e:	40 c0       	rjmp	.+128    	; 0x24e0 <vfprintf+0x2b2>
    2460:	95 37       	cpi	r25, 0x75	; 117
    2462:	29 f4       	brne	.+10     	; 0x246e <vfprintf+0x240>
    2464:	1f 2d       	mov	r17, r15
    2466:	1f 7e       	andi	r17, 0xEF	; 239
    2468:	2a e0       	ldi	r18, 0x0A	; 10
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	1d c0       	rjmp	.+58     	; 0x24a8 <vfprintf+0x27a>
    246e:	1f 2d       	mov	r17, r15
    2470:	19 7f       	andi	r17, 0xF9	; 249
    2472:	9f 36       	cpi	r25, 0x6F	; 111
    2474:	61 f0       	breq	.+24     	; 0x248e <vfprintf+0x260>
    2476:	90 37       	cpi	r25, 0x70	; 112
    2478:	20 f4       	brcc	.+8      	; 0x2482 <vfprintf+0x254>
    247a:	98 35       	cpi	r25, 0x58	; 88
    247c:	09 f0       	breq	.+2      	; 0x2480 <vfprintf+0x252>
    247e:	ac c0       	rjmp	.+344    	; 0x25d8 <vfprintf+0x3aa>
    2480:	0f c0       	rjmp	.+30     	; 0x24a0 <vfprintf+0x272>
    2482:	90 37       	cpi	r25, 0x70	; 112
    2484:	39 f0       	breq	.+14     	; 0x2494 <vfprintf+0x266>
    2486:	98 37       	cpi	r25, 0x78	; 120
    2488:	09 f0       	breq	.+2      	; 0x248c <vfprintf+0x25e>
    248a:	a6 c0       	rjmp	.+332    	; 0x25d8 <vfprintf+0x3aa>
    248c:	04 c0       	rjmp	.+8      	; 0x2496 <vfprintf+0x268>
    248e:	28 e0       	ldi	r18, 0x08	; 8
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	0a c0       	rjmp	.+20     	; 0x24a8 <vfprintf+0x27a>
    2494:	10 61       	ori	r17, 0x10	; 16
    2496:	14 fd       	sbrc	r17, 4
    2498:	14 60       	ori	r17, 0x04	; 4
    249a:	20 e1       	ldi	r18, 0x10	; 16
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	04 c0       	rjmp	.+8      	; 0x24a8 <vfprintf+0x27a>
    24a0:	14 fd       	sbrc	r17, 4
    24a2:	16 60       	ori	r17, 0x06	; 6
    24a4:	20 e1       	ldi	r18, 0x10	; 16
    24a6:	32 e0       	ldi	r19, 0x02	; 2
    24a8:	17 ff       	sbrs	r17, 7
    24aa:	08 c0       	rjmp	.+16     	; 0x24bc <vfprintf+0x28e>
    24ac:	f5 01       	movw	r30, r10
    24ae:	60 81       	ld	r22, Z
    24b0:	71 81       	ldd	r23, Z+1	; 0x01
    24b2:	82 81       	ldd	r24, Z+2	; 0x02
    24b4:	93 81       	ldd	r25, Z+3	; 0x03
    24b6:	44 e0       	ldi	r20, 0x04	; 4
    24b8:	50 e0       	ldi	r21, 0x00	; 0
    24ba:	08 c0       	rjmp	.+16     	; 0x24cc <vfprintf+0x29e>
    24bc:	f5 01       	movw	r30, r10
    24be:	80 81       	ld	r24, Z
    24c0:	91 81       	ldd	r25, Z+1	; 0x01
    24c2:	bc 01       	movw	r22, r24
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	42 e0       	ldi	r20, 0x02	; 2
    24ca:	50 e0       	ldi	r21, 0x00	; 0
    24cc:	a4 0e       	add	r10, r20
    24ce:	b5 1e       	adc	r11, r21
    24d0:	a1 01       	movw	r20, r2
    24d2:	0e 94 36 13 	call	0x266c	; 0x266c <__ultoa_invert>
    24d6:	d8 2e       	mov	r13, r24
    24d8:	d2 18       	sub	r13, r2
    24da:	8f e7       	ldi	r24, 0x7F	; 127
    24dc:	f8 2e       	mov	r15, r24
    24de:	f1 22       	and	r15, r17
    24e0:	f6 fe       	sbrs	r15, 6
    24e2:	0b c0       	rjmp	.+22     	; 0x24fa <vfprintf+0x2cc>
    24e4:	5e ef       	ldi	r21, 0xFE	; 254
    24e6:	f5 22       	and	r15, r21
    24e8:	d9 14       	cp	r13, r9
    24ea:	38 f4       	brcc	.+14     	; 0x24fa <vfprintf+0x2cc>
    24ec:	f4 fe       	sbrs	r15, 4
    24ee:	07 c0       	rjmp	.+14     	; 0x24fe <vfprintf+0x2d0>
    24f0:	f2 fc       	sbrc	r15, 2
    24f2:	05 c0       	rjmp	.+10     	; 0x24fe <vfprintf+0x2d0>
    24f4:	8f ee       	ldi	r24, 0xEF	; 239
    24f6:	f8 22       	and	r15, r24
    24f8:	02 c0       	rjmp	.+4      	; 0x24fe <vfprintf+0x2d0>
    24fa:	1d 2d       	mov	r17, r13
    24fc:	01 c0       	rjmp	.+2      	; 0x2500 <vfprintf+0x2d2>
    24fe:	19 2d       	mov	r17, r9
    2500:	f4 fe       	sbrs	r15, 4
    2502:	0d c0       	rjmp	.+26     	; 0x251e <vfprintf+0x2f0>
    2504:	fe 01       	movw	r30, r28
    2506:	ed 0d       	add	r30, r13
    2508:	f1 1d       	adc	r31, r1
    250a:	80 81       	ld	r24, Z
    250c:	80 33       	cpi	r24, 0x30	; 48
    250e:	19 f4       	brne	.+6      	; 0x2516 <vfprintf+0x2e8>
    2510:	99 ee       	ldi	r25, 0xE9	; 233
    2512:	f9 22       	and	r15, r25
    2514:	08 c0       	rjmp	.+16     	; 0x2526 <vfprintf+0x2f8>
    2516:	1f 5f       	subi	r17, 0xFF	; 255
    2518:	f2 fe       	sbrs	r15, 2
    251a:	05 c0       	rjmp	.+10     	; 0x2526 <vfprintf+0x2f8>
    251c:	03 c0       	rjmp	.+6      	; 0x2524 <vfprintf+0x2f6>
    251e:	8f 2d       	mov	r24, r15
    2520:	86 78       	andi	r24, 0x86	; 134
    2522:	09 f0       	breq	.+2      	; 0x2526 <vfprintf+0x2f8>
    2524:	1f 5f       	subi	r17, 0xFF	; 255
    2526:	0f 2d       	mov	r16, r15
    2528:	f3 fc       	sbrc	r15, 3
    252a:	14 c0       	rjmp	.+40     	; 0x2554 <vfprintf+0x326>
    252c:	f0 fe       	sbrs	r15, 0
    252e:	0f c0       	rjmp	.+30     	; 0x254e <vfprintf+0x320>
    2530:	1e 15       	cp	r17, r14
    2532:	10 f0       	brcs	.+4      	; 0x2538 <vfprintf+0x30a>
    2534:	9d 2c       	mov	r9, r13
    2536:	0b c0       	rjmp	.+22     	; 0x254e <vfprintf+0x320>
    2538:	9d 2c       	mov	r9, r13
    253a:	9e 0c       	add	r9, r14
    253c:	91 1a       	sub	r9, r17
    253e:	1e 2d       	mov	r17, r14
    2540:	06 c0       	rjmp	.+12     	; 0x254e <vfprintf+0x320>
    2542:	80 e2       	ldi	r24, 0x20	; 32
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	b3 01       	movw	r22, r6
    2548:	0e 94 0a 13 	call	0x2614	; 0x2614 <fputc>
    254c:	1f 5f       	subi	r17, 0xFF	; 255
    254e:	1e 15       	cp	r17, r14
    2550:	c0 f3       	brcs	.-16     	; 0x2542 <vfprintf+0x314>
    2552:	04 c0       	rjmp	.+8      	; 0x255c <vfprintf+0x32e>
    2554:	1e 15       	cp	r17, r14
    2556:	10 f4       	brcc	.+4      	; 0x255c <vfprintf+0x32e>
    2558:	e1 1a       	sub	r14, r17
    255a:	01 c0       	rjmp	.+2      	; 0x255e <vfprintf+0x330>
    255c:	ee 24       	eor	r14, r14
    255e:	04 ff       	sbrs	r16, 4
    2560:	0f c0       	rjmp	.+30     	; 0x2580 <vfprintf+0x352>
    2562:	80 e3       	ldi	r24, 0x30	; 48
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	b3 01       	movw	r22, r6
    2568:	0e 94 0a 13 	call	0x2614	; 0x2614 <fputc>
    256c:	02 ff       	sbrs	r16, 2
    256e:	1d c0       	rjmp	.+58     	; 0x25aa <vfprintf+0x37c>
    2570:	01 fd       	sbrc	r16, 1
    2572:	03 c0       	rjmp	.+6      	; 0x257a <vfprintf+0x34c>
    2574:	88 e7       	ldi	r24, 0x78	; 120
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	0e c0       	rjmp	.+28     	; 0x2596 <vfprintf+0x368>
    257a:	88 e5       	ldi	r24, 0x58	; 88
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	0b c0       	rjmp	.+22     	; 0x2596 <vfprintf+0x368>
    2580:	80 2f       	mov	r24, r16
    2582:	86 78       	andi	r24, 0x86	; 134
    2584:	91 f0       	breq	.+36     	; 0x25aa <vfprintf+0x37c>
    2586:	01 ff       	sbrs	r16, 1
    2588:	02 c0       	rjmp	.+4      	; 0x258e <vfprintf+0x360>
    258a:	8b e2       	ldi	r24, 0x2B	; 43
    258c:	01 c0       	rjmp	.+2      	; 0x2590 <vfprintf+0x362>
    258e:	80 e2       	ldi	r24, 0x20	; 32
    2590:	f7 fc       	sbrc	r15, 7
    2592:	8d e2       	ldi	r24, 0x2D	; 45
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	b3 01       	movw	r22, r6
    2598:	0e 94 0a 13 	call	0x2614	; 0x2614 <fputc>
    259c:	06 c0       	rjmp	.+12     	; 0x25aa <vfprintf+0x37c>
    259e:	80 e3       	ldi	r24, 0x30	; 48
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	b3 01       	movw	r22, r6
    25a4:	0e 94 0a 13 	call	0x2614	; 0x2614 <fputc>
    25a8:	9a 94       	dec	r9
    25aa:	d9 14       	cp	r13, r9
    25ac:	c0 f3       	brcs	.-16     	; 0x259e <vfprintf+0x370>
    25ae:	da 94       	dec	r13
    25b0:	f1 01       	movw	r30, r2
    25b2:	ed 0d       	add	r30, r13
    25b4:	f1 1d       	adc	r31, r1
    25b6:	80 81       	ld	r24, Z
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	b3 01       	movw	r22, r6
    25bc:	0e 94 0a 13 	call	0x2614	; 0x2614 <fputc>
    25c0:	dd 20       	and	r13, r13
    25c2:	a9 f7       	brne	.-22     	; 0x25ae <vfprintf+0x380>
    25c4:	06 c0       	rjmp	.+12     	; 0x25d2 <vfprintf+0x3a4>
    25c6:	80 e2       	ldi	r24, 0x20	; 32
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	b3 01       	movw	r22, r6
    25cc:	0e 94 0a 13 	call	0x2614	; 0x2614 <fputc>
    25d0:	ea 94       	dec	r14
    25d2:	ee 20       	and	r14, r14
    25d4:	c1 f7       	brne	.-16     	; 0x25c6 <vfprintf+0x398>
    25d6:	43 ce       	rjmp	.-890    	; 0x225e <vfprintf+0x30>
    25d8:	f3 01       	movw	r30, r6
    25da:	66 81       	ldd	r22, Z+6	; 0x06
    25dc:	77 81       	ldd	r23, Z+7	; 0x07
    25de:	cb 01       	movw	r24, r22
    25e0:	2b 96       	adiw	r28, 0x0b	; 11
    25e2:	e2 e1       	ldi	r30, 0x12	; 18
    25e4:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__epilogue_restores__>

000025e8 <strnlen_P>:
    25e8:	fc 01       	movw	r30, r24
    25ea:	05 90       	lpm	r0, Z+
    25ec:	61 50       	subi	r22, 0x01	; 1
    25ee:	70 40       	sbci	r23, 0x00	; 0
    25f0:	01 10       	cpse	r0, r1
    25f2:	d8 f7       	brcc	.-10     	; 0x25ea <strnlen_P+0x2>
    25f4:	80 95       	com	r24
    25f6:	90 95       	com	r25
    25f8:	8e 0f       	add	r24, r30
    25fa:	9f 1f       	adc	r25, r31
    25fc:	08 95       	ret

000025fe <strnlen>:
    25fe:	fc 01       	movw	r30, r24
    2600:	61 50       	subi	r22, 0x01	; 1
    2602:	70 40       	sbci	r23, 0x00	; 0
    2604:	01 90       	ld	r0, Z+
    2606:	01 10       	cpse	r0, r1
    2608:	d8 f7       	brcc	.-10     	; 0x2600 <strnlen+0x2>
    260a:	80 95       	com	r24
    260c:	90 95       	com	r25
    260e:	8e 0f       	add	r24, r30
    2610:	9f 1f       	adc	r25, r31
    2612:	08 95       	ret

00002614 <fputc>:
    2614:	0f 93       	push	r16
    2616:	1f 93       	push	r17
    2618:	cf 93       	push	r28
    261a:	df 93       	push	r29
    261c:	8c 01       	movw	r16, r24
    261e:	eb 01       	movw	r28, r22
    2620:	8b 81       	ldd	r24, Y+3	; 0x03
    2622:	81 ff       	sbrs	r24, 1
    2624:	1b c0       	rjmp	.+54     	; 0x265c <fputc+0x48>
    2626:	82 ff       	sbrs	r24, 2
    2628:	0d c0       	rjmp	.+26     	; 0x2644 <fputc+0x30>
    262a:	2e 81       	ldd	r18, Y+6	; 0x06
    262c:	3f 81       	ldd	r19, Y+7	; 0x07
    262e:	8c 81       	ldd	r24, Y+4	; 0x04
    2630:	9d 81       	ldd	r25, Y+5	; 0x05
    2632:	28 17       	cp	r18, r24
    2634:	39 07       	cpc	r19, r25
    2636:	64 f4       	brge	.+24     	; 0x2650 <fputc+0x3c>
    2638:	e8 81       	ld	r30, Y
    263a:	f9 81       	ldd	r31, Y+1	; 0x01
    263c:	01 93       	st	Z+, r16
    263e:	f9 83       	std	Y+1, r31	; 0x01
    2640:	e8 83       	st	Y, r30
    2642:	06 c0       	rjmp	.+12     	; 0x2650 <fputc+0x3c>
    2644:	e8 85       	ldd	r30, Y+8	; 0x08
    2646:	f9 85       	ldd	r31, Y+9	; 0x09
    2648:	80 2f       	mov	r24, r16
    264a:	09 95       	icall
    264c:	89 2b       	or	r24, r25
    264e:	31 f4       	brne	.+12     	; 0x265c <fputc+0x48>
    2650:	8e 81       	ldd	r24, Y+6	; 0x06
    2652:	9f 81       	ldd	r25, Y+7	; 0x07
    2654:	01 96       	adiw	r24, 0x01	; 1
    2656:	9f 83       	std	Y+7, r25	; 0x07
    2658:	8e 83       	std	Y+6, r24	; 0x06
    265a:	02 c0       	rjmp	.+4      	; 0x2660 <fputc+0x4c>
    265c:	0f ef       	ldi	r16, 0xFF	; 255
    265e:	1f ef       	ldi	r17, 0xFF	; 255
    2660:	c8 01       	movw	r24, r16
    2662:	df 91       	pop	r29
    2664:	cf 91       	pop	r28
    2666:	1f 91       	pop	r17
    2668:	0f 91       	pop	r16
    266a:	08 95       	ret

0000266c <__ultoa_invert>:
    266c:	fa 01       	movw	r30, r20
    266e:	aa 27       	eor	r26, r26
    2670:	28 30       	cpi	r18, 0x08	; 8
    2672:	51 f1       	breq	.+84     	; 0x26c8 <__ultoa_invert+0x5c>
    2674:	20 31       	cpi	r18, 0x10	; 16
    2676:	81 f1       	breq	.+96     	; 0x26d8 <__ultoa_invert+0x6c>
    2678:	e8 94       	clt
    267a:	6f 93       	push	r22
    267c:	6e 7f       	andi	r22, 0xFE	; 254
    267e:	6e 5f       	subi	r22, 0xFE	; 254
    2680:	7f 4f       	sbci	r23, 0xFF	; 255
    2682:	8f 4f       	sbci	r24, 0xFF	; 255
    2684:	9f 4f       	sbci	r25, 0xFF	; 255
    2686:	af 4f       	sbci	r26, 0xFF	; 255
    2688:	b1 e0       	ldi	r27, 0x01	; 1
    268a:	3e d0       	rcall	.+124    	; 0x2708 <__ultoa_invert+0x9c>
    268c:	b4 e0       	ldi	r27, 0x04	; 4
    268e:	3c d0       	rcall	.+120    	; 0x2708 <__ultoa_invert+0x9c>
    2690:	67 0f       	add	r22, r23
    2692:	78 1f       	adc	r23, r24
    2694:	89 1f       	adc	r24, r25
    2696:	9a 1f       	adc	r25, r26
    2698:	a1 1d       	adc	r26, r1
    269a:	68 0f       	add	r22, r24
    269c:	79 1f       	adc	r23, r25
    269e:	8a 1f       	adc	r24, r26
    26a0:	91 1d       	adc	r25, r1
    26a2:	a1 1d       	adc	r26, r1
    26a4:	6a 0f       	add	r22, r26
    26a6:	71 1d       	adc	r23, r1
    26a8:	81 1d       	adc	r24, r1
    26aa:	91 1d       	adc	r25, r1
    26ac:	a1 1d       	adc	r26, r1
    26ae:	20 d0       	rcall	.+64     	; 0x26f0 <__ultoa_invert+0x84>
    26b0:	09 f4       	brne	.+2      	; 0x26b4 <__ultoa_invert+0x48>
    26b2:	68 94       	set
    26b4:	3f 91       	pop	r19
    26b6:	2a e0       	ldi	r18, 0x0A	; 10
    26b8:	26 9f       	mul	r18, r22
    26ba:	11 24       	eor	r1, r1
    26bc:	30 19       	sub	r19, r0
    26be:	30 5d       	subi	r19, 0xD0	; 208
    26c0:	31 93       	st	Z+, r19
    26c2:	de f6       	brtc	.-74     	; 0x267a <__ultoa_invert+0xe>
    26c4:	cf 01       	movw	r24, r30
    26c6:	08 95       	ret
    26c8:	46 2f       	mov	r20, r22
    26ca:	47 70       	andi	r20, 0x07	; 7
    26cc:	40 5d       	subi	r20, 0xD0	; 208
    26ce:	41 93       	st	Z+, r20
    26d0:	b3 e0       	ldi	r27, 0x03	; 3
    26d2:	0f d0       	rcall	.+30     	; 0x26f2 <__ultoa_invert+0x86>
    26d4:	c9 f7       	brne	.-14     	; 0x26c8 <__ultoa_invert+0x5c>
    26d6:	f6 cf       	rjmp	.-20     	; 0x26c4 <__ultoa_invert+0x58>
    26d8:	46 2f       	mov	r20, r22
    26da:	4f 70       	andi	r20, 0x0F	; 15
    26dc:	40 5d       	subi	r20, 0xD0	; 208
    26de:	4a 33       	cpi	r20, 0x3A	; 58
    26e0:	18 f0       	brcs	.+6      	; 0x26e8 <__ultoa_invert+0x7c>
    26e2:	49 5d       	subi	r20, 0xD9	; 217
    26e4:	31 fd       	sbrc	r19, 1
    26e6:	40 52       	subi	r20, 0x20	; 32
    26e8:	41 93       	st	Z+, r20
    26ea:	02 d0       	rcall	.+4      	; 0x26f0 <__ultoa_invert+0x84>
    26ec:	a9 f7       	brne	.-22     	; 0x26d8 <__ultoa_invert+0x6c>
    26ee:	ea cf       	rjmp	.-44     	; 0x26c4 <__ultoa_invert+0x58>
    26f0:	b4 e0       	ldi	r27, 0x04	; 4
    26f2:	a6 95       	lsr	r26
    26f4:	97 95       	ror	r25
    26f6:	87 95       	ror	r24
    26f8:	77 95       	ror	r23
    26fa:	67 95       	ror	r22
    26fc:	ba 95       	dec	r27
    26fe:	c9 f7       	brne	.-14     	; 0x26f2 <__ultoa_invert+0x86>
    2700:	00 97       	sbiw	r24, 0x00	; 0
    2702:	61 05       	cpc	r22, r1
    2704:	71 05       	cpc	r23, r1
    2706:	08 95       	ret
    2708:	9b 01       	movw	r18, r22
    270a:	ac 01       	movw	r20, r24
    270c:	0a 2e       	mov	r0, r26
    270e:	06 94       	lsr	r0
    2710:	57 95       	ror	r21
    2712:	47 95       	ror	r20
    2714:	37 95       	ror	r19
    2716:	27 95       	ror	r18
    2718:	ba 95       	dec	r27
    271a:	c9 f7       	brne	.-14     	; 0x270e <__ultoa_invert+0xa2>
    271c:	62 0f       	add	r22, r18
    271e:	73 1f       	adc	r23, r19
    2720:	84 1f       	adc	r24, r20
    2722:	95 1f       	adc	r25, r21
    2724:	a0 1d       	adc	r26, r0
    2726:	08 95       	ret

00002728 <_exit>:
    2728:	f8 94       	cli

0000272a <__stop_program>:
    272a:	ff cf       	rjmp	.-2      	; 0x272a <__stop_program>
